<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10、Java对象的创建和使用-内存分析</title>
    <url>/2022/01/02/10%E3%80%81Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>学生类是一个模板，描述了学生的特征【状态 + 行为】</p>
<p>当前类只描述学生的状态信息【属性】</p>
<p>当使用<code>public</code>修饰这个类时，这个类的类名必须与源文件名一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>类体是有属性和方法组成</p>
<p><code>Student</code>是类，属于引用数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;类体&#125;</span><br></pre></td></tr></table></figure>



<p>由于变量定义在类体当中，方法体之外，这种变量称为成员变量。</p>
<p>所有学生都有学号信息，但是每个学生的学号都是不同的。</p>
<p>所以，要访问这个学号必须先创建对象，通过对象去访问学号信息</p>
<p>学号信息不能直接通过“类”去访问，所以这种成员变量又被叫做 <strong>“实例变量”</strong></p>
<p>对象又被称为实例，实例变量又被称为对象变量。「对象级别的变量」</p>
<p>不创建对象，这个<code>no</code>变量的内存空间是不存在的，只有创建了对象，这个<code>no</code>变量的内存空间才会创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>通过一个类，可以实例化N个对象</p>
<p>实例化对象的语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">className</span>();</span><br></pre></td></tr></table></figure>

<p><code>new</code>是Java语言中的一个运算符</p>
<p><code>new</code>运算符的作用是创建对象，在<code>JVM</code>堆内存当中开辟新的内存空间</p>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>方法区内存：在类加载的时候，class字节码代码片段被加载到该内存空间当中。</p>
<p>栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈</p>
<p>堆内存：<code>new</code>的对象在堆内存中存储</p>
<p>成员变量没有手动赋值的话，系统赋默认值</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte, short, int, long</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">float, double</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">False</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">\u0000</td>
</tr>
<tr>
<td align="center">引用数据类型</td>
<td align="center">null</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testRecursion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="type">Student</span> <span class="variable">students</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">public</span> String name;<span class="number">4</span></span><br><span class="line">   <span class="keyword">public</span> String addRess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码如何用内存图表示？</p>
<h3 id="使用new时，JVM内存图如何表示"><a href="#使用new时，JVM内存图如何表示" class="headerlink" title="使用new时，JVM内存图如何表示"></a>使用new时，JVM内存图如何表示</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/image-61a9c4947f2845ae8cdec72559d8c6df.png" alt="image.png"></p>
<p><code>i</code>变量保存的一个字面值<code>1</code></p>
<p><code>students</code>保存的是一个对象的内存地址，我们称<code>students</code>为<strong>引用</strong></p>
<p>堆内存开辟的空间叫对象，对象的内存地址保存在<code>students</code>中,由于<code>students</code>保存了内存地址指向了堆内存中的对象，所以我们叫<code>students</code>为引用</p>
<blockquote>
<ol>
<li><p>什么是对象？new 运算符在堆内存中开辟的内存空间称为对象。</p>
</li>
<li><p>什么是引用？引用是一个变量，由于这个变量保存了另一个Java对象的内存地址，所以我们称之为引用</p>
</li>
<li><p>在Java中，不能直接操作堆内存，Java中没有指针，如果想要访问堆内存中的数据，必须使用引用的方式去访问。</p>
</li>
<li><p>局部变量在栈内存中存储。</p>
</li>
</ol>
<p>成员变量中的实例变量在堆内存的Java对象内部存储。</p>
</blockquote>
<h3 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h3><p>例如有如下程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">test2</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test2</span>();</span><br><span class="line">    System.out.println(t.name);</span><br><span class="line">    t = <span class="literal">null</span>;</span><br><span class="line">    System.out.println(t.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test2</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;UpYou&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序编译可以通过，运行出现异常，对象索引断裂，发生错误：<code>java.lang.NUllPointerException</code></p>
<p>代码第三行时，拿到了<code>test2</code>对象的内存地址。<br><img src="http://qiniu-note-image.ctong.top/note/images/image-ffc3769ad6a244c5871c589db2ebcd1a.png" alt="image.png"></p>
<p>当代码走到第5行时，<code>t</code>的值不再是<code>test2</code>的内存地址。当值改变后，意味着索引断裂。断裂之后<code>test2</code>对象会被垃圾回收，这时无论如何都无法访问到该对象。空引用无法访问实例相关的数据<br><img src="http://qiniu-note-image.ctong.top/note/images/image-baf35d428fc24a4d8c99f3feab7e7191.png" alt="image.png"></p>
<p><strong>“实例”相关的数据：这个数据访问的时候必须有对象的参与。这种数据就是实例相关的数据</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>JVM（Java虚拟机）主要包括三块内存空间，分别是：栈内存、堆内存、方法区内存</li>
<li>堆内存和方法区内存个有一个，一个线程一个栈内存</li>
<li>方法调用的时候，该方法所需要的内存空间在栈内存中分配，称为<strong>压栈</strong>。方法执行结束之后，该方法所属的内存空间释放，称为弹栈。</li>
<li>栈中主要存储的是方法体当中的局部变量。</li>
<li>方法的代码片段以及整个类的代码片段都被存储到方法区当中，在类加载的时候这些代码片段会载入。</li>
<li>在程序执行过程中使用<code>new</code>运算符创建的Java对象，存储在堆内存当中。对象内部有实例变量，所以实例变量存储在堆内存当中。</li>
<li>变量分类：<ul>
<li>局部变量「方法体中声明」</li>
<li>成员变量「方法体外声明」<ul>
<li>实例变量「前边修饰符没有<code>static</code>」</li>
<li>静态变量「前边修饰符中有<code>static</code>」</li>
</ul>
</li>
</ul>
</li>
<li>静态变量存储在方法区内存当中</li>
<li>三块内存当中，变化最频繁的是栈内存，最先有数据的是方法区内存，垃圾回收器主要针对的是堆内存。</li>
<li>垃圾回收器「自动垃圾回收、GC机制」什么时候会考虑将某个Java对象的内存回收呢？<ul>
<li>当随内存当中的Java对象成为垃圾数据的时候，会被垃圾回收器回收。</li>
<li>当堆内存中的Java对象没有更多的引用指向它的时候就会被当成垃圾。当它被回收的时候，这个对象无法被访问，因为访问对象只能通过引用的方式访问。</li>
</ul>
</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-5a05a8584f2142aab0e67d1f7c00b022.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>11、Java面向对象封装性</title>
    <url>/2022/01/02/11%E3%80%81Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%B0%81%E8%A3%85%E6%80%A7/</url>
    <content><![CDATA[<p><code> Student</code>类中的<code>age	</code>属性在外部程序中可以随意访问，导致<code>age</code>属性的不安全。一个<code>Student</code>对象表示一个用户，年龄不可能等于负数，以下程序当中年龄值为负数，程序运行的时候并没有报错，这是当前程序存在的缺陷。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序的主入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 主方法默认参数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">St</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        St.address = <span class="string">&quot;湛江&quot;</span>;</span><br><span class="line">        St.age = -<span class="number">17</span>;</span><br><span class="line">        St.name = <span class="string">&quot;张美美&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Student.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面向对象包括三大特征：</p>
<ul>
<li>封装<ol>
<li>封装之后，对于那个事物来说，看不到这个事物比较复杂的那一面，只能看到该事物简单的那一面。复杂性封装，对外提供简单的操作入口。</li>
<li>封装之后才会形成真正的<strong>“对象</strong>”，真正的“<strong>独立体</strong>”</li>
<li>封装之后以后的程序可以重复使用。并且这个事物适应性比较强，在任何场合都可以使用。</li>
<li>封装之后，对于事物本身提高了安全性。「<strong>安全级别高</strong>」</li>
</ol>
</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="如何封装？"><a href="#如何封装？" class="headerlink" title="如何封装？"></a>如何封装？</h3><ol>
<li>所有属性私有化，使用<code>private</code>关键字进行修饰，表示私有的，修饰的所有数据只能在本类访问。</li>
<li>对外提供简单的操作入口，也就是说以后外部程序想要访问某一属性，必须通过这些简单的入口进行访问。<ul>
<li>对外提供两个公开的方法，分别是<code>set</code>方法和<code>get</code>方法</li>
<li>想修改某一属性，调用<code>set</code>方法</li>
<li>想读取某一属性，调用<code>get</code>方法</li>
</ul>
</li>
<li>接口的命名规范<ul>
<li><p>Set </p>
<ul>
<li><code>public void set + 属性名首字母大写(形参)&#123;&#125;</code></li>
</ul>
</li>
<li><p>Get </p>
<ul>
<li><code>public 返回值 get + 属性名首字母大写()&#123;&#125;</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<p>对于以下程序来说，属性安全性太高了，外部无法访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个属性通常访问的时候包括几种访问形式？</p>
<ol>
<li>想读取这个属性的值<ul>
<li>Get</li>
</ul>
</li>
<li>想修改这个属性的值<ul>
<li>Set</li>
</ul>
</li>
</ol>
<p>以下程序若想安全控制，可直接在<code>getter</code>、<code>setter</code>方法体中编写逻辑代码，如<code>setAge</code>方法，若在<code>intelliJ IDEA</code>编辑器中，按下<code>control + enter</code>组合快捷键，选择<code>Getter and Setter</code>选项，选择你需要生成的属性，点击选择<code>OK</code>即可自动生成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//-------- Set --------//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> ae)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ae &lt; <span class="number">0</span> || ae &gt; <span class="number">100</span>)</span><br><span class="line">            System.out.printf(<span class="string">&quot;提供了不合法的age:%d\n&quot;</span>, ae);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            age = ae;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String as)</span>&#123;</span><br><span class="line">        address = as;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String ne)</span>&#123;</span><br><span class="line">        name = ne;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//-------- Get --------//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装完后，应该这样使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">Student</span> <span class="variable">St</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">  St.setAge(<span class="number">17</span>);<span class="comment">// 发生错误，输出 提供了不合法的age:-17</span></span><br><span class="line">  St.setName(<span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">  St.setAddress(<span class="string">&quot;广东湛江&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  System.out.println(ZF.getName());<span class="comment">// 输出 UpYou</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>14、Java this关键字</title>
    <url>/2022/01/02/14%E3%80%81Java-this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<ol>
<li><p><code>this</code>是一个关键字，翻译为：<strong>这个</strong></p>
</li>
<li><p><code>this</code>是一个引用，<code>this</code>是一个变量,<code>this</code>变量中保存了内存地址指向自身，<code>this</code>存储在<code>JVM</code>堆内存Java对象内部。</p>
</li>
<li><p>创建100个对象，每一个对象都有<code>this</code>，也就是说有100个不同的<code>this</code></p>
</li>
<li><p>没有<code>static</code>关键字的方法被称为<strong>实例方法</strong></p>
</li>
<li><p>没有<code>static</code>关键字的变量被称为<strong>实例变量</strong></p>
</li>
<li><p>实例变量、实例方法在堆内存中存储，所以访问该数据的时候，必须先创建对象，通过引用方法访问。</p>
</li>
<li><p><code>this</code>可以出现在“<strong>实例方法</strong>”中，<code>this</code>指向当前正在执行的对象。(<code>this</code>代表当前对象)</p>
</li>
<li><p><code>this</code>在多数情况下都可以省略不写。</p>
<ul>
<li>用来区分局部变量和实例变量的时候<code>this</code>不能省略</li>
</ul>
</li>
<li><p>如果一个程序执行过程中没有“<strong>当前对象</strong>”，因为带有<code>static</code>的方法是通过类名的方式访问的，或者说这个“<strong>上下文</strong>”当中没有”<strong>当前对象</strong>“，自然也不存在<code>this</code>(<code>this</code>代表的是当前正在执行这个动作的对象)</p>
</li>
<li><p><code>this</code>不能使用在带有<code>static</code>方法中</p>
</li>
</ol>
<p><strong>例如以下没有当前对象程序：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序在编译过程中报错<code>connot be referenced from a static context.</code></p>
<p><code>name</code>是一个实例变量，以上代码的含义是：访问当前对象的<code>name</code>，<code>getName</code>没有当前对象，自然也不能访问当前对象的<code>name</code>。如果<code>static</code>要访问实例变量，必须通过<strong>实例化</strong>对象访问。例如<code>User u = new User();</code></p>
<p><strong>以下程序不会出现空指针异常：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    u = <span class="literal">null</span>;</span><br><span class="line">    System.out.println(u.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;getName&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>带有<code>static</code>的方法，其实既可以采用类名的方式访问，也可以采用引用的方式访问，但是即使采用引用的方式去访问，实际上执行的时候和引用指向的对象无关。</p>
<h3 id="this-内存结构图"><a href="#this-内存结构图" class="headerlink" title="this 内存结构图"></a><code>this</code> 内存结构图</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/image-6f47ab1909474ebca9f3b85ba58faa46.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>13、Java参数传递</title>
    <url>/2022/01/02/13%E3%80%81Java%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>对象和引用的概念：</p>
<ul>
<li>对象：目前在使用<code>new</code>运算符在堆内存中开辟的内存空间称为对象。</li>
<li>引用：是一个变量，不一定是局部变量，这可能是成员变量。引用保存了内存地址，指向了堆内存当中的对象。所有访问实例相关的数据，都需要通过“引用”的方式访问，因为只有通过引用才能找到对象。如果有一个空的引用，访问对象的实例相关的数据会出现空指针异常。</li>
</ul>
<p>Java语言当中方法调用的时候涉及到参数传递的问题，参数传递实际上传递的是变量中保存的具体值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  add(i);</span><br><span class="line">  System.out.println(<span class="string">&quot;main --&gt; &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">  i++;</span><br><span class="line">  System.out.println(<span class="string">&quot;add ---&gt;&quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main</code> 方法中<code>i</code>变量是局部变量，<code>i</code>变量本身占有内存空间，所以<code>i</code>变量本身也有内存地址，<code>i</code>变量中保持的是 10 这个字面值。</p>
<p><code>add(i);</code>方法在调用的时候，实际上给<code>add</code>方法传递的是<code>main</code> 方法中<code>i</code>这个变量保存的值。与<code>i</code>本身无关。</p>
<p><strong>以下程序如何执行？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Rename&quot;</span>);<span class="comment">// 第一次做修改</span></span><br><span class="line">    setName(user);</span><br><span class="line">    System.out.println(user.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    user.setName(<span class="string">&quot;UpYou&quot;</span>);<span class="comment">// 第二次做修改</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前 name 值为：&quot;</span> + user.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面程序分别打印出什么结果？为什么呢？</p>
<ul>
<li>分别打印出<ul>
<li>当前 name 值为：UpYou</li>
<li>UpYou</li>
<li>因为<code>main</code>中的<code>user</code>拿到的是<code>User</code>对象的内存地址，当第一次修改时，将<code>user</code>对象中的<code>name</code>字段修改为<code>Rename</code>,后又调用<code>setName</code>方法，将<code>User</code>对象的内存地址给到<code>setName</code>方法的<code>user</code>变量，调用这个对象中的<code>setName</code>方法修改<code>name</code>字段。打印输出：<code>当前 name 值为：UpYou</code>后弹栈，继续执行<code>main</code>方法，<code>main</code>使用<code>println</code>方法打印，因为堆内存中的<code>User</code>对象中的<code>name</code>字段已经被<code>setName</code>方法修改，而<code>user</code>的内存地址也是指向<code>User</code>对象，所以拿到的是已经修改后的值。</li>
</ul>
</li>
</ul>
<p><strong><code>user</code>本身也有内存地址，是局部变量，<code>user</code>变量中保存的那个值，这个值是另一个Java对象在堆内存中的内存地址。</strong></p>
<blockquote>
<p>在Java中，方法在调用的时候，参数在传递的时候，传的永远都是变量中保存的那个值。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>15、Java static关键字</title>
    <url>/2022/01/02/15%E3%80%81Java-static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>以下程序中，如果创建100份,每个对象都有一个国籍，而中国人的国籍都是一样的，这样很浪费内存空间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese</span> &#123;</span><br><span class="line">  <span class="comment">// 每个人身份证不同</span></span><br><span class="line">  String id;</span><br><span class="line">  <span class="comment">// 每个人名字不同</span></span><br><span class="line">  String name;</span><br><span class="line">  <span class="comment">//每个中国人国籍一样</span></span><br><span class="line">  String country;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/image-7342af6a1cac447496bfa1e54456d31b.png" alt="image.png"></p>
<p>那么该如何解决这个问题？</p>
<p>所有对象的<code>couuntry</code>一样，这种特征属于类级别的特征，可以提升为整个模板的特征，可以在变量前添加<code>static</code>关键字修饰。如果某一个方法、变量使用了<code>static</code>修饰符，那么这个变量、方法也叫<strong>静态</strong>变量、方法。</p>
<p><code>static String country;</code></p>
<p><strong>静态变量在类加载的时候初始化，不需要创建对象，内存就开辟了</strong></p>
<p><strong>例如：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese</span> &#123;</span><br><span class="line">  <span class="comment">// 每个人身份证不同</span></span><br><span class="line">  String id;</span><br><span class="line">  <span class="comment">// 每个人名字不同</span></span><br><span class="line">  String name;</span><br><span class="line">  <span class="comment">//每个中国人国籍一样</span></span><br><span class="line">  <span class="keyword">static</span> <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Chinese</span> <span class="variable">zhangSan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">  zhangSan.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">  zhangSan.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="type">Chinese</span> <span class="variable">liSi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">  liSi.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">  liSi.setId(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  <span class="type">Chinese</span> <span class="variable">wangWu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">  wangWu.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">  wangWu.setId(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">  System.out.printf(<span class="string">&quot;我是：%s,id:%s，我在：%s\n&quot;</span>, zhangSan.getName(), zhangSan.getId(), Chinese.country);</span><br><span class="line">  System.out.printf(<span class="string">&quot;我是：%s,id:%s，我在：%s\n&quot;</span>, liSi.getName(), liSi.getId(), Chinese.country);</span><br><span class="line">  System.out.printf(<span class="string">&quot;我是：%s,id:%s，我在：%s\n&quot;</span>, wangWu.getName(), wangWu.getId(), Chinese.country);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="http://qiniu-note-image.ctong.top/note/images/image-da349751030a4a6191be6146a89110dc.png" alt="image.png"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-b6d0e49fbe1841c1af55f062a85c2beb.png" alt="image.png"></p>
<h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><ul>
<li>可以使用<code>static</code>关键字来定义“静态代码块”:<ol>
<li>语法格式：<br><code>static&#123;java 语句&#125;</code></li>
<li>静态代码块在类加载时执行，并且只执行一次。</li>
<li>静态代码块在一个类中可以编写多个，并且遵循自上而下的顺序依次执行。</li>
<li>静态代码块的作用是什么？怎么用？用在哪儿？什么时候用？<ul>
<li>类发生装载动作时记录日志时使用。</li>
<li>静态代码块是Java为程序员准备的一个特殊的时刻，这个特殊的时刻被称为类加载时刻。若希望在此时刻执行一段特殊的程序，这段程序可以直接放到静态代码块当中。</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">staticClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    Systrm.out.println(<span class="string">&quot;类加载---&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li>什么时候成员变量声明为实例变量呢？<ul>
<li>所有对象都有这个属性，但是这个属性的值会随着对象的变化而变化「不同对象的这个属性具体的值不同」</li>
</ul>
</li>
<li>什么时候声成员变量声明为静态变量呢？<ul>
<li>所有对象都有这个属性，并且所有对象的这个属性的值是一样的，建议定义为静态变量，节省内存的开销。</li>
</ul>
</li>
<li>静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用<strong>类名.静态变量名</strong>的方式访问。</li>
<li>关于Java中的<code>static</code>关键字：<ol>
<li><code>static</code>翻译为静态的</li>
<li><code>static</code>修饰的方法叫静态方法</li>
<li><code>static</code>修饰的变量叫静态变量</li>
<li>所有<code>static</code>修饰的元素都称为静态的，都可以使用“类名.xxx”的方式访问</li>
<li><code>static</code>修饰的所有元素都是类级别的特征，和具体的对象无关。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>16、Java 方法覆盖</title>
    <url>/2022/01/02/16%E3%80%81Java-%E6%96%B9%E6%B3%95%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<ol>
<li>方法覆盖又被称为方法重写<code>override</code></li>
<li>什么时候使用方法重写？<ul>
<li>当父类中的方法无法满足子类的业务需求，子有必要见父类中继承过来的方法进行重新编写，这个重新编写的过程称为方法重写、覆盖。</li>
</ul>
</li>
<li>什么条件满足之后方法会发生重写？<ul>
<li>方法重写发生在具有关系的父子类之间。</li>
<li>方法名相同、返回值类型相同、参数列表相同。</li>
<li>访问权限不能更低，可以更高。</li>
<li>抛出异常不能更多，可以更少。</li>
</ul>
</li>
<li>注意：<ul>
<li>私有方法不能继承，所以不能覆盖。</li>
<li>构造方法不能继承，所以不能覆盖。</li>
<li>静态方法不存在覆盖。</li>
<li>覆盖只针对方法，不针对属性。</li>
</ul>
</li>
</ol>
<p>有一个<code>Animal</code>类，里面有一个<code>move</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;动物在飞行!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Cat</code>类继承了<code>Animal</code>，那么<code>Cat</code>可以使用<code>move</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>输出<code>动物在飞行!</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.move();</span><br></pre></td></tr></table></figure>

<p>而猫会飞吗？它不会，<code>Animal</code>中的<code>move</code>方法已经无法满足<code>Cat</code>，这时需要重写<code>Animal</code>中的 &#96;&#96;move&#96;方法</p>
<p>根据上面第3条第2项规则：</p>
<p>输出<code>猫在地上走!</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在地上走!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时有一个<code>Bird</code>类也继承了<code>Animal</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<p><code>猫在地上走!</code><br><code>动物在飞行!</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.move();</span><br><span class="line"><span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">bird.move();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>12、Java构造方法</title>
    <url>/2022/01/02/12%E3%80%81Java%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>关于Java类中的构造方法：</p>
<ol>
<li><p>构造方法又被称为构造函数、构造器、Constructor</p>
</li>
<li><p>构造方法语法结构：<br>[修饰符列表] 构造方法名 （形式参数列表）{构造方法体}</p>
</li>
<li><p>对于构造方法来说，返回值类型不需要指定，并且也不能写<code>void</code></p>
</li>
<li><p>构造方法的方法名必须和类名保持一致</p>
</li>
<li><p>构造方法的作用？</p>
<ul>
<li>构造方法存在的意义是，通过构造方法的调用，可以创建对象。</li>
<li>给实例变量赋值。</li>
<li>创建对象的同时，初始化实例变量的内存空间。</li>
</ul>
</li>
<li><p>构造方法应该怎么调用？</p>
<ul>
<li>构造方法必须使用<code>new</code>调用</li>
<li><code>new 构造方法名(实参列表);</code></li>
</ul>
</li>
<li><p>构造方法执行之后，有返回值吗？</p>
<ul>
<li>每一个构造方法实际上执行结束之后都有返回值，但是这个“<code>return 值;</code>”这样的语句不需要写。Java程序自动返回值。</li>
<li>返回值类型是构造方法所在类的类型。由于构造方法的返回值类型就是类本身，所以返回值类型不需要写。</li>
</ul>
</li>
<li><p>当一个类中没有定义任何构造方法的话，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为<strong>缺省构造器</strong></p>
</li>
<li><p>当一个类显示的将构造方法定义出来了，那么系统将不再默认为这个类提供缺省构造器。建议开发中手动的为当前类提供无参数的构造法。</p>
</li>
<li><p>构造方法支持重载机制，在一个类当中编写多个构造方法，这多个构造方法显然已经构成方法重载机制。</p>
</li>
</ol>
<blockquote>
<p>成员变量之实例变量，属于对象级别的变量，这种变量必须先有对象才能有实例变量。实例变量没有手动赋值的时候，系统会赋默认值，那么这个系统默认值是在什么时候完成的呢？是在类加载的时候吗？不是，因为类加载的时候只加载了代码片段，还没来的及创建对象。所以此时实例变量并没有初始化。实际上，实例变量的内存空间是在构造方法执行过程中完成开辟的，完成初始化的。系统在默认赋值的时候，也是在构造方法当中完成的赋值</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>17、Java多态</title>
    <url>/2022/01/02/17%E3%80%81Java%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h2 id="多态基础"><a href="#多态基础" class="headerlink" title="多态基础"></a>多态基础</h2><p>关于多态中涉及到的几个概念：</p>
<ol>
<li>向上转型(upcasting)<ul>
<li>子类型 –&gt; 父类型<br>又被称为：自动类型转换。</li>
</ul>
</li>
<li>向下转型(downcasting)<ul>
<li>父类型 –&gt; 子类型<br>又被称为：强制类型转换。「需要加强制类型转换符」</li>
</ul>
</li>
<li>无论是向上转型还是向下转型，两种类型之间必须要有继承关系，没有继承关系，程序是无法编译通过的。</li>
</ol>
<p><strong>多态语法机制</strong></p>
<ol>
<li><code>Animal</code>和<code>Cat</code>之间存在继承关系，<code>Animal</code>是父类，<code>Cat</code>是子类</li>
<li>Cat is an Animal.</li>
<li><code>new Cat()</code>创建的对象的类型是<code>Cat</code>，<code>cat</code>这个引用的数据类型是<code>Animal</code>，可见他们进行了类型转换。子类型转成父类型，称为向上转型</li>
<li>Java支持父类型引用指向子类型对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;猫在地上走!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;动物在飞行!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Java程序永远都分为编译阶段和运行阶段。</li>
<li>先分析编译阶段，再分析运行阶段，编译无法通过，程序是无法运行的。</li>
<li>编译阶段编译期检查<code>cat</code>这个引用的数据类型为<code>Animal</code>,由于<code>Animal.class</code>字节码文件中有<code>move()</code>方法，所以编译通过了。这个过程我们称为静态绑定，编译阶段绑定。只有静态绑定成功后才有后续的运行。</li>
<li>在程序运行阶段，<code>JVM</code>堆内存当中真实存在的对象是<code>Cat</code>对象，那么以下程序在运行阶段一定会调用<code>Cat</code>对象的<code>move()</code>方法，此时发生了程序的动态绑定，运行阶段绑定。</li>
<li>无论<code>Cat</code>类有没有重写<code>move</code>方法，运行阶段调用的是<code>Cat</code>对象的<code>move</code>方法，因为底层真实对象是<code>Cat</code>对象</li>
<li>父类型引用指向子类型对象这种机制导致程序在编译阶段绑定和运行阶段绑定两种不同的状态、形态，这种机制可以成为一种多态语法机制。</li>
</ol>
<p>输出结果<code>猫在地上走!</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a2.move();</span><br></pre></td></tr></table></figure>



<p>假设<code>Cat里有一个catchMouse</code>方法，以下程序为什么不能调用？</p>
<p>因为编译阶段编译器检查到<code>a2</code>的类型是<code>Animal</code>类型，从<code>Animal.class</code>字节码文件中查找<code>catchMouse()</code>方法，最终没有找到该方法，导致静态绑定失败，没有绑定成功，也就是说编译失败了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a2.carchMouse();</span><br></pre></td></tr></table></figure>



<ul>
<li><p>若想要调用<code>catchMouse()</code>方法，怎么办？</p>
<ol>
<li><p><code>a2</code>是无法直接调用的，因为<code>a2</code>的类型是<code>Animal</code>，<code>Animal</code>中没有<code>catchMouse()</code>方法。我们可以将<code>a2</code>强制类型转换为<code>Cat</code>类型</p>
</li>
<li><p><code>a2</code>类型是<code>Animal</code>（父类），转换成<code>Cat</code>类型（子类），被称为向下转型&#x2F;downcasting&#x2F;强制类型转换。</p>
</li>
</ol>
</li>
<li><p>什么时候需要使用向下转型呢？</p>
<ol>
<li>当调用的方法是子类型中特有的，在父类型中不存在。必须向下转型。</li>
</ol>
</li>
</ul>
<p><strong>向下转型也需要两种类型之间必须有继承关系。不然编译报错。强制类型转换需要加强制类型转换符。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">((Cat)a2).catchMouse();</span><br></pre></td></tr></table></figure>



<p><strong><code>Animal a2 = new Cat();</code>内存图</strong></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-8db0c4e196ff4d25a0569a7529e31ed2.png" alt="image.png"></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;小鸟在天上飞!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br></pre></td></tr></table></figure>

<p>以下程序会不会报错？为什么？？</p>
<ol>
<li>以下程序编译时没有问题的，因为编译器检查到<code>a3</code>的数据类型是<code>Animal</code>，<code>Animal</code>和<code>Cat</code>之间存在继承关系，并且<code>Animal</code>是父类型，<code>Cat</code>是子类型，父类型转换子类型叫做向下转型，语法通过。</li>
<li>程序在运行阶段出现异常，因为<code>JVM</code>堆内存中真实存在的对象是<code>Bird</code>类型，<code>Bird</code>对象无法转换成<code>Cat</code>对象，因为两种类型之间不存在任何继承关系，此时出现著名的异常：<br><code>java.lang.ClassCastException</code><br>类型转换异常，这种异常总是在<strong>向下转型</strong>的时候发生。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">c3</span> <span class="operator">=</span> (Cat)a3;</span><br></pre></td></tr></table></figure>

<ol>
<li>以上异常只有在强制类型转换的时候会发生，也就是说“向下转型”存在安全隐患（编译过了，但运行错了！）</li>
<li>向上转型只要编译过了，运行一定不会出问题。<code>Animal a2 = new Cat();</code></li>
<li>向下转型编译通过，运行可能发生错误<br><code>Animal a3 = new Bird();</code><br><code>Cat c3 = (Cat)a3;</code></li>
<li>怎么避免向下转型出现的异常<code>ClassCastExcption</code>？<ul>
<li>使用<code>instanceof</code>运算符可以避免出现以上的异常。</li>
</ul>
</li>
<li><code>instanceof</code><ol>
<li>语法<br><code>(引用 instanceof 数据类型名称)</code></li>
<li><code>instanceof</code>运算符的执行结果是布尔类型，结果是<code>true</code>&#x2F;<code>false</code><ul>
<li>关于运算结果<code>true</code>&#x2F;<code>false</code><br>  假设(<code>a instanceof Animal</code>)<ol>
<li><code>true</code>表示<code>a</code>这个引用指向的对象是一个<code>Animal</code>类型</li>
<li><code>false</code>表示<code>a</code>这个引用指向的对象不是一个<code>Animal</code>类型</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li>Java规范中要求：在进行强制类型转换之前，建议采用<code>instanceof</code>运算符进行判断，避免<code>ClassCastException</code>异常的发生</li>
</ol>
<h3 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;猫在地上走!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我开始抓老鼠了!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>instanceof</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="keyword">if</span> (cat <span class="keyword">instanceof</span> Bird)</span><br><span class="line">  ((Bird)cat).move();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cat <span class="keyword">instanceof</span> Cat)</span><br><span class="line">  ((Cat)cat).catchMouse();</span><br></pre></td></tr></table></figure>

<p>输出<code>我开始抓老鼠了!</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line"><span class="keyword">if</span> (cat <span class="keyword">instanceof</span> Bird)</span><br><span class="line">  ((Bird)cat).move();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cat <span class="keyword">instanceof</span> Cat)</span><br><span class="line">  ((Cat)cat).catchMouse();</span><br></pre></td></tr></table></figure>

<p>输出<code>小鸟在天上飞!</code></p>
<h2 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h2><p>多态在实际开发中的作用，以下以主人喂养宠物为例说明多态：</p>
<ol>
<li><p>主人喂养宠物这个场景要实现需要进行的抽象：</p>
<ul>
<li><p>主人「类」</p>
<ol>
<li>主人可以喂养宠物，所以主人有喂养的这个动作</li>
</ol>
</li>
<li><p>宠物「类」</p>
<ol>
<li>宠物可以吃东西，所以宠物有吃东西这个动作</li>
</ol>
</li>
</ul>
</li>
<li><p>定义好类，后将类实例化为对象，给一个环境驱使一下，让各个对象之间协作起来形成一个系统。</p>
</li>
<li><p>多态的作用是什么？</p>
<ul>
<li>降低程序的耦合度，提高程序的扩展力</li>
<li>能使用多态尽量使用多态</li>
<li>父类型引用向子类型对象。</li>
</ul>
</li>
<li><p>面向抽象编程，尽量不要面向具体编程</p>
</li>
</ol>
<h3 id="创建类："><a href="#创建类：" class="headerlink" title="创建类："></a>创建类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hoster</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fedd</span><span class="params">(Cat cat)</span>&#123;</span><br><span class="line">    cat.eat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猫类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;猫在吃小鱼干!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hoster</span> <span class="variable">hoster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hoster</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">tom.petName = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">hoster.fedd(tom);</span><br></pre></td></tr></table></figure>

<p>运行输出:<br><code>tom在吃小鱼干!</code></p>
<p>如果主人想养狗，那么以上程序不使用多态需要这样改动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hoster</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fedd</span><span class="params">(Cat cat)</span>&#123;</span><br><span class="line">    cat.eat();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String petName;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fedd</span><span class="params">(Dog dog)</span>&#123;</span><br><span class="line">    dog.eat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//狗类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  String catType;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;狗在吃骨头!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序因为耦合度太高，无法灵活拓展。如果需要程序拓展能力强，需要降低程序的耦合度「解耦合」，提高扩展能力</p>
<h3 id="使用多态"><a href="#使用多态" class="headerlink" title="使用多态"></a>使用多态</h3><p>添加一个宠物类，将所有宠物都继承这个宠物类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HousePet</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;主人不给东西吃!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将所有宠物类继承宠物类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">HousePet</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">HousePet</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>主人类使用多态</p>
<p><code>Hoster</code>主人类面向的是一个抽象的<code>HousePet</code>，不再是具体的宠物.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hoster</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fedd</span><span class="params">(HousePet HP)</span>&#123;</span><br><span class="line">    HP.eat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用时只需要将继承了<code>HousePet</code>的宠物传给<code>Hoster</code>下的<code>fedd</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hoster</span> <span class="variable">hoster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hoster</span>();</span><br><span class="line">hoster.fedd(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">hoster.fedd(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><code>猫在吃小鱼干!</code></p>
<p><code>狗在吃骨头!</code></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>18、Java final关键字</title>
    <url>/2022/01/02/18%E3%80%81Java-final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>关于Java语言当中final关键字：</p>
<ol>
<li><code>final</code> 是一个关键字，表示最终的，不可变的。</li>
<li><code>final</code> 修饰的类无法被继承</li>
<li><code>final</code> 修饰的方法无法被覆盖</li>
<li><code>final</code> 修饰的变量一旦赋值之后，不可重新赋值「不可二次赋值」</li>
<li><code>final</code> 修饰的实例变量，必须手动赋值，不能采用系统默认值</li>
<li><code>final</code> 修饰的引用不能再指向其它对象，那么被指向的对象无法被垃圾回收器回收。</li>
<li><code>final</code> 修饰的实例变量一般和<code>static</code>联合使用，被称为<strong>常量</strong></li>
</ol>
<p>以下程序编译出现错误，因为成员变量有默认值，这个默认值可能并不是该变量的最终结果，而<code>final</code>一旦赋值就不能重新赋值，所以出现错误，需要指定变量值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序有两种解决方案，第一种，声明时手动赋默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>第二种是在构造方法中赋值。因为程序执行时，构造方法执行完成之后才会运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MainApplication</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>final</code>修饰的引用，一旦指向某个对象之后，不能再指向其它对象，那么被指向的对象无法被垃圾回收器回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br></pre></td></tr></table></figure>



<p><code>final</code> 修饰的引用虽然指向某个对象之后不能指向其它对象，但是所指向的对象内部的内存是可以修改的。例如<code>User</code>类成员变量<code>name</code>是<code>ZhangSan</code>，因为<code>user</code>保存的是<code>User</code>对象的内存地址，修改的时候修改的是<code>User</code>对象内部的<code>name</code>变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.name = <span class="string">&quot;UpYou&quot;</span>;</span><br></pre></td></tr></table></figure>



<p>每一个中国人的国籍都是中国，而国籍是不会改变的，为了防止国籍被修改，可以添加<code>final</code>关键字修饰。<code>final</code>修饰的实例变量是不可变的，这种变量一般和<code>static</code>联合使用，被称为<strong>常量</strong>。</p>
<p>常量的定义语法格式：<code>public static final 类型 常量名 = 值;</code></p>
<p>Java规范中要求所有长量的名字全部大写，每个单词之间使用下划线连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COUNTRY</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<hr>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>19、Java关于package和import</title>
    <url>/2022/01/02/19%E3%80%81Java%E5%85%B3%E4%BA%8Epackage%E5%92%8Cimport/</url>
    <content><![CDATA[<h2 id="java-package-机制"><a href="#java-package-机制" class="headerlink" title="java package 机制"></a>java package 机制</h2><p>关于Java语言中的包机制：</p>
<ol>
<li><p>包又称为package，Java中引入package这种语法机制主要是为了方便程序的管理。不同功能的类被分门别类放到不同的软件包当中，查找比较方便，管理比较方便，易维护。</p>
</li>
<li><p>怎么定义package呢？</p>
<ul>
<li>在Java源程序的第一行上编写package语句。</li>
<li>package只能编写一个语句。</li>
<li>语法结构：<br><code>package 包名;</code></li>
</ul>
</li>
<li><p>包名的命名规范：<br>公司域名倒序 + 项目名 + 模块名 + 功能名;<br>采用这种方式重名的机率较低。因为公司域名具有全球唯一性。</p>
</li>
<li><p>包名要求全部小写，包名也是标识符，必须遵守标识符的命名规则。</p>
</li>
<li><p>一个包对应的是一个目录</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service;<span class="comment">// 4个目录</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用了<code>package</code>机制之后，应该怎么编译？怎么运行呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPackage</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如上项程序，使用了 <code>package</code> 机制之后，使用java命令运行时类名不再是 <code>testPackage</code> 了，而是<code>com.upyou.blog.service.TestPackage</code></p>
</li>
<li><p>编译：<code>javac Java源文件路径</code>（在硬盘上生成对应class文件）</p>
</li>
<li><p>手动创建目录，将<code>TestPackage.class</code>字节码文件放到指定的目录下</p>
</li>
<li><p>运行 <code>java com.upyou.blog.service.TestPackage</code></p>
</li>
<li><p>另一种编译方式：<code>javac -d .*.java</code>，会将全部java文件编译后自动放到对应的包目录下，没有该目录时自动创建。如果没有指定编译后的路径那么编译后默认在当前源文件位置生成（包括所有包）。<code>javac -d ~/plugins ./TestPackage.java</code> 命令编译后在<code>~/plugins</code>目录下生成（包括所有包），例如:</p>
</li>
</ul>
</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-b93efa74f598422da58f1cd4f2758e34.png" alt="image.png">    </p>
<p>注意，该类所在位置需要和包名一致，而不是说cd到对应位置后使用java命令执行<code>com.upyou.blog.service.TestPackage</code></p>
<p>正确目录：</p>
<ul>
<li><p>com</p>
<ol>
<li>upyou<ol>
<li>blog<ol>
<li>service<ol>
<li>TestPackage.java</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<p>当程序处于以上目录后，在项目根目录执行 <code>java com.upyou.blog.service.TestPackage</code></p>
<p>假如有一个程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service.controller;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>()&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>以下程序使用以上程序时为什么会报错？</p>
<ol>
<li>当省略包名后，会在当前包下找User,实际上编译器去找<code>com.upyou.blog.service.User</code>了，这个类不存在。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPackage</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当程序不再同一个包下时，应该使用包名加类名去使用，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.upyou.blog.service.controller.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.upyou.blog.service.controller.User();</span><br></pre></td></tr></table></figure>

<p>当<code>TestPackage</code>和<code>User</code>在同一个包下时不需要加包名。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>()&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPackage</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="Java-import-机制"><a href="#Java-import-机制" class="headerlink" title="Java import 机制"></a>Java import 机制</h3><p>import 语句用来完成导入其它类，当你需要使用的类不在同一个包下面时，访问通常使用包名的方式来进行访问，而import则可以让你使用外部的类时，像使用同一个包下的类一样轻松愉快。</p>
<p><strong>java.lang.*;不需要手动引入，系统自动引入。</strong></p>
<p><strong>lang：language语言包，是Java语言的核心类，不需要手动引入</strong></p>
<ul>
<li><code>import</code> 语法格式：<ol>
<li><code>import 类名;</code></li>
<li><code>import 包名.*</code></li>
</ol>
</li>
<li><code>import</code>需要编写到<code>package</code>语句之下，<code>class</code>语句之上。</li>
<li>什么时候需要import？<ul>
<li>不是java.lang包下，并且不在同一个包下的时候，需要使用import进行引入</li>
</ul>
</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service.controller;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>()&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.blog.service;</span><br><span class="line"><span class="keyword">import</span> com.upyou.blog.service.controller.*;</span><br><span class="line"><span class="comment">//或者使用 import com.upyou.blog.service.controller.User;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPackage</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>import 包名.*;是导入这个包下所有的类</strong></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>1、Java 数据类型</title>
    <url>/2022/01/02/1%E3%80%81Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="数据类型转换规则"><a href="#数据类型转换规则" class="headerlink" title="数据类型转换规则"></a>数据类型转换规则</h3><ol>
<li>八种数据类型当中,除布尔类型之外剩下的七种数据类型可以互相转换。</li>
<li>小容量向大容量转换,称之为自动类型转换。容量从小到大排序:<ul>
<li>byte &lt; short &lt; int &lt; long &lt; float &lt; double &lt; char</li>
</ul>
</li>
<li>大容量转换成小容量,叫做强制类型转换,需要加强制类型转换符 <code>(int)</code>,程序才能编译通过,但是有可能会<a href="#float%E8%BD%ACshort%E6%8D%9F%E5%A4%B1%E7%B2%BE%E5%BA%A6">损失精度</a>。</li>
<li>当整数字面值没有超出<code>byte short char</code>的取值范围,可以直接赋值给<code>byte short char</code>类型的变量。</li>
<li><code>byte short char</code>混合运算时,各自先转成<code>int</code>类型再做运算。</li>
<li>多种数据类型混合运算时,先转换成容量最大的类型再做运算。</li>
</ol>
<h3 id="关于Java编译问题"><a href="#关于Java编译问题" class="headerlink" title="关于Java编译问题"></a>关于Java编译问题</h3><p><strong>注意:</strong> 可以编译通过, 3 没有超出<code>byte</code>类型取值范围</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>编译错误,因为编译器只检查语法,不会”运算” <code>i / 3</code>,只有涉及到<code>JVM</code>才会运算,编译期不执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i= <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> i / <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> 任何浮点类型不管占用多少字节,都比整数型容量大。<code>char</code>和<code>short</code>可表示种类数量相同, 但是<code>char</code>可以取更大的正整数。</p>
<p><code>javac</code>检查语法与编译,并不会执行代码,只有经过<code>JVM</code>才可能执行</p>
<h3 id="float转short损失精度"><a href="#float转short损失精度" class="headerlink" title="float转short损失精度"></a>float转short损失精度</h3><p>当<code>float</code>转为<code>short</code>时,编译成功但损失精度,最终结果为<code>20</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20.12f</span>;</span><br><span class="line">  <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">short</span>)a;</span><br><span class="line">  out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>在Java中从左到右先算小括号,以下代码编译报错是因为第五条规则<strong>byte short char混合运算时,各自先转成int类型再做运算</strong>,而下面先给<code>s</code>转为<code>byte</code>,但是运算时依然会将<code>s</code>转回<code>int</code>,所以语法错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">byte</span>)s + b;</span><br></pre></td></tr></table></figure>
<p>编译错误</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread &quot;main&quot; java.lang.Error: Unresolved compilation problem:</span><br><span class="line">        <span class="built_in">Type</span> mismatch: cannot <span class="built_in">convert</span> from int to byte</span><br><span class="line"></span><br><span class="line">        <span class="built_in">at</span> DataType.main(DataType.java:<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>而若是将<code>s</code>与<code>b</code>先运算得出结果,再转为<code>byte</code>编译就不会报错,语法通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">byte</span>)(s + b);</span><br><span class="line">out.println(i);</span><br></pre></td></tr></table></figure>
<p><strong>编译器(javac)只检查语法与编译,并无任何代码执行</strong></p>
<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><code>10 / 3</code>正确结果等于3.333333…,但以下输出结果是<code>3.0</code>,这是因为<code>d</code>变量的字面值是整数运算完成后的结果,而计算时<code>10</code>与<code>3</code>都是<code>int</code>类型,上面第六条提到: <strong>多种数据类型混合运算时,先转换成容量最大的类型再做运算</strong>,所以最终结果计算为<code>3</code>并赋值给<code>d</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">3</span>;</span><br><span class="line">  out.println(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而当<code>10</code>与<code>3</code>都为<code>double</code>类型时,结果为<code>3.3333333333333335</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10.0d</span>;</span><br><span class="line">  <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3.0d</span>;</span><br><span class="line">  <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> a / b;</span><br><span class="line">  out.println(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此可以得出一个结论,当字面值运算时,它的结果不一定与等号左侧数据类型相等,而我们看到的数据,是它们转换后的结果</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>除<code>Boolean</code>外,其它七种<strong>基本数据类型</strong>可以互相转换</li>
<li>小容量转大容量叫做<strong>自动类型转换</strong></li>
<li><code>char</code> 和 <code>short</code>平级</li>
<li>大容量 转换成小容量叫做<strong>强制类型转换</strong>,强制类型转换需要加强制类型转换符<code>(...)</code>如<code>(int)</code>,编译通过但是程序运行期可能会导致<strong>精度损失</strong></li>
</ol>
<blockquote>
<p>所有学习资料均来自互联网,本人各种摘抄实验的结果</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>20、Java 访问控制权限修饰符</title>
    <url>/2022/01/02/20%E3%80%81Java-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<p>访问控制权限修饰符：</p>
<ol>
<li>访问控制权限修饰符来控制元素的访问范围</li>
<li>访问控制权限修饰符包括：<br><code>public</code>   表示公开的，在任何位置都可以访问<br><code>protected</code>   表示受保护的，同包、子类可以访问<br><code>缺省</code>    表示这个修饰符没写，同包下可以访问<br><code>private</code>   表示私有的，只能在本类中访问</li>
<li>访问控制修饰符可以修饰类、变量、方法</li>
<li>当某个数据只希望子类使用，使用<code>protected</code>进行修饰。</li>
<li>修饰符的范围：<br>privste &lt; 缺省 &lt; protected &lt; public </li>
<li>类只能采用public和缺省的修饰符进行修饰「内部类除外」</li>
</ol>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>21、Java 抽象类的概述</title>
    <url>/2022/01/02/21%E3%80%81Java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<ul>
<li><p>抽象类：</p>
<ol>
<li><p>什么是抽象类？</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-2ab2f44e314946b3b284e28b0e4e21d1.png" alt="image.png">    </p>
<ul>
<li>抽象类无法实例化，无法创建对象。类和类之间有共同特征，将这些具有共同特征的类再进一步抽象形成了抽象类。由于类本身是不存在的，所以抽象类无法创建对象。</li>
<li>抽象类和抽象类实际上可能还会有共同特征，还可以进一步再抽象</li>
<li>类到对象是实例化，对象到类是抽象。</li>
</ul>
</li>
<li><p>抽象类属于什么类型？</p>
<ul>
<li>抽象类也属于引用数据类型。</li>
</ul>
</li>
<li><p>抽象类怎么定义？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符列表] <span class="keyword">abstract</span> class 类名&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>final</code> 和 <code>abstract</code> 不能联合使用，这两个关键字是对立的。</p>
<ul>
<li><code>final class</code> 无法被继承</li>
<li><code>abstract</code> 要被继承使用</li>
</ul>
</li>
<li><p>抽象类的子类可以是抽象类，也可以是非抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CreditCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BankCard</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是提供子类使用的。</p>
<p>  使用<code>super</code>给父类构造传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreditCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CreditCard</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">BankCard</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类关联到一个概念：抽象方法。</p>
<ul>
<li>抽象方法: 没有实现的方法，没有方法体的方法<br><code>public abstract void doSome();</code></li>
<li>抽象方法特点</li>
</ul>
<ol>
<li>没有方法体，以分号结尾</li>
<li>前面修饰符列表中有<code>abstract</code>关键字</li>
</ol>
<ul>
<li><p>抽象类中不一定有抽象方法</p>
</li>
<li><p>抽象方法只能在抽象类中使用</p>
</li>
<li><p>如果子类不是抽象类，那么子类必须重写父类的所有抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Bank&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ul>
<hr>
<h3 id="非抽象类继承抽象类必须将抽象方法实现"><a href="#非抽象类继承抽象类必须将抽象方法实现" class="headerlink" title="非抽象类继承抽象类必须将抽象方法实现"></a>非抽象类继承抽象类必须将抽象方法实现</h3><p>以下程序有没有问题？有什么问题？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中</li>
<li>分析<ol>
<li><code>Animal</code>是父类，并且是抽象类</li>
<li><code>Animal</code>这个抽象类中有一个抽象方法<code>move</code></li>
<li><code>Bird</code> 是子类，并且是非抽象的</li>
<li><code>Bird</code>继承<code>Animal</code>之后，会将抽象方法继承过来。「<strong>抽象方法的概述</strong>第7条第4项」</li>
</ol>
</li>
</ul>
<p>以上程序需要将从父类中继承过来的抽象方法进行覆盖&#x2F;重写，或者也可以叫做<strong>实现</strong></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>当一个非抽象类继承抽象类的时候，需要将抽象方法<strong>重写&#x2F;实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我在移动！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序支持多态机制使用，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();<span class="comment">// 向上转型</span></span><br><span class="line">bird.move();</span><br></pre></td></tr></table></figure>

<p>输出：<code>我在移动！</code></p>
<blockquote>
<ol>
<li><p>一个非抽象类继承抽象类，必须将抽象类中的抽象方法实现了</p>
</li>
<li><p>面向抽象编程，不要面向具体编程，降低程序的耦合度，提高程序的扩展力。这种编程思想符合OCP原则。</p>
</li>
</ol>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>22、Java接口</title>
    <url>/2022/01/02/22%E3%80%81Java%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a>接口的基础语法</h3><ol>
<li><p>接口也是一种<strong>引用数据类型</strong></p>
</li>
<li><p>接口是完全抽象的。「抽象类是半抽象的」或者也可以说接口是特殊的抽象类</p>
</li>
<li><p>语法：<br><code>[修饰符列表] interface 接口名&#123;&#125;</code></p>
</li>
<li><p>接口支持多继承，一个接口可以继承多个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span>&#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>, B&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个类可以实现多个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>, B&#123;&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>接口中只包含两部分内容，一部分是：常量。一部分是：抽象方法。</p>
</li>
<li><p>接口中所有元素都是<code>public</code>修饰的。「都是公开的」</p>
</li>
<li><p>接口中<code>public abstract</code> 修饰符可以省略</p>
</li>
<li><p>接口中的方法都是抽象方法，所以接口中的方法不能有方法体</p>
</li>
<li><p>接口中的常量的<code>public static final</code>可以省略</p>
</li>
</ol>
<p>在接口中，可以省略<code>public abstract</code>不写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在接口中，方法不能带有方法体：<code>Abstract methods do not specify a body.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;&#125; ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><ol>
<li>类和类之间叫做继承，类和接口之间叫做实现。</li>
<li>当一个非抽象的类实现一个接口的话，必须将接口中的所有抽象方法全部实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMath</span>&#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现接口中的方法，接口中的常量自动继承，所以不用实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMathImpl</span> <span class="keyword">implements</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口和多态联合使用"><a href="#接口和多态联合使用" class="headerlink" title="接口和多态联合使用"></a>接口和多态联合使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMath</span>&#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMathImpl</span> <span class="keyword">implements</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>父类型引用指向子类型对象,编译时调用的是<code>MyMath</code>的<code>sum</code>方法，运行是调用的是<code>MyMathImpl</code>的<code>sum</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyMath</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMathImpl</span>();</span><br><span class="line">mm.sum(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>



<h3 id="extends-和-implements-同时出现"><a href="#extends-和-implements-同时出现" class="headerlink" title="extends 和 implements 同时出现"></a>extends 和 implements 同时出现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>extends</code>在前<code>implements</code>在后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.printf(<span class="string">&quot;我是一只猪。\n虽然我是一只猪，但我是一只有梦想的猪！&quot;</span>+</span><br><span class="line">      <span class="string">&quot;\n我的梦想是能够像鸟儿一样飞起来！\n现在我实现了，我在天上飞！！！\n\t\t\t\t-- 小飞猪&quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Flyable</span> <span class="variable">pig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line"><span class="keyword">if</span>(pig <span class="keyword">instanceof</span> Animal)&#123;</span><br><span class="line">  ((Animal)pig).name = <span class="string">&quot;小飞猪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">pig.fly();</span><br></pre></td></tr></table></figure>



<h3 id="接口在开发中的作用"><a href="#接口在开发中的作用" class="headerlink" title="接口在开发中的作用"></a>接口在开发中的作用</h3><p><strong>接口在开发中的作用，类似于多态在开发中的作用。</strong><br><strong>多态：面向抽象编程，降低程序的耦合度，提高程序的扩展力</strong></p>
<hr>
<ul>
<li>接口是完全抽象，而以后正要要求面向抽象编程。而面向抽象编程这句话可以改为：面向接口编程</li>
<li>有了接口就有了可插拔。可插拔表示扩展力强。</li>
<li>例如：中午去饭馆吃放<ul>
<li>接口是抽象的</li>
<li>菜单是一个接口。</li>
<li>谁面向接口调用。（顾客面向菜单点菜，调用接口）</li>
<li>谁负责实现这个接口。（后台的厨师负责把菜做好，是接口的实现者）</li>
<li>这个接口有什么用？（这个饭馆的<strong>菜单</strong>，让<strong>顾客</strong>和<strong>后厨</strong>解耦合了）</li>
</ul>
</li>
</ul>
<p>定义菜单接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">interface</span> <span class="title class_">FoodMenu</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">shiZhiChaoJiDan</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">xiaoJiDunMoGu</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">styleFood</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>中餐师傅实现菜单上的菜品</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChinaChef</span> <span class="keyword">implements</span> <span class="title class_">FoodMenu</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shiZhiChaoJiDan</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中餐柿子炒鸡蛋!&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xiaoJiDunMoGu</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中餐小鸡炖蘑菇!&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">styleFood</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中餐自制卫龙辣条！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>西餐师傅实现菜单上的菜品</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AmericChef</span> <span class="keyword">implements</span> <span class="title class_">FoodMenu</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shiZhiChaoJiDan</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;西餐柿子炒鸡蛋!&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xiaoJiDunMoGu</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;西餐小鸡炖蘑菇!&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">styleFood</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;西餐煎牛排!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论是西餐厨师还是中餐厨师，只需要按照顾客根据菜单上点的菜来实现，当然，每个厨师每样菜都有不同的做法。</p>
<p>将菜单给到顾客，顾客不需要关系厨师怎么实现这个菜，他只负责点菜就好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> FoodMenu foodMenu;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(FoodMenu foodMenu)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.foodMenu = foodMenu;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStyleFood</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.foodMenu.styleFood();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getShiZhiChaoJiDan</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.foodMenu.shiZhiChaoJiDan();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getXiaoJiDunMoGu</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.foodMenu.xiaoJiDunMoGu();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顾客拿到菜单后开始点菜</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FoodMenu</span> <span class="variable">americChef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmericChef</span>();</span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(americChef);</span><br><span class="line">customer.getStyleFood();<span class="comment">// 输出西餐煎牛排</span></span><br></pre></td></tr></table></figure>

<hr>
<p>如果将以上程序分割给不同的人员开发，那么他们只需要围绕着<code>FoodMenu</code>接口开发，最后模块之间使用接口衔接，降低耦合度</p>
<blockquote>
<p>接口的使用离不开多态机制。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>24、Java Object类</title>
    <url>/2022/01/02/24%E3%80%81Java-Object%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>负责对象克隆的。</p>
<p><code>Protected Object clone();</code></p>
<p>获取对象哈希值的一个方法</p>
<p><code>int hashCode();</code></p>
<p>判断两个对象是否相等</p>
<p><code>Boolean equals(Object obj);</code></p>
<p>将对象转换成字符串形式</p>
<p><code>String toString();</code></p>
<p>垃圾回收器负责调用的方法</p>
<p><code>protrcted void finalize();</code></p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>关于<code>Object</code>中的<code>toString</code>方法</p>
<ol>
<li><p>源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码上<code>toString</code>方法的默认实现是：<br>类名@对象的内存地址转换为十六进制的形式</p>
</li>
<li><p>SUN公司设计<code>toString</code>方法的目的是什么？作用是什么？</p>
<ul>
<li><code>toString</code>方法的设计目的是：通过调用这个方法可以将一个<strong>Java对象</strong>转换成<strong>字符串表示形式</strong></li>
</ul>
</li>
<li><p>SUN公司开发Java语言的时候，建议所有的子类都去重写<code>toString</code>方法。<code>toString</code>方法应该是一个简洁的、详实的、易阅读的。</p>
</li>
<li><p>输出一个引用时，会自动调用该引用的<code>toString</code>方法<br>*打印引用时,例如有个引用a</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a); </span><br></pre></td></tr></table></figure>

<p>由于每个类都默认继承了<code>Object</code>对象，<code>println</code>底层使用了多态: PrintStream.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(x);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见<code>println</code>源码调用了<code>String.valueOf()</code>: String.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (obj == <span class="literal">null</span>) ? <span class="string">&quot;null&quot;</span> : obj.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code> obj.toString()</code>由此可见，只要obj是一个<code>Object</code>类型，那么就一定有<code>toString()</code>方法，而所有<code>class</code>，都默认继承了<code>Object</code></p>
</li>
</ol>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p> 关于<code>Object</code>中的<code>equals</code>方法</p>
<ol>
<li><p><code>equals</code> 源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是<code>equals</code>方法的默认实现</p>
</li>
<li><p>SUN公司设计<code>equals</code>方法的目的是什么？</p>
<ul>
<li><p>以后编程当中，都要通过<code>equals</code>方法来判断两个对象是否相等。<code>equals</code>方法是判断两个对象是否相等的。</p>
</li>
<li><p>判断两个java对象是否相等，不能使用“&#x3D;&#x3D;”，因为这比较的是两个对象的内存地址。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (b == b2)<span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>在<code>Object</code>中的<code>equals</code>方法采用的是“=&#x3D;”来判断两个对象是否相等。需要判断的是两个对象的内容是否相等，所以java默认的<code>equals</code>无法实现需求，所以需要重写<code>equals</code>。如何去重写这个<code>equals</code>需要按照你当前的需求来进行重写，例如比较<code>id</code>是否相等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> obj &amp;&amp; obj != <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">this</span>.id == ((B)obj).id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">2</span>);</span><br><span class="line">b.equals(b2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<blockquote>
<p>Java中基本数据类型可以使用”<strong>=&#x3D;</strong>“来进行判断</p>
<p>Java中引用数据类型统一使用<code>equals</code>方法来进行判断</p>
<p>String 类中已重写<code>equals</code>方法</p>
</blockquote>
<h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><p>关于Object类中的finalize方法。</p>
<ol>
<li><p>在Object类中的源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>finalize</code>方法只有一个方法体，里面没有任何代码，而且这个方法是protected修饰的。</p>
</li>
<li><p>这个方法不需要手动调用，JVM的垃圾回收器负责调用这个方法。</p>
</li>
<li><p>finalize方法执行时：<br>当一个Java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用finalize方法。</p>
</li>
<li><p>finalize方法实际上是一SUN公司为java程序员准备的一个时机，垃圾销毁机。如果希望在对象销毁时执行一段代码的话，这段代码要写到finalize方法。</p>
</li>
<li><p>Java中的垃圾回收器是不轻易启动的，垃圾太少或者时间没到，种种条件下，有可能启动，也有可能不启动。</p>
</li>
</ol>
<blockquote>
<p>可使用<code>System.gc</code>();方法建议垃圾回收器启动</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>25、Java 内部类</title>
    <url>/2022/01/02/25%E3%80%81Java-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<p>匿名内部类：</p>
<ol>
<li><p>什么是内部类？</p>
<ul>
<li>内部类：在类的内部又定义了一个新的类。被称为内部类。</li>
</ul>
</li>
<li><p>内部类的分类：</p>
<ul>
<li><p>静态内部类：类似于静态变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>实例内部类：类似于实例变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>局部内部类：类似于局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用匿名内部类编写的代码，可读性差，能不用就不用，例如：</p>
<p><strong>使用匿名内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">MyMath</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMath</span>();</span><br><span class="line">    <span class="comment">// 打印 200 + 300 = 500</span></span><br><span class="line">    m.mySum(<span class="keyword">new</span> <span class="title class_">Compute</span>()&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mySum</span><span class="params">(Compute c, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">    System.out.println(x + <span class="string">&quot;+&quot;</span> + y + <span class="string">&quot;=&quot;</span> + c.sum(x, y));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用<code>lambada</code>语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">MyMath</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMath</span>();</span><br><span class="line">    <span class="comment">// 打印 200 + 300 = 500</span></span><br><span class="line">    m.mySum((<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>匿名内部类是局部内部类的一种。因为这个类没有名字而得名，叫做匿名内部类。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>23、Java抽象类和接口的区别</title>
    <url>/2022/01/02/23%E3%80%81Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>抽象类是半抽象的。接口是完全抽象的。</li>
<li>抽象类中有构造方法。接口中没有构造方法。</li>
<li>接口和接口之间支持多继承。类和类之间只能当继承。</li>
<li>一个类可以同时实现多个接口。一个抽象类只能继承一个类。</li>
<li>接口中只允许出现常量和抽象方法。</li>
<li>以后接口使用的比抽象类多。一般抽象类使用的还是少。接口一般都是对<strong>行为</strong>的抽象。</li>
</ul>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>26、Java数组</title>
    <url>/2022/01/02/26%E3%80%81Java%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><ol>
<li><p>java 语言中的数组，是一种引用数据类型，不属于基本数据类型。数组的父类是Object。</p>
</li>
<li><p>数组实际上是一个容器，可以同时容纳多个元素。数组是一个数据的集合。</p>
</li>
<li><p>数组当中可以存储<strong>基本数据类型</strong>的数据，也可以存储引用数据类型的数据。</p>
</li>
<li><p>数组因为是引用类型，所以数组对象是在堆内存当中。</p>
</li>
<li><p>数组在内存中是怎样的一个表示？<br><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2020-06-06%2017.49.49-2938dc19f5fb40a080037548eb1d1c40.png" alt="截屏20200606 17.49.49.png">   </p>
</li>
<li><p>数组当中如果存储的是“<strong>Java对象</strong>”的话，实际上存储的是对象的“<strong>引用</strong>”</p>
</li>
<li><p>数组一旦创建，在Java中规定，长度不可变。</p>
</li>
<li><p>数组的分类</p>
<ul>
<li>一维数组</li>
<li>二维数组</li>
<li>三维数组</li>
<li>多维数组</li>
</ul>
</li>
<li><p>所有的数组对象，都有length属性，用来获取数组中元素的个数。</p>
</li>
<li><p>Java中的数组要求数组中元素的类型统一。</p>
</li>
<li><p>数组在内存方面存储的时候，数组中的元素内存地址是连续的（存储的每一个元素都是有规则的挨着排序的）。内存地址连续这是数组存储元素的特点。数组实际上是一种简单的数据结构。</p>
</li>
<li><p>数组中，每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：length - 1<br><strong>下标非常重要，因为我们对数组中元素进行“存取”的时候，都需要通过下标来进行。</strong></p>
</li>
<li><p>数组中首元素的内存地址作为整个数组对象的内存地址。</p>
</li>
<li><p>数组这种数据结构的优点和缺点是什么？</p>
<ul>
<li><p>优点：查询、查找、检索某个下标上的元素时效率极高，可以说是查询效率最高的一个数据结构。</p>
<ol>
<li>每一个元素的内存地址在空间存储上是连续的。</li>
<li>每一个元素类型相同，所以占用空间大小一样。</li>
<li>知道第一个元素内存地址，知道每一个元素占  用空间大小，又知道下标，所以通过一个数学表达式就可以计算出某个下标上元素的内存地址。直接通过内存地址定位元素，所以数组的检索效率是最高的。<br><strong>数组中存储100个元素和100万个元素，在元素查询、检索方面，效率是相同的，因为数组中元素查找的时候不会一个一个找，是通过数学表达式计算出来的。算出一个内存地址直接定位的。</strong></li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或增加元素的时候，效率较低。因为随机增删元素会涉及到后面元素统一向前或向后位移的操作。</li>
<li>数组不能存储大数据量，因为很难在内存空间上找到一块特别大的连续的内存空间。</li>
</ol>
<blockquote>
<p>对于数组中最后一个元素的增删，是没有效率影响的。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt;</span><br><span class="line">String[] arrayString;</span><br><span class="line"><span class="type">boolean</span>[] arrayBoolean;</span><br><span class="line"><span class="type">double</span>[] arrayDouble;</span><br><span class="line">Object[] arrayObject;</span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>静态初始化一维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>&#125;;</span><br></pre></td></tr></table></figure>



<p>动态初始化一维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p><code>5</code>表示数组的元素个数。</p>
<p>初始化一个长度为5的int类型一维数组，每个元素默认值为0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arrayString = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<p>初始化一个长度为2的String类型一维数组，每个元素默认值为null</p>
<h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>&#125;;</span><br><span class="line">arratInt[<span class="number">0</span>] = <span class="number">520</span>;</span><br><span class="line">arrayInt[arrayInt.length - <span class="number">1</span>] = <span class="number">1314</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;第一个元素：&quot;</span> + arrayInt[<span class="number">0</span>]);</span><br><span class="line">System.out.println(<span class="string">&quot;最后一个元素：&quot;</span> + arrayInt[attayInt.length - <span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>将第一个元素改为520，将最后一个元素改成1314,输出第一个元素的值和第最后一个元素的值：<br>-- <code>第一个元素：520</code></p>
<p>-- <code>最后一个元素：1314</code></p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayInt.length; i++) &#123;</span><br><span class="line">  System.out.println(arrayInt[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别输出：</p>
<p>-- <code>100</code></p>
<p>-- <code>200</code></p>
<p>-- <code>300</code></p>
<p>-- <code>400</code></p>
<p>数组可以通过下标来指定数组的元素，可以将<code>i</code>当作数组的下标</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>&#125;;</span><br><span class="line">System.out.println(arrayInt[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure>

<p>下标为4表示第五个元素，第五个元素不存在，下标越界抛出异常：</p>
<p><code>ArrayIndexOutOfBoundsException</code></p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>数组中支持使用动态，如果调用的方法是父类型中存在的方法不需要向下转型。直接使用父类型引用调用即可。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Animal[] animals = &#123;<span class="keyword">new</span> <span class="title class_">Cat</span>(), <span class="keyword">new</span> <span class="title class_">Bear</span>()&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; animals.length; i++)&#123;</span><br><span class="line">            animals[i].move();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在走路!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在走路!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bear</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;熊在走路!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>-- <code>猫在走路!</code></p>
<p>-- <code>熊在走路!</code></p>
<blockquote>
<p>对于数组来说，实际上只能存储java对象的“<strong>内存地址</strong>”。数组中存储的每个元素是“<strong>引用</strong>”</p>
</blockquote>
<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>关于一维数组的扩容：</p>
<ol>
<li><p>在java开发中，数组长度一旦确定就不可变，数组满了需要扩容</p>
<ul>
<li>Java中对数组的扩容是先新建一个大容量的数组，然后将小容量数组中的数据一个一个拷贝到大数组当中。<br><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2020-06-08%2010.36.59-14e053cd335a490f9bb0c21cf97d5a43.png" alt="截屏20200608 10.36.59.png"></li>
</ul>
</li>
<li><p>使用<code>System.arraycopy</code>方法拷贝数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] objs = &#123;<span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>()&#125;;</span><br><span class="line">Object[] newObjs = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">System.arraycopy(arrayInt, <span class="number">0</span>, destArrayInt, <span class="number">0</span>, arrayInt.length);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><code>1 2 3 4 0 0 0 0</code><br><code>System.arraycopy</code>方法有5个参数，第一个参数为拷贝源，第二个参数为源的拷贝起始位置，第三个参数为拷贝到的目标数组，第四个参数为目标数组的起始位置，第五个参数为需要拷贝源的对象数量。<br><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2020-06-08%2011.22.59-51c5494102174b6dbc22c12f54032be7.png" alt="截屏20200608 11.22.59.png"></p>
</li>
</ol>
<blockquote>
<p>数组扩容效率较低，因为涉及到拷贝的问题。</p>
</blockquote>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>关于Java中的二维数组：</p>
<ol>
<li>二维数组其实是一个特殊的一维数组，特殊在每一个一维数组当中的每一个元素是一个一维数组。</li>
</ol>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arrayInt;</span><br></pre></td></tr></table></figure>



<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><p>一维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arrayInt = &#123;...&#125;;</span><br></pre></td></tr></table></figure>

<p>二维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arrayInt = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;&#125;; </span><br></pre></td></tr></table></figure>

<h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><p>初始化一个3行4列的二维数组，每一个一维数组当中有4个元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arrayInt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arrayInt = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;&#125;;</span><br><span class="line">System.out.println(arrayInt[<span class="number">0</span>][<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<p>第一个括号表示的是二维数组的下标，第二个括号表示的是二维 数组中的一维数组的下标。第一个一维数组中的第三个元素。 </p>
<p>输出：</p>
<p>-- <code>3</code></p>
<h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] newArrayInt = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArrayInt.length; i++) &#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; newArrayInt[i].length; y++) &#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;第%d一维数组的第%d个值为：%d\n&quot;</span>, i + <span class="number">1</span>, y + <span class="number">1</span>, newArrayInt[i][y]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>第1一维数组的第1个值为：1</code><br>-- <code>第1一维数组的第2个值为：2</code><br>-- <code>第1一维数组的第3个值为：3</code><br>-- <code>第1一维数组的第4个值为：4</code><br>-- <code>第2一维数组的第1个值为：5</code><br>-- <code>第2一维数组的第2个值为：6</code><br>-- <code>第2一维数组的第3个值为：7</code></p>
<blockquote>
<p>二维数组与一维数组的读写方式一样。</p>
<p>多维数组与二维数组雷同。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>27、Java String字符串的存储原理</title>
    <url>/2022/01/02/27%E3%80%81Java-String%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>String 表示字符串类型，属于引用数据类型，不属于基本数据类型。</p>
</li>
<li><p>在Java中随便使用双引号括起来的都是String对象。例如：<code>&quot;abc&quot;</code>,<code>&quot;Hello Wold!&quot;</code>,这是两个String对象。</p>
</li>
<li><p>Java中规定，双引号括起来的字符串是不可变的，也就是说<code>&quot;abc&quot;</code>出生到最终死亡都是<code>&quot;abc&quot;</code>,不能变成例如<code>&quot;abcd&quot;</code></p>
</li>
<li><p>在JDK中双引号括起来的字符串，例如<code>&quot;abc&quot;</code>都是直接存储在方法区的字符串常量池当中的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码内存图方式表示</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-4243eeb3a17f4ba4b8e901a42f43f3e0.png" alt="image.png"><br>如果有字符串拼接，那么在内存图中该怎么表示？例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>&quot;abc&quot;</code>在字符串常量池中存在，那么拿到该字符串在常量池中的内存地址，加上<code>&quot;def&quot;</code>,而<code>&quot;def&quot;</code>在常量池中并不存在，所以需要在常量池中开辟一块空间存储<code>&quot;def&quot;</code>,最后拼接成一个新的字符串<code>&quot;abcdef&quot;</code>,如果常量池中没有保存到这个字符串，那么就会重新开辟一块空间存储，否则使用已创建的这个字符串的内存地址。而此时，如果没有另外一个引用指向<code>&quot;def&quot;</code>,那么<code>&quot;def&quot;</code>此时是一个空引用</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-f12dcfe13cfb41b58ce73a04e112cf16.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;def&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>  以上程序内存图应该这样表示</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-9cfb3a3b8a214bc6a5c823c82749ae3e.png" alt="image.png"></p>
</li>
<li><p>垃圾回收器不会回收常量池里的数据。</p>
</li>
<li><p>由于双等号”&#x3D;&#x3D;”比较的是内存地址，所以两个字符串可以使用双等号进行比较，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello&quot;</span> == <span class="string">&quot;Hello&quot;</span><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>那么，<code>new String(&quot;Hello&quot;); </code>可以和<code>new String(&quot;Hello&quot;);</code>使用双等号比较吗？答案是不可以，因为双等号比较的是对象的内存地址,而使用<code>new</code>创建的对象必然是一个新的对象。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-b5b17a5a1b0d4e418cd5aee9d402afb7.png" alt="image.png"></p>
</li>
</ol>
<h3 id="String构造方法"><a href="#String构造方法" class="headerlink" title="String构造方法"></a>String构造方法</h3><ol>
<li><code>String str = new String(&quot;&quot;);</code></li>
<li><code>String str = &quot;&quot;;</code></li>
<li><code>String str = new String(byte[]);</code></li>
<li><code>String str = new Strinh(byte[], offset, count);</code></li>
<li><code>String str = new String(char[]);</code></li>
<li><code>String str = new String(char[], offset, count);</code></li>
</ol>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>28、Java StringBuffer进行字符串拼接</title>
    <url>/2022/01/02/28%E3%80%81Java-StringBuffer%E8%BF%9B%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<p>在实际开发中，如果需要进行字符串的频繁拼接，会有什么问题？</p>
<ul>
<li><p>因为Java中的字符串是不可变的。每一次拼接都会产生新的 字符串。这样会占用大量的方法区内存，造成内存空间的浪费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>以上代码就创建了三个<code>String</code>对象在方法区当中。<code>Hello</code>、<code>World</code>、<code>HelloWorld</code></p>
</li>
<li><p>使用<code>StringBuffer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串拼接，调用<code>append</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringBuffer.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">stringBuffer.append(<span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>String</code>底层使用的是<code>final</code>修饰的<code>byte[]</code>数组存储字符串，而在<code>StringBuffer</code>底层，也是使用<code>byte[]</code>，区别是它并没有使用<code>final</code>修饰。<code>byte[]</code>默认长度是<strong>16</strong>,在<code>append</code>方法中，如果追加的时候<code>byte[]</code>满了，会自动扩容</p>
<p><strong>底层代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  toStringCache = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">super</span>.append(str);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AbstractStringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> appendNull();</span><br><span class="line">  <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line">  ensureCapacityInternal(count + len);</span><br><span class="line">  str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">  count += len;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 检查<code>byte[]</code>是否需要扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minimumCapacity)</span> &#123;</span><br><span class="line">  <span class="comment">// overflow-conscious code</span></span><br><span class="line">  <span class="keyword">if</span> (minimumCapacity - value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    value = Arrays.copyOf(value,</span><br><span class="line">                          newCapacity(minimumCapacity));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对数组进行扩容 <code>System.arraycopy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span>[] copyOf(<span class="type">char</span>[] original, <span class="type">int</span> newLength) &#123;</span><br><span class="line">  <span class="type">char</span>[] copy = <span class="keyword">new</span> <span class="title class_">char</span>[newLength];</span><br><span class="line">  System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                   Math.min(original.length, newLength));</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>如何优化StringBuffer的性能？</code></p>
<ol>
<li>在创建StringBuffer的时候尽可能给定一个初始化容量。减少底层数组的扩容次数。</li>
</ol>
</li>
<li><p><code>StringBuffer</code>和<code>StringBuilder</code>区别</p>
<ul>
<li><code>StringBuffer</code>中的方法都有<code>synchronized</code>关键字修饰，表示<code>Stringbuffer</code>在多线程环境下运行是安全的。</li>
<li><code>StringBuilder</code>中的方法都没有<code>synchronized</code>关键字修饰，表示<code>StringBuffer</code>在多线程环境下是不安全的。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>29、Java包装类</title>
    <url>/2022/01/02/29%E3%80%81Java%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    <content><![CDATA[<ol>
<li><p>Java中为8种基本数据类型又对应准备了<strong>8种包装类</strong>。<strong>8种包装类</strong>属于引用数据类型，父类是<code>Object</code>。</p>
</li>
<li><p>如果有这么一种需求：调用<code>doSome</code>方法的时候要传一个数字，但是数字属于基本数据类型，而<code>doSome</code>方法参数的类型是<code>Object</code>。可见<code>doSome</code>方法无法接受基本数据类型的数字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然<code>doSome</code>方法不能直接传<code>int</code>类型，但是可以传一个对应的包装类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">myInt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">  doSome(myInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>8种基本数据类型对应的包转类：</p>
<table>
<thead>
<tr>
<th align="center">基本数据类型</th>
<th align="center">包装类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">java.lang.Byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">java.lang.Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">java.lang.Integer</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Java.lang.Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Java.lang.Float</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">java.lang.Double</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Java.lang.Boolean</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">Java.lang.Character</td>
</tr>
</tbody></table>
</li>
<li><p>拆装箱</p>
<ul>
<li><p>装箱<br>将基本数据类型 –(转换)–&gt; 引用数据类型（装箱）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>拆箱<br>将引用数据类型 –(转换)–&gt; 基本数据类型（拆箱）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i.intValue();<span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Integer</code>的构造方法</p>
<p><code>Integer</code>有两个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer(<span class="type">int</span> value)</span><br><span class="line">Integer(String s)</span><br></pre></td></tr></table></figure>

<p>接受一个<code>int</code>或者<code>String</code>类型的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);<span class="comment">// 100</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;100&quot;</span>);<span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过访问包装类的常量，来获取最大值和最小值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.MAX_VALUE;</span><br><span class="line">Integer.MIN_VALUE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动装拆箱</p>
<ul>
<li><p>自动装箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x;</span><br></pre></td></tr></table></figure>

<p>虽然支持自动拆箱，当是底层实际上还是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>由于底层使用的是new的方式创建，所以无法使用双等号”&#x3D;&#x3D;”进行判断，双等号无法自动拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-e6d15767a5624c79bc5cca5a4b36245c.png" alt="image.png"></p>
</li>
</ul>
</li>
<li><p>整数型常量池</p>
<p>java中为了提高程序的执行效率，将<strong>「-128 ～ 127」</strong>之间所有的包装对象提前创建好，放到了一个方法区的<strong>“整数型常量池”</strong>当中，目的是只要用这个区间的数据不需要再<code>new</code>了，直接从<strong>整数型常量池</strong>中取出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(x == y);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>以上程序<code>127</code>并不是拆箱了，而是<code>x,y</code>这两个变量中保存的内存地址是同一个。双等号<code>==</code>比较的是<strong>对象的内存地址</strong>。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-1b2abab7b1d144fc9fb882bc2912d3f6.png" alt="image.png"></p>
<p>源代码中，在<strong>类加载</strong>的时候创建了对应的<code>Integer</code>对象。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-417b9f7ad8b44c2298afcad2df86ad3a.png" alt="image.png"></p>
</li>
<li><p>NumberFormatException 异常</p>
<p>这个异常是出现在将<code>String</code>类型转<code>int</code>类型的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;中文&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>在<strong>JDK 1.5</strong>之后，支持自动拆箱和自动装箱。</p>
<p>其它包装类和<code>Integer</code>使用方法一样。</p>
<p>在进行类加载的时候，整数型常量池已经初始化好了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>30、Java日期类</title>
    <url>/2022/01/02/30%E3%80%81Java%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="获取系统当前时间"><a href="#获取系统当前时间" class="headerlink" title="获取系统当前时间"></a>获取系统当前时间</h3><p>获取系统当前时间（精确到毫秒的系统当前时间）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">// Thu Jun 11 11:11:23 CST 2020</span></span><br></pre></td></tr></table></figure>

<h3 id="Date转String"><a href="#Date转String" class="headerlink" title="Date转String"></a>Date转String</h3><p>获取出来的日期是这种格式：<code>Thu Jun 11 11:11:23 CST 2020</code>,那么怎么初始化？</p>
<p>需要使用到<code>java.text</code>包下的<code>SimpleDateFormat</code>类。专门负责日期格式化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd kk:mm ss&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sdf.format(dt)<span class="comment">// 2020-06-11 11:32 25</span></span><br></pre></td></tr></table></figure>

<p>转换格式</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-74ce7f657ede4347852a8f72ed7270bd.png" alt="image.png"></p>
<h3 id="String转Date"><a href="#String转Date" class="headerlink" title="String转Date"></a>String转Date</h3><p>使用<code>SimpleDateFormat</code>将<code>String</code>字符串转为<code>Date</code>,使用<code>parse</code>时需要<code>throws  Exception</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyy-MM-dd kk:mm ss&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strDate</span> <span class="operator">=</span> <span class="string">&quot;2020-06-11 11:43 27&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Thu Jun 11 11:43:27 CST 2020</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> sdf.parse(strDate);</span><br></pre></td></tr></table></figure>

<p>字符串的日期格式和<code>SimpleDateFormat</code>对象指定的日期格式要一致。不一致会出现异常：<code>java.text.ParseException</code></p>
<h3 id="获取方法执行耗时"><a href="#获取方法执行耗时" class="headerlink" title="获取方法执行耗时"></a>获取方法执行耗时</h3><p><code>currentTimeMillis</code>方法获取自<strong>1970年1月1日 00:00:00 000</strong>到系统当前时间的毫秒数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">beginMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">forTestTime();</span><br><span class="line"><span class="type">long</span> <span class="variable">endMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;执行时间：&quot;</span> + (endMillis - beginMillis));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forTestTime</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>执行时间：12</code></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>33、Java枚举类型</title>
    <url>/2022/01/02/33%E3%80%81Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>以下案例没有使用java中的枚举，分析以下程序在设计方面有什么缺陷？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算两个int类型的商，计算成功返回1，计算失败返回0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序设计缺陷在返回值类型上。返回一个<code>int</code>不恰当，既然最后的结果只是成功和失败，最好使用布尔类型。 因为布尔类型<code>true</code>和<code>false</code>正好可以表示两种不同的状态。</p>
<p>以上的这个设计没问题，返回<code>true</code>和<code>false</code>表示两种情况，但是在以后的开发中，有可能遇到一个方法的执行结果返回多种情况，但是每一个都是可以数清楚的，一枚一枚都是可以列举出来的。这个布尔类型就无法满足需求了。此时需要使用java语言中的枚举类型。其实<code>boolean</code>也可以看作一个枚举，<code>true</code>和<code>false</code>是一个枚举的值。</p>
<h2 id="枚举的使用"><a href="#枚举的使用" class="headerlink" title="枚举的使用"></a>枚举的使用</h2><ul>
<li>一枚一枚可以列举出来的，才建议使用枚举类型。</li>
<li>枚举编译之后也是生成<strong>class</strong>文件。</li>
<li>枚举也是一种引用数据类型。</li>
<li>枚举中的每一个值都可以看作是常量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DivideEnum <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">    <span class="keyword">return</span> DivideEnum.SUCCESS;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> DivideEnum.FAIL;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">DivideEnum</span> &#123;</span><br><span class="line">  SUCCESS, FAIL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(divide(<span class="number">10</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>-- <code>FAIL</code></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>2、Java运算符</title>
    <url>/2022/01/02/2%E3%80%81Java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<ul>
<li>算数运算符 <code>+ - * / % ++ --</code></li>
<li>关系运算符 <code>&gt; &lt; &gt;= &lt;= == !=</code></li>
<li>逻辑运算符</li>
<li>字符串连接运算符</li>
<li>三元运算符</li>
<li>赋值类运算符</li>
<li>位运算符</li>
</ul>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>Java中算数运算符有 <code>+ - * / % ++ --</code></p>
<p><strong>注意: 一个表达式可能有多个运算符,运算符有优先级,不确定或需要提升优先级需要加小括号</strong>*</p>
<p>以下程序以 <code>++</code> 为例,<code>++</code>可以出现在变量右边,也可以出现在左边,通常写在右边,在自身数值加 <code>1</code>,与 <code>i = i + 1</code> 一样的操作,以下程序结果为 <code>1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">out.println(i);</span><br></pre></td></tr></table></figure>
<p>也可以对浮点型整数自身加 <code>1</code>,以下程序结果为 <code>1.0</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">out.println(i);</span><br></pre></td></tr></table></figure>

<p>以下程序,先赋值后执行 <code>++</code> 运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++;</span><br><span class="line">out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">j = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>若是 <code>++</code> 在左边,那么程序先运算再赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> ++i;</span><br><span class="line">out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">j = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>--</code> 与 <code>++</code> 一样,唯一不同的就是自身减一</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>Java中算数运算符有 <code>&gt; &lt; &gt;= &lt;= == !=</code></p>
<p><code>==</code> 是判断左右两边的数据是否相等,结果是 <code>false</code>,关系运算符的运算结果一定是布尔类型 <code>true</code> 或 <code>false</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == <span class="number">2</span>) &#123;</span><br><span class="line">  out.println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  out.println(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关系运算符的运算原理</strong></p>
<p><em>关系运算符比较哦的是变量中绑定的数据</em></p>
<pre><code>int a = 10;
int b = 10;
a &gt; b 比较的时候,比较的是a中保存的10和b中保存的10大小比较,所有关系运算符都是如此
</code></pre>
<p><code>=</code> 是赋值运算符</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Java中逻辑运算符有 </p>
<pre><code>&amp; 按位与
| 按位或
! 非运算符
^ 按位异域
&amp;&amp; 与运算
|| 或运算
</code></pre>
<h4 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h4><p><code>&amp;&amp;</code> 与运算符,可以理解为并且, 举个例子 <code>1</code> 大于 <code>0</code> 并且  <code>1</code> 小于 <code>2</code>,如果与运算符前面不成立也就是为false,那么不会继续执行这条语句,因为已经没有任何意义了,也就是说,与运算符前面和后面的条件必须成立。可以有多个条件。</p>
<pre><code>int i = 1;
i &gt; 0 &amp;&amp; i &lt; 2
</code></pre>
<h4 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h4><p><code>||</code> 或运算符,<code>1</code> 大于 <code>0</code> 或者  <code>1</code> 小于 <code>2</code>, 只要有一个条件成立,那么返回真 <code>true</code> 否者返回 <code>false</code>,如果第一个条件无法成立,那么接着判断第二个条件,可以有多个条件,以下代码返回 <code>true</code>, 因为前三个条件不成立,而第四个条件成立</p>
<pre><code>int i = 1;
i &gt; 4 || i &gt; 3 || i &gt; 2 || i &gt; 0 
</code></pre>
<h4 id="非运算"><a href="#非运算" class="headerlink" title="非运算"></a>非运算</h4><p><code>!</code> 非运算符, 就是对一个 <code>Boolean</code> 类型取反, <code>!true</code> 取反就是 <code>false</code>那么同理 <code>!false</code> 就是<code>true</code>,  不可对其它类型进行非运算</p>
<p><code>i</code> 不可能大于 <code>2</code>, 所以 <code>i &gt; 2</code> 返回 <code>false</code>,而对<code>false</code> 则为 <code>true</code>,加小括号是因为,非运算只能对 <code>Boolean</code> 类型进行运算, 而 <code>i &gt; 2</code> 返回的结果是 <code>Boolean</code> ,需要对它的值进行运算,需要加小括号提升优先级,先运算小括号里的条件再取反  </p>
<pre><code>int i = 1;
if ( !( i &gt; 2 ) )&#123;
    System.out.println(&quot;成立&quot;);
&#125;else&#123;
    System.out.println(&quot;不成立&quot;);
&#125;
</code></pre>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符又称三目运算符，具有自动返回的特性</p>
<p>以下结果为 <code>Hello Java!</code> ，三元运算符只接受“比较”有价值的、运算结果为 <code>boolean</code> 类型的语句<br>，运算结果若为 <code>true</code> ，那么执行冒号前面的语句，否则执行，右边的语句，语句若有返回结果，那么会将结果返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s ? <span class="string">&quot;Hello world!&quot;</span> : <span class="string">&quot;Hello Java!&quot;</span>;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>32、Java Random随机数</title>
    <url>/2022/01/02/32%E3%80%81Java-Random%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<h3 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数"></a>产生随机数</h3><p>随机产生一个int类型的取值范围内的数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">randomNumber</span> <span class="operator">=</span> random.nextInt();</span><br></pre></td></tr></table></figure>

<p>生成一个0～100的随机数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(); </span><br><span class="line"><span class="type">int</span> <span class="variable">randomNumber</span> <span class="operator">=</span> random.nextInt(<span class="number">101</span>);</span><br></pre></td></tr></table></figure>



<h3 id="产生5个不同的随机数"><a href="#产生5个不同的随机数" class="headerlink" title="产生5个不同的随机数"></a>产生5个不同的随机数</h3><p>记录查找重复、生成随机数次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> findIndexCount;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> randomRunCount;</span><br></pre></td></tr></table></figure>

<p>创建随机数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] randomNumber(<span class="type">int</span> max, <span class="type">int</span> count) &#123;</span><br><span class="line">  <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[count];</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; nums.length) &#123;</span><br><span class="line">    randomRunCount++;</span><br><span class="line">    <span class="comment">// 创建一个随机数</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> (<span class="type">int</span>) random.nextInt(max); <span class="comment">// 得到数字</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> findIndex(nums, randomNum);<span class="comment">// 查找重复</span></span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;<span class="comment">// -1表示没有找到</span></span><br><span class="line">      nums[i++] = randomNum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找重复</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndex</span><span class="params">(<span class="type">int</span>[] src, <span class="type">int</span> Pos)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; src.length; i++) &#123;</span><br><span class="line">    findIndexCount++;</span><br><span class="line">    <span class="keyword">if</span> (Pos == src[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>randomNumber</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = randomNumber(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;查重使用了：&quot;</span> + findIndexCount + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;生成了：&quot;</span> + randomRunCount + <span class="string">&quot;次&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>-- <code>查重使用了：107次</code></p>
<p>-- <code>生成了：32次</code></p>
<p>-- <code>1</code><br>-- <code>2</code><br>-- <code>3</code><br>-- <code>4</code><br>-- <code>5</code></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>31、Java BigDecimal 数字类</title>
    <url>/2022/01/02/31%E3%80%81Java-BigDecimal-%E6%95%B0%E5%AD%97%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="DecimalFormat"><a href="#DecimalFormat" class="headerlink" title="DecimalFormat"></a>DecimalFormat</h3><p>数字格式有：</p>
<ul>
<li><code>#</code> 代表任意数字</li>
<li><code>,</code>代表千分位</li>
<li><code>.</code>代表小数点</li>
<li><code>0</code>不够时补0</li>
</ul>
<p><code>DecimalFormat</code>专门用于数字的一个格式化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>();</span><br></pre></td></tr></table></figure>

<p>加入千分位并且保留两位小数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.##&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> df.format(<span class="number">2000.213</span>);</span><br></pre></td></tr></table></figure>

<p>-- <code>2,000.21</code></p>
<hr>
<p>保留4位小数，不够时补上0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.0000&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> df.format(<span class="number">123456789.2</span>);</span><br></pre></td></tr></table></figure>

<p>-- <code>123,456,789.2000</code></p>
<h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><ol>
<li><code>BigDecimal</code> 属于大数据，精度极高。不属于基本数据类型，属于java对象（引用数据类型），频繁使用在财务软件当中。</li>
<li>财务软件当中的double是不够用的。</li>
</ol>
<p>这个一百不是普通的一百，而是一个<strong>精度</strong>极高的100 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100.87987</span>);</span><br></pre></td></tr></table></figure>

<p>如果需要做运算，需要使用<code>BigDecimal</code>提供的方法进行运算</p>
<h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100.87987</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">db1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">200</span>);</span><br><span class="line">System.out.println(bd.add(db1));</span><br></pre></td></tr></table></figure>

<p>-- <code>300.8798699999999968213160173036158084869384765625</code></p>
<h4 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100.87987</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">db1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">200</span>);</span><br><span class="line">System.out.println(bd.max(db1));</span><br></pre></td></tr></table></figure>

<p>-- <code>200</code></p>
<h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100.87987</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">db1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">200</span>);</span><br><span class="line">System.out.println(bd.divide(db1));</span><br></pre></td></tr></table></figure>

<p>-- <code>0.5043993499999999841065800865180790424346923828125</code></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>34、Java异常</title>
    <url>/2022/01/02/34%E3%80%81Java%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ol>
<li><p>什么是异常</p>
<ul>
<li><p>以下程序执行过程中发生了不正常的情况，而这种不正常的情况叫做异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>该程序执行时出现了：</p>
<p>Exception in thread “main” java.lang.ArithmeticException: &#x2F; by zero<br>    at com.upyou .learns.ExceptionTest01.main(ExceptionTest01.java:5)<br>这个信息被称为异常，这个信息是<code>JVM</code>打印的。</p>
</li>
</ul>
</li>
<li><p>异常机制有什么用</p>
<ul>
<li>Java语言是很完善的语言，提供了异常的处理方式，程序在执行过程中出现了不正常的情况，Java把该异常信息打印输出到控制台，供开发人员参考。开发人员看到异常信息后，可以对程序进行修改，让程序更加健壮。</li>
</ul>
</li>
<li><p>Java语言中，异常是以什么形式存在的？</p>
<ul>
<li>异常在Java中以类的形式存在，每一个异常类都可以创建异常对象。</li>
<li>异常对应现实生活中是怎样的？<ul>
<li>火灾（异常类）<ol>
<li>xxx年xx月xx日 小明家着火了（异常对象）</li>
<li>xxx年xx月xx日 小刚家着火了（异常对象）</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>程序在执行到某一行发生异常时，<code>JVM</code>会在这一行<code>new</code>一个相应的异常对象并抛出这个异常。</p>
</li>
</ol>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><ol>
<li>不管是错误还是异常，都是可抛出的。</li>
<li>所有的错误只要发生，Java程序只有一个结果那就是终止程序的执行，退出<code>JVM</code>,错误是不能处理的。  </li>
<li>所有<code>Exception</code>的直接子类，都叫做编译时异常。编译时异常是在编译阶段发生的吗？不是。编译时异常是表示必须在编写程序的时候预先对这种异常进行处理，如果不处理编译器报错。编译时异常又被称为受检异常、受控异常。</li>
<li>所有<code>RuntimeException</code>及子类都属于运行时异常。运行时异常在编写程序阶段，你可以选择处理，也可以不处理。</li>
<li>编译时异常和运行时异常，都是发生在运行阶段。编译阶段异常是不会发生的。<ul>
<li>编译时异常必须在编译（编写）阶段预先处理，如果不处理编译器报错</li>
<li>所有异常都是在运行阶段发生的，因为所有程序只有运行阶段才可以<code>new</code>对象。因为异常的发生就是<strong>new异常对象</strong></li>
</ul>
</li>
<li>编译时异常和运行时异常的区别<ul>
<li>编译时异常一般发生的概率比较高。</li>
<li>运行时异常一般发生的概率比较低。</li>
<li>对于一些发生概率较高的异常，需要在运行之前对其进行预处理。</li>
<li>假设Java中没有对异常进行划分，没有分为：编译时异常和运行时异常，所有的异常都需要在编写程序阶段对其进行预处理，将是怎么样的效果呢？<ul>
<li>如果这样的话，程序肯定是绝对安全，但是编写程序太累，到处都是处理异常的代码。</li>
<li>假设出门之前，把能够发生的异常都预先处理，那么会更加安全，但活得很累。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ol>
<li>Java中对异常的处理包括两种方式<ul>
<li>在方法声明的位置上使用<code>throws</code>关键字,抛给上一级。</li>
<li>使用<code>try...catch</code>语句进行异常捕捉。</li>
</ul>
</li>
<li>Java 中异常发生之后，如果一直上抛，最终抛给了<code>main</code>方法，<code>main</code>方法继续往上抛，抛给了调用者<code>JVM</code>，<code>JVM</code>知道这个异常发生，只有一个结果<strong>「终止Java程序的执行」</strong></li>
</ol>
<p><strong>例子：</strong></p>
<p>假设我是某公司的销售员，因为我的失误，导致公司损失了1000块钱，“损失1000块钱”这可以看作是一个异常发生了。我有两种处理方式</p>
<ol>
<li>我把这件事告诉我的领导「异常上抛」</li>
<li>我自己掏腰包把钱补上「异常捕捉」</li>
</ol>
<p>以下程序为什么没有输出<code>Hello World</code>？</p>
<p>程序执行到<code>10 / 0发生</code>了<code>ArithmeticException</code>异常，底层<code>new</code>了一个<code>ArithmeticException</code>异常对象后抛出，由于是<code>main</code>方法调用了<code>10 / 0</code>，所以这个异常<code>ArithmeticException</code>抛给了<code>main</code>方法，<code>main</code>方法没有处理，将这个异常自动抛给了<code>JVM</code>，<code>JVM</code>最终终止程序的执行</p>
<p><code>ArithmeticException</code>继承于<code>RuntimeException</code>，属于运行时异常，在编写程序阶段不需要对这种异常进行预先处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>doSome</code>方法在声明的位置上使用了：<code>throws ClassNotFoundException</code>，这个代码表示<code>doSome</code>方法执行过程中，有可能会出现<code>ClassNotFoundException</code>异常。叫做类没找到异常，这个异常直接父类是：<code>Exception</code>，所以<code>ClassNotFoundException</code>属于编译时异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;hiahiahiahiahiahia!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下代码报错原因：</p>
<p>由于<code>doSome</code>方法声明位置上有 <code>throws ClassNotFoundException</code>，在调用<code>doSome</code>方法的时候必须对这种异常预先处理，如果不处理，编译器就报错</p>
<p><code>Unhandled exception: java.lang.ClassNotFoundException</code>、<code>Unhandled exception type ClassNotFoundException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="第一种处理方式"><a href="#第一种处理方式" class="headerlink" title="第一种处理方式"></a>第一种处理方式</h3><p>在方法声明的位置上继续使用<code>throws</code>来完成异常的继续上抛。抛给调用者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">  doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>hiahiahiahiahiahia!</code></p>
<h3 id="第二种处理方式"><a href="#第二种处理方式" class="headerlink" title="第二种处理方式"></a>第二种处理方式</h3><p>使用<code>try...catch</code>进行捕捉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doSome();</span><br><span class="line">    <span class="comment">// 以上代码如果出现异常，这里是无法执行的.</span></span><br><span class="line">  &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>hiahiahiahiahiahia!</code></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>只要异常没有捕捉，采用上报的方式，此方式的后续代码不会执行。<br>另外需要注意，<code>try</code>语句快中的某一行出现异常，该行后面的代码不会执行，直接进入<code>catch</code>语句快。</p>
<p><strong>在以后的开发中，处理编译时异常，应该上报还是捕捉？怎么选？</strong></p>
<ul>
<li>如果希望调用者来处理，选择<code>throws</code>上报。</li>
<li>其它情况使用捕捉的方式。</li>
</ul>
<h2 id="深入try…catch"><a href="#深入try…catch" class="headerlink" title="深入try…catch"></a>深入try…catch</h2><ol>
<li><code>catch</code>后面的小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型</li>
<li><code>carch</code>可以写多个，建议<code>catch</code>的时候，精确的一个一个处理，这样有利于程序调试。</li>
<li><code>catch</code>写多个的时候，从上到下，必须遵循从小到大。</li>
</ol>
<h2 id="异常对象的常用方法"><a href="#异常对象的常用方法" class="headerlink" title="异常对象的常用方法"></a>异常对象的常用方法</h2><h3 id="getMessage"><a href="#getMessage" class="headerlink" title="getMessage"></a>getMessage</h3><p><code>getMessage();</code>方法获取异常发生后的简单描述信息，这个信息实际上是构造方法上<code>String</code>参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ArithmeticException e) &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">  System.out.println(errorMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>/ by zero</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArithmeticException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;哟！傻子又在找BUG呢？&quot;</span>);</span><br><span class="line">System.out.println(e.getMessage());</span><br></pre></td></tr></table></figure>

<p>-- <code>哟！傻子又在找BUG呢？</code></p>
<h3 id="printStackTrace"><a href="#printStackTrace" class="headerlink" title="printStackTrace"></a>printStackTrace</h3><p><code>printStackTrace</code> 用于打印异常堆栈信息。java 后台打印异常堆栈追踪信息的时候，采用了异步线程的方式打印的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ArithmeticException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>java.lang.ArithmeticException: / by zero         at com.upyou.learns.ExceptionTest05.main(ExceptionTest05.java:6)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArithmeticException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;哟！傻子又在找BUG呢？&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br></pre></td></tr></table></figure>

<p>-- <code>java.lang.ArithmeticException: 哟！傻子又在找BUG呢？         at com.upyou.learns.ExceptionTest05.main(ExceptionTest05.java:6)</code></p>
<h2 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h2><p>jdk8的特性，可以使用<code>｜</code>的方式捕捉多个异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    readFile(<span class="string">&quot;***&quot;</span>);</span><br><span class="line">    System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(FileNotFoundException | ArithmeticException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(<span class="string">&quot;哦豁！又是一个找不到异常的傻子!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="查找异常信息"><a href="#查找异常信息" class="headerlink" title="查找异常信息"></a>查找异常信息</h2><p>找一个并不存在的文件，肯定会报错，那么我们假装不知道这个文件存不存在!!!如何查看异常的追踪信息呢！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    M1();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">M1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">FIS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;../哈哈哈哈懵了吧！你找不到我.dog&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序报错信息如下：</p>
<p>java.io.FileNotFoundException: ..&#x2F;哈哈哈哈懵了吧！你找不到我.dog (No such file or directory)<br>        at java.io.FileInputStream.open0(Native Method)<br>        at java.io.FileInputStream.open(FileInputStream.java:195)<br>        at java.io.FileInputStream.<init>(FileInputStream.java:138)<br>        at java.io.FileInputStream.<init>(FileInputStream.java:93)<br>        at com.upyou.learns.ExceptionTest05.M1(ExceptionTest05.java:20)<br>        at com.upyou.learns.ExceptionTest05.main(ExceptionTest05.java:9)</p>
<ol>
<li><p>异常追踪信息应该从上往下看，首先看异常描述信息</p>
</li>
<li><p>需要注意的是，只需要看自己写的代码异常信息就可以了，SUN写的代码就别看了，肯定是你自己写的BUG。那么如何得知是否是SUN写的？</p>
<ul>
<li><p>大多数报错信息前几行都是Java的代码，例如：</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-327d9779fb0f482eab06779e80a8e79a.png" alt="image.png"></p>
<p>一般看到什么java.xxx.xxx的直接略过，我们写的代码一般都写到自己的工作空间内，例如<strong>com.upyou.learns</strong>、<strong>com.upyou.xxx</strong></p>
</li>
<li><p>在我们写的代码的异常中，查看第一个异常位置，通常都是一个方法的异常引起的连锁反应。<br>20行出现问题导致第9行出现问题</p>
</li>
<li><p>第一个异常位置<code> at com.upyou.learns.ExceptionTest05.M1(ExceptionTest05.java:20)</code>，错误在<code>com.upyou.learns</code>包下的<code>ExceptionTest05</code>类里的<code>M1</code>方法，在第20行java代码。</p>
</li>
<li><p>找到啦！原来是没有这个<code>.dog</code>文件</p>
</li>
</ul>
</li>
</ol>
<h2 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h2><p><code>try</code>和<code>finally</code>，没有<code>catch</code>可以吗？可以。</p>
<p><code>try</code>不能单独使用，可以和<code>finally</code>连用。</p>
<p><code>try...finally</code>是先执行<code>try</code>再执行<code>finally</code>,最后执行<code>return</code>语句,无论<code>return</code>在哪「<code>return</code>只要执行，方法必然结束」。<code>finally</code>语句块一定会执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>try...</code></p>
<p>-- <code>finally...</code></p>
<p>退出<code>JVM</code>后，<code>finally</code>就无法执行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">  System.exit(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>try...</code></p>
<p>有这么一个程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  System.out.println(m());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>100</code></p>
<p>Java语法规则（有一些规则是不能破坏的，一旦这么说就不能变）：</p>
<p>方法体中的代码必须遵循自上而下顺序依次逐行执行</p>
<p>以上程序<code>finally</code>确实是先于<code>return</code>执行。</p>
<p><strong>以上程序反编译之后的结果</strong><br><img src="http://qiniu-note-image.ctong.top/note/images/image-749f1ce714104ece9106834e69e48a2c.png" alt="image.png"></p>
<p>从反编译结果来看，Java遵循了自己定的语法规则<strong>「return必须最后执行、自上而下顺序执行」</strong></p>
<h2 id="final、finally、finalize"><a href="#final、finally、finalize" class="headerlink" title="final、finally、finalize"></a>final、finally、finalize</h2><p><code>final</code>是一个关键字，表示最终的，不变的。<strong>第一次赋值之后不可第二次赋值。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">// i = 200; // 错误</span></span><br></pre></td></tr></table></figure>

<p><code>finally</code>也是一个关键字，和try联合使用，使用在异常处理机制中，在<code>finally</code>语句快中的代码是一定会执行的。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>finalize</code>是<code>Object</code>类中的一个方法，作为方法名出现。所以<code>finalize</code>是标识符。这个方法是由垃圾回收器负责调用。</p>
<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>Java中如何自定义异常？</p>
<ol>
<li>编写一个类继承<code>Exception</code>或者<code>RuntimeException</code>。</li>
<li>提供两个构造方法，一个无参数一个带有<code>String</code>参数的构造方法。</li>
</ol>
<h3 id="自定义编译时异常"><a href="#自定义编译时异常" class="headerlink" title="自定义编译时异常"></a>自定义编译时异常</h3><p>定义一个编译时异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotFoundMeException</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">NotFoundMeException</span><span class="params">()</span>&#123;<span class="built_in">super</span>();&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">NotFoundMeException</span><span class="params">(String errorMessage)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(errorMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何使用这个异常对象捏？</p>
<p><code>new</code>一个异常对象并且使用<code>throw</code>抛出，<code>throws</code>上抛给调用者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String str)</span> <span class="keyword">throws</span> NotFoundMeException&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundMeException</span>(<span class="string">&quot;hiahiahia！我是异常，你找不到我!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理这个异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    test(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(NotFoundMeException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>com.upyou.learns.MyException.NotFoundMeException: hiahiahia！我是异常，你找不到我!!<br>        at com.upyou.learns.ExceptionTest07.test(ExceptionTest07.java:18)<br>        at com.upyou.learns.ExceptionTest07.main(ExceptionTest07.java:10)</p>
<h3 id="自定义运行时异常"><a href="#自定义运行时异常" class="headerlink" title="自定义运行时异常"></a>自定义运行时异常</h3><p>定义一个运行时异常类,继承于<code>RuntimeException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotFoundMeException02</span> </span><br><span class="line">  <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">NotFoundMeException02</span><span class="params">()</span>&#123;<span class="built_in">super</span>();&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">NotFoundMeException02</span><span class="params">(String errorMessage)</span>&#123;<span class="built_in">super</span>(errorMessage);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用这个异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runTest</span><span class="params">(String str)</span> </span><br><span class="line">  <span class="keyword">throws</span> NotFoundMeException02&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundMeException02</span>(<span class="string">&quot;哟！大家快看这个傻子又在写BUG！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runTest(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Exception in thread “main” com.upyou.learns.MyException.NotFoundMeException02: 哟！大家快看这个傻子又在写BUG！<br>        at com.upyou.learns.ExceptionTest07.runTest(ExceptionTest07.java:23)<br>        at com.upyou.learns.ExceptionTest07.main(ExceptionTest07.java:10)</p>
<p><a href="https://github.com/Clover-You/my-blog-file/blob/main/%E5%BC%82%E5%B8%B8%E5%B0%8F%E7%BB%83%E4%B9%A0.zip">异常小练习点这里下载哦</a></p>
<blockquote>
<p>不建议在<code>main</code>方法上使用<code>throws</code>，因为这个异常如果真正发生了，一定会抛给<code>JVM</code>，<code>JVM</code>只有终止。</p>
<p>重写之后的方法不能比重写之前的方法抛出更多（更宽泛）的异常，可以更少。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>35、Java泛型</title>
    <url>/2022/01/02/35%E3%80%81Java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h3><ol>
<li>泛型是<strong>jdk5.0</strong>之后推出的新特性</li>
<li>泛型这种语法机制只在程序编译阶段起作用，这中语法只是用来骗编译器的。</li>
<li>使用泛型好处<ol>
<li>集合中存储的元素类型统一了</li>
<li>从集合中取出的元素类型是泛型指定的类型，不需要大量的向下转型。</li>
</ol>
</li>
<li>使用了泛型之后，导致集合中存储的元素缺乏多样性！</li>
<li>如果调用子类型中特有的方法，还是需要向下转型！</li>
</ol>
<p>不使用泛型，分析程序存在哪些缺点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericityTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">animalList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">catObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    <span class="type">Bird</span> <span class="variable">birdObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">    animalList.add(catObj);</span><br><span class="line">    animalList.add(birdObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历集合，让动物走路</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> animalList.iterator();</span><br><span class="line">    <span class="keyword">while</span> ( it.hasNext() ) &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> it.next();</span><br><span class="line">      <span class="keyword">if</span> ( o <span class="keyword">instanceof</span> Cat ) &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> ( Cat )o;</span><br><span class="line">        cat.move();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( o <span class="keyword">instanceof</span> Bird ) &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> ( Bird )o;</span><br><span class="line">        bird.move();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123; &#125;</span><br><span class="line"><span class="comment">// 猫科类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;猫抓老鼠!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鸟类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;鸟在飞！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>迭代器返回的是<code>Object</code>类型，<code>Object</code>类型没有<code>move</code>方法，无法调用，需要向下转型。</p>
<p>使用泛型，<code>ArrayList</code>支持泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>使用泛型<code>List&lt;Animal&gt;</code>之后，表示<code>List</code>集合中只允许存储<code>Animal</code>类型的数据。用泛型来指定集合中存储的数据类型，集合中的数据更统一了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Animal&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Animal&gt; animalList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">catObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Bird</span> <span class="variable">birdObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">animalList.add(catObj);</span><br><span class="line">animalList.add(birdObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合，让猫抓老鼠，让鸟飞</span></span><br><span class="line">Iterator&lt;Animal&gt; it = animalList.iterator();</span><br><span class="line"><span class="keyword">while</span> ( it.hasNext() ) &#123;</span><br><span class="line">  <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> it.next();</span><br><span class="line">  animal.move();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Iterator&lt;Animal&gt; it</code>指明迭代器返回的是一个<code>Animal</code>类型。</p>
<hr>
<h3 id="自动类型推断"><a href="#自动类型推断" class="headerlink" title="自动类型推断"></a>自动类型推断</h3><p>JDK8之后的新特性：自动类型推断，又称钻石表达式</p>
<p>使用类型推断之前泛型需要这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Animal&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br></pre></td></tr></table></figure>

<p>使用类型推断后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Animal&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><p>自定义泛型可以吗？可以</p>
<p>自定义泛型的时候<code>&lt;&gt;</code>尖括号里面是一个标识符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericityTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Genericity&lt; String &gt; s = <span class="keyword">new</span> <span class="title class_">Genericity</span>&lt;&gt;();</span><br><span class="line">    System.out.println(s.see(<span class="string">&quot;看猴子呢！&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Genericity</span>&lt; 你看什么 &gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> 你看什么 see(你看什么 s) &#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果调用时不使用泛型，那么泛型默认是<code>Object</code></p>
<p>Java源代码中经常出现的是:  <E>和<T></p>
<ul>
<li>E是Element</li>
<li>T是Type</li>
</ul>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>37、Java IO流</title>
    <url>/2022/01/02/37%E3%80%81Java-IO%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Java-IO-流"><a href="#Java-IO-流" class="headerlink" title="Java IO 流"></a>Java IO 流</h1><p>把文件里存的东西放到内存里的过程叫：<strong>输入（Input）</strong>，数据的流动我门叫：<strong>输入流</strong>（InputStream），输入的过程又被称为：<strong>读（Read）</strong>。</p>
<p>从内存里出来到到硬盘叫：<strong>输出（Output）</strong>，数据流动的过程叫：<strong>输出流（OutputStream）</strong>，又被叫：<strong>写（Write）</strong></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-048b5f52f35e48d49d3b97ad7b3e6f17.png" alt="image.png"></p>
<h2 id="IO是什么？"><a href="#IO是什么？" class="headerlink" title="IO是什么？"></a>IO是什么？</h2><p>通过IO可以完成文件的读写。IO就是Input和Output首字母。</p>
<p>I：Input</p>
<p>O：Output</p>
<h2 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h2><p>IO流有多种分类方式：</p>
<ol>
<li>一种方式是按照流的方向进行分类：<ul>
<li>以内存作为参造物，往内存中去，叫做输入或者叫做读。（Input）</li>
<li>从内存中出来叫做输出或者叫做写。（Output、Write）</li>
</ul>
</li>
<li>另一种方式是按照读取数据方式不同进行分类：<ul>
<li>有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。这种流是万能的，什么类型的文件都能读取。（字节流）</li>
<li>有的流是按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。</li>
</ul>
</li>
</ol>
<p>假设文件file.txt，其内容是：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">a中国bc</span><br></pre></td></tr></table></figure>

<h4 id="如果采用字节流的方式去读："><a href="#如果采用字节流的方式去读：" class="headerlink" title="如果采用字节流的方式去读："></a><strong>如果采用字节流的方式去读</strong>：</h4><p>第一次读：一个字节，正好读到 ‘a’</p>
<p>第二次读：一个字节，正好读到‘中’字符的一半（原因是在Windows系统中，中文占用两个字节，字节流一次只能读取一个字节）</p>
<p>第三次读：一个字节，正好读到‘中’的另一半。</p>
<h4 id="如果采用字符流来对该文件读取："><a href="#如果采用字符流来对该文件读取：" class="headerlink" title="如果采用字符流来对该文件读取："></a><strong>如果采用字符流来对该文件读取</strong>：</h4><p>第一次读：‘a’字符</p>
<p>第二次读：‘中’字符</p>
<blockquote>
<p>输入流、输出流、字节流、字符流</p>
<p><em>‘a’英文字母，在Windows操作系统中是1个字节，但是‘a’字符在java中占用2个字节，flex.txt和java没有关系，因为这个文件只是Windows操作系统上的普通文件。Windows操作系统中文件中的‘a’字符占用的是1个字节（读文件是调用Windows操作系统，操作系统读取文件的时候，认为一个字符是一个字节，所以和JVM没有关系）</em></p>
</blockquote>
<h2 id="‘流’应该怎么学习"><a href="#‘流’应该怎么学习" class="headerlink" title="‘流’应该怎么学习"></a>‘流’应该怎么学习</h2><p>Java中的IO流都已经写好了，我们学习时不需要去关心底层是如何去实现的，我们最主要的还是掌握，在java中已经提供了哪些流，每个流的特点是什么，每个流对象上的常用方法有哪些？？</p>
<p>Java中所有的流都是在：<code>java.io.*;</code>下。</p>
<p>Java中主要学习怎么new流对象，调用流对象的哪个方法是读，哪个方法是写。</p>
<h2 id="Java-IO流中的四大家族"><a href="#Java-IO流中的四大家族" class="headerlink" title="Java IO流中的四大家族"></a>Java IO流中的四大家族</h2><ol>
<li><p>java.io.InputStream 字节输入流</p>
</li>
<li><p>java.io.OutputStream 字节输出流</p>
</li>
<li><p>java.io.Reader 字符输入流</p>
</li>
<li><p>java.io.Writer 字节输出流</p>
</li>
</ol>
<p>所有的流都实现了：<br>   java.io.Closeable接口，都是可关闭的，都有close方法。流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费很多资源。</p>
<blockquote>
<p>四大家族的首领都是抽象类 abstract</p>
<p>在java中只要‘类名’以Stream结尾的都是字节流。以‘Reader&#x2F;Writer’结尾的都是字符流。</p>
</blockquote>
<p>所有的输出流都实现了：</p>
<pre><code>java.io.Flushable接口，都是可刷新的，都有flush方法，输出流在最终输出之后，一定要记得flush刷新一下。这个刷新表示将通道/管道当中剩余未输出的数据强行输出完（清空管道）。
</code></pre>
<blockquote>
<p>如果没有flush可能会导致丢失数据。并不是所有的流都有flush方法，只有输出流实现了java.io.Flushable接口</p>
</blockquote>
<h2 id="需要掌握哪些流"><a href="#需要掌握哪些流" class="headerlink" title="需要掌握哪些流"></a>需要掌握哪些流</h2><p>java.io包下需要掌握的流有16个：</p>
<p>文件专属</p>
<ol>
<li>Java.io.FileInputStream.</li>
<li>Java.io.FileOutputStream</li>
<li>java.io.FileReader</li>
<li>java.io.FileWriter</li>
</ol>
<p>转换流，用于将字节流转换为字符流</p>
<ol start="5">
<li>java.io.InputStreamReader</li>
<li>java.io.OutputStreamWriter</li>
</ol>
<p>缓冲流专属</p>
<ol start="7">
<li>java.io.BufferedReader</li>
<li>java.io.BufferedWriter</li>
<li>java.io.BufferedInputStream</li>
<li>java.io.BufferedOutputStream</li>
</ol>
<p>数据流专属</p>
<ol start="11">
<li>java.io.DataInputStream</li>
<li>java.io.DataOutputStream</li>
</ol>
<p>标准输出流</p>
<ol start="13">
<li>java.io.PrintWriter</li>
<li>java.io.PrintStream</li>
</ol>
<p>对象专属流</p>
<ol start="15">
<li>java.io.ObjectInputStream</li>
<li>java.io.ObjectOutputStream</li>
</ol>
<blockquote>
<p>看着很多，但实际上把文件专属流前两个搞懂，其它的都差不多。</p>
</blockquote>
<h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><ol>
<li>文件字节输入流，万能的，任何类型的文件都可以采用这个流来读。</li>
<li>字节的方式，完成输入的操作，完成读的操作（硬盘 –&gt; 内存）</li>
</ol>
<p>创建一个文件字节输入流对象,<code>path</code>为你的文件物理路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/citys.js&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>创建流后，当流不等于空时，必须要关闭流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fis.close();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(PATH);</span><br><span class="line">  ....</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 关闭资源</span></span><br><span class="line">  <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">    fis.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="使用try-with-resources"><a href="#使用try-with-resources" class="headerlink" title="使用try-with-resources"></a>使用try-with-resources</h3><p>Java7的编辑器和运行环境支持新的<strong>try-with-resources</strong>，称为ARM块（Automatic Resource Management ）自动资源管理。可自动关闭任何可关闭的资源，这些可关闭的资源必须实现java.lang.AutoCloseable接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(PATH)) &#123;</span><br><span class="line">	....</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>使用<code>read()</code>方法读取文件，读取原理与集合<code>next()</code>方法一致，<a href="http://39.97.110.136/archives/java%E9%9B%86%E5%90%88#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E5%86%85%E5%AD%98%E5%9B%BE">next读取原理传送门</a></p>
<p><code>read()</code>返回值是读取到的<strong>字节</strong>本身，例如读取一个文本，文本中内容为：abcdef</p>
<p>当第一次调用<code>read()</code>方法时，读取a，而a的字节码为97，将读取到的字节返回 –&gt; 97</p>
<p>再一次调用方法时，<code>read()</code>再向后移动一位，读取b，将读取到的字节返回 –&gt; 98</p>
<p>以此类推，当读到文件末尾时，如果再次读取时，读不到任何数据<code>read()</code>会返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(PATH)) &#123;</span><br><span class="line">	System.out.println(fis.read());</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="使用循环读取"><a href="#使用循环读取" class="headerlink" title="使用循环读取"></a>使用循环读取</h4><p>使用<code>while</code>死循环读取文件，<strong>读到-1</strong>退出<code>while</code>循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)</span><br><span class="line">)&#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">byteData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ((byteData = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(byteData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一次读取一个字节byte，这样内存和硬盘交互太频繁，基本上时间&#x2F;资源都消耗在交互上面流。</p>
</blockquote>
<h4 id="使用int-read-byte-b"><a href="#使用int-read-byte-b" class="headerlink" title="使用int read(byte[] b)"></a>使用int read(byte[] b)</h4><p><code>read()</code>一次只能读取一个字节，<code>int read(byte[] b)</code>可以一次最多读取<code>b.length</code>个字节，减少硬盘和内存的交互，提高程序的执行效率。</p>
<p>准备一个长度为4的byte数组<code>byte[4]</code>，我们读取的文件同上。<code>read(byte[] b)</code>这个方法返回值是：读取到的字节数量。（不是字节本身）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)</span><br><span class="line">)&#123;</span><br><span class="line">  <span class="type">byte</span>[] fileByte = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">readCount1</span> <span class="operator">=</span> fis.read(fileByte);</span><br><span class="line">  System.out.println(readCount1);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一次读取时读到了4个字节，当前byte数组中的数据为<code>[97,98,99,100]</code>。</p>
<p>当我们第二次再尝试读取到这个数组中时,读取到了2个字节，当前byte数组中的数据为<code>[101,102,99,100]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)</span><br><span class="line">)&#123;</span><br><span class="line">  <span class="type">byte</span>[] fileByte = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">readCount1</span> <span class="operator">=</span> fis.read(fileByte);</span><br><span class="line">  System.out.println(readCount1);</span><br><span class="line">  <span class="type">int</span> <span class="variable">readCount2</span> <span class="operator">=</span> fis.read(fileByte);</span><br><span class="line">  System.out.println(readCount2);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因是<code> read(byte[] b)</code>方法在往byte数组中放数据时，是从byte数组的第0位开始放数据，文本有6个字节，而byte数组长度只有4，当读到第4个字节时停止读取（byte数组已满）。而第二次再去读取时，<code> read(byte[] b)</code>上次读到了第4个字节还剩下2个字节，将剩余的字节读到byte数组时是从0开始，所以将剩余的两个字节读到了byte数组的0、1位置中此时覆盖掉了当前索引中旧的数据。</p>
<p>如果第三次再尝试去读取的话将返回**-1**，因为<code>read(byte[] b)</code>已经将数据读完了，一个字节都没有读到。</p>
<hr>
<p>将读取到的数据转成字符串，使用String类中的构造方法可将byte数组转成字符串，因为<code>read(byte[] b)</code>方法在往byte数组中放数据时，是从byte数组的第0位开始放数据，所以开始位置是0，而结束位置则是读取到的字节数，这样就保证了程序读到什么就输出什么。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)</span><br><span class="line">)&#123;</span><br><span class="line">  <span class="type">byte</span>[] fileByte = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">readCount1</span> <span class="operator">=</span> fis.read(fileByte);</span><br><span class="line">  System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(fileByte, <span class="number">0</span>, readCount1));</span><br><span class="line">  <span class="type">int</span> <span class="variable">readCount2</span> <span class="operator">=</span> fis.read(fileByte);</span><br><span class="line">  System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(fileByte, <span class="number">0</span>, readCount2));</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p>– abcd<br>– ef</p>
<h4 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h4><p>将上面的程序全部改造一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)) &#123;</span><br><span class="line">  <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">  <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">8</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ((count = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    sb.append(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, count));</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(sb);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p>– Hello World!</p>
<h3 id="FileInputStream其它常用方法"><a href="#FileInputStream其它常用方法" class="headerlink" title="FileInputStream其它常用方法"></a>FileInputStream其它常用方法</h3><ol>
<li><code>int available()</code> 返回流当中剩余的字节数量</li>
<li><code>long skip()</code> 跳过几个字节不读</li>
</ol>
<h4 id="int-available"><a href="#int-available" class="headerlink" title="int available()"></a>int available()</h4><p>读取一个字节，查看还有多少个字节未读取，文件内容为：abcdef</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)) &#123;</span><br><span class="line">  <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">  <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(fis.read());</span><br><span class="line">  System.out.println(fis.available());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p>– 5</p>
<p>available正确用法：new 一个byte数组，让read()方法读取一次添加到byte数组中，不需要循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)) &#123;</span><br><span class="line">  <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">  fis.read(bytes);</span><br><span class="line">  System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式不太适合读取大文件，因为byte[]数组不能太大</p>
<h4 id="long-skip"><a href="#long-skip" class="headerlink" title="long skip()"></a>long skip()</h4><p>使用<code>skip()</code>可以跳过几个字节不读取，文件内容为：abcdef</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/TEST.txt&quot;</span>)) &#123;</span><br><span class="line">  <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">  fis.skip(<span class="number">3</span>);</span><br><span class="line">  fis.read(bytes);</span><br><span class="line">  System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p>– def</p>
<h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><ol>
<li>文件字节输出流，负责写</li>
<li>从内存到硬盘</li>
</ol>
<p>创建一个<code>FileOutputStream</code>对象，传入一个PATH，这个PATH是文件输出的位置加文件名。使用这种方式会将原文件清空，然后重新写入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(PATH);</span><br></pre></td></tr></table></figure>

<p>使用write读取一个byte数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/yct/Desktop/test.txt&quot;</span>);) &#123;</span><br><span class="line">  <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">  fos.write(bytes);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/image-83b48eaa137a4ae99559fe58b6aaa220.png" alt="image.png"></p>
<p>如果需要在原文件末尾追加内容时，不可使用上面的方式FileOutputStream提供了一个构造函数<code>FileOutputStream(String name, boolean append)</code>指在原文件末尾追加元素（以追加的方式在文件末尾写入，不会清空原文件内容）。例如原文件有一个<strong>Hello</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(PATH, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/yct/Desktop/test.txt&quot;</span>, <span class="literal">true</span>);) &#123;</span><br><span class="line">  <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">  fos.write(bytes);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="http://qiniu-note-image.ctong.top/note/images/image-1de69656529d45c88862a1c0ebc51853.png" alt="image.png"></p>
<p>只输出2位字节,可以使用<code>write(byte[] b, int off, int len)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fos.write(bytes, <span class="number">0</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>文件内容</p>
<p>– ab</p>
<blockquote>
<p>写完之后一定要刷新</p>
</blockquote>
<h2 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h2><ol>
<li>需要使用FileInputStream加FileOutputStream完成文件的拷贝。</li>
<li>拷贝的过程应该是一边读一边写。</li>
<li>使用以上的字节流拷贝文件的时候，文件类型随意，万能的。什么样的文件都能拷贝。</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-457aff54a1bc487cb05be65a641fc8a4.png" alt="image.png"></p>
<p>编写的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (copy(<span class="string">&quot;/Volumes/UpYou 1/SystemOS/Win10_1909(全家桶)x64.iso&quot;</span>, <span class="string">&quot;/Users/yct/Win10_1909(全家桶)x64.iso&quot;</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件复制成功！&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件复制失败！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复制文件 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">copy</span><span class="params">(String sourcePath, String targetPath)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourcePath);</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(targetPath);) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLong</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">// 一次读取的长度</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">fisLength</span> <span class="operator">=</span> fis.available();<span class="comment">// 流总长度*2=位，/8转成byte</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">int2percentage</span> <span class="operator">=</span> fisLength / <span class="number">100</span>; <span class="comment">// 将长度转换成百分比</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[readLong];</span><br><span class="line">    <span class="type">int</span> <span class="variable">nowReadCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((nowReadCount = fis.read(bytes)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      fos.write(bytes, <span class="number">0</span>, nowReadCount);</span><br><span class="line">      <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> fisLength - fis.available();<span class="comment">// 已读取量</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;====&gt;&gt;&gt;&gt;&quot;</span> + r / int2percentage + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fos.flush();<span class="comment">// 刷新管道</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建每次读取的长度，这是必须的，不可采用<code>fis.available();</code>的方式来设置数组的长度，因为如果遇到大文件，计算机找一块符合大小、连续地址的内存空间很难，可能都找不到，所以需要限定每次最大只能读取多大！（切片读取）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">readLong</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[readLong];</span><br></pre></td></tr></table></figure>

<p>最后将读取到的字节输入到byte数组中,采用读取多少字节输入多少的方式<code>fos.write(bytes, 0, nowReadCount);</code>因为要确保最后一次读取的准确性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">nowReadCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((nowReadCount = fis.read(bytes)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">  fos.write(bytes, <span class="number">0</span>, nowReadCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后一步一定要刷新管道</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fos.flush();</span><br></pre></td></tr></table></figure>

<p>读取一个5G的文件</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-572ba1501548408d8b19568ab0afb2d4.png" alt="image.png"></p>
<p>原文件</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-3374c2a324684a50b2d82f0fc16ac7ef.png" alt="image.png"></p>
<p>java程序拷贝的后的文件</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-5a557dc5736d42678ed1b59ca37da794.png" alt="image.png"></p>
<h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ol>
<li>文件字符输入流，只能读取普通文本。读取文件时，比较方便快捷。</li>
</ol>
<p>创建一个<code>FileReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(PATH);</span><br></pre></td></tr></table></figure>

<p>将文件读到char数组中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] txt = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readerCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readerCount = fr.read(txt)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">  System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(txt, <span class="number">0</span>, readerCount));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/image-5c71355d8b8a48079c4da3e36b0a90fc.png" alt="image.png"></p>
<h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><ol>
<li>文件字符输出流，只能输出普通文本。</li>
</ol>
<p>用法与其它输出流一样，但记得一定要<code>flush()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;/Users/yct/Desktop/text.txt&quot;</span>);</span><br><span class="line">     <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;/Users/yct/Desktop/text2.txt&quot;</span>);) &#123;</span><br><span class="line">  <span class="type">char</span>[] txt = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">readerCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ((readerCount = fr.read(txt)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    fw.write(txt, <span class="number">0</span>, readerCount);</span><br><span class="line">  &#125;</span><br><span class="line">  fw.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><ol>
<li><p>带有缓冲期的字符输入流，使用这个流的时候不需要自定义char数组、byte数组，自带缓冲。</p>
</li>
<li><p>当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做：节点流。外部负责包装的这个流，叫做：包装流，还有一个名字叫做：处理流。</p>
</li>
<li><p>对包装流来说，只需要关闭最外层就行，里面的节点流会自动关闭。</p>
<p>源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      in.close();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      in = <span class="literal">null</span>;</span><br><span class="line">      cb = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><code>BufferedReader(Reader in)</code> 创建一个使用默认大小输入缓冲区的缓冲字符输入流。</p>
<p><code>BufferedReader(Reader in, int sz)</code>创建一个使用指定大小输入缓冲区的缓冲字符输入流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;/Users/yct/Desktop/text.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure>



<h3 id="readLine"><a href="#readLine" class="headerlink" title="readLine"></a>readLine</h3><p><code>readLine()</code>可读取一行文本，不包括末尾的换行符，文本读完时返回<code>null</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;/Users/yct/Desktop/text.txt&quot;</span>); <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);) &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span>((s = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><ol>
<li>带有缓冲区的字符输出流。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(PATH));</span><br></pre></td></tr></table></figure>

<p>输出一个内容为abc的普通文本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">WRITER_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/copy.txt&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(WRITER_PATH))) &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">    bw.write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">    bw.flush();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a>DataOutputStream</h2><p>java.io.DataOutputStream 数据专属流，这个流可以将数据连同数据的类型一并写入文件</p>
<blockquote>
<p>这个文件不是普通文本文档</p>
</blockquote>
<p>创建数据专属的字节输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH);</span><br><span class="line">     <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fileOutputStream);) &#123;</span><br><span class="line">  dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建不同数据类型，一并写入文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">400L</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">3.0f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>写入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH);</span><br><span class="line">     <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fileOutputStream);) &#123;</span><br><span class="line">  dos.writeByte(b);</span><br><span class="line">  dos.writeShort(s);</span><br><span class="line">  dos.writeInt(i);</span><br><span class="line">  dos.writeLong(l);</span><br><span class="line">  dos.writeFloat(f);</span><br><span class="line">  dos.writeDouble(d);</span><br><span class="line">  dos.writeBoolean(sex);</span><br><span class="line">  dos.writeChar(c);</span><br><span class="line">  dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h2><ol>
<li>数据字节输入流。</li>
<li>DataOytputStream写的文件，只能使用DataInputStream来读取。并且读的时候要知道写入的顺序。读的顺序需要和写的顺序一致，才可以正常取出数据。</li>
</ol>
<p>读取上个栗子写入的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_PATH);</span><br><span class="line">     <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fis);) &#123;</span><br><span class="line">  <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> dis.readByte();</span><br><span class="line">  <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> dis.readShort();</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">  <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> dis.readLong();</span><br><span class="line">  <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> dis.readFloat();</span><br><span class="line">  <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> dis.readDouble();</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">sex</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line">  <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> dis.readChar();</span><br><span class="line">  System.out.println(b);</span><br><span class="line">  System.out.println(s);</span><br><span class="line">  System.out.println(i);</span><br><span class="line">  System.out.println(l);</span><br><span class="line">  System.out.println(d);</span><br><span class="line">  System.out.println(sex);</span><br><span class="line">  System.out.println(c);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.getStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>– <code>100</code><br>– <code>200</code><br>– <code>300</code><br>– <code>400</code><br>– <code>3.0</code><br>– <code>3.14</code><br>– <code>false</code><br>– <code>a</code></p>
<h2 id="PrintlnStream"><a href="#PrintlnStream" class="headerlink" title="PrintlnStream"></a>PrintlnStream</h2><ol>
<li>标准的字节输出流，默认输出到控制台</li>
</ol>
<blockquote>
<p>标准输出流不需要手动关闭</p>
</blockquote>
<p>我们常用的<code>System.out.println</code>其实调用的就是<code>PrintStream</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">  ps.print(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  ps.println(<span class="string">&quot; World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>Hello World!</code></p>
<h3 id="改变标准输出流的输出方向"><a href="#改变标准输出流的输出方向" class="headerlink" title="改变标准输出流的输出方向"></a>改变标准输出流的输出方向</h3><p>标准输出流不再指向控制台，指向“log”文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));</span><br></pre></td></tr></table></figure>

<p>修改输出方向，将输出方向修改到“log ”文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setOut(ps);</span><br></pre></td></tr></table></figure>

<p>再输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">  <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));</span><br><span class="line">  System.setOut(ps);</span><br><span class="line">  System.out.print(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot; World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="http://qiniu-note-image.ctong.top/note/images/image-dbe2703edadf4fcbb0a6b8d8a3bf4b97.png" alt="image.png"></p>
<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><ol>
<li>File类和四大家族没有关系，所以File类不能完成文件的读和写。</li>
<li>File对象代表什么？<br>File是文件和目录路径的抽象表示形式<br>&#x2F;Users&#x2F;yct&#x2F;Pictures 这是一个File对象<br>&#x2F;Users&#x2F;yct&#x2F;Pictures&#x2F;IMG_0168.jpeg 这也是一个File对象。<br>一个File对象对应的可能是目录，也可能是文件，File只是一个路径名的抽象表示形式。</li>
</ol>
<h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p>判断File对象是否存在，可以使用<code>exists()</code>方法</p>
<p>例如读取桌面上一个不存在的File对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">System.out.println(f.exists());</span><br></pre></td></tr></table></figure>

<p>– <code>false</code></p>
<h3 id="createNewFile"><a href="#createNewFile" class="headerlink" title="createNewFile"></a>createNewFile</h3><p>当一个File对象不存在时创建，可以使用<code>createNewFile</code>方法，以文件的形式新建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">    f.createNewFile()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/image-b0f8db4ee408421da2960e6ae6061d66.png" alt="image.png"></p>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>当一个File对象不存在时创建，可以使用<code>mkdir</code>方法，以目录的形式新建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">    f.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="http://qiniu-note-image.ctong.top/note/images/image-0bfa31b7fcb741048d90c8fa127a9d48.png" alt="image.png"></p>
<h3 id="mkdirs"><a href="#mkdirs" class="headerlink" title="mkdirs"></a>mkdirs</h3><p>需要新建多重目录需要使用<code>mkdirs</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log/a/b/c/d/e/f&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">    f.mkdirs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><img src="http://qiniu-note-image.ctong.top/note/images/image-1c7f2c73a4c74e6fb39ccc069ac34984.png" alt="image.png"></p>
<h3 id="getParent"><a href="#getParent" class="headerlink" title="getParent"></a>getParent</h3><p>获取文件的父路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> f.getParent();</span><br><span class="line">  System.out.println(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>/Users/yct/Desktop</code></p>
<h3 id="getParentFile"><a href="#getParentFile" class="headerlink" title="getParentFile"></a>getParentFile</h3><p>获取父文件的File对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> f.getParentFile();</span><br><span class="line">  <span class="comment">// 输出绝对路径</span></span><br><span class="line">  System.out.println(parent.getAbsolutePath());</span><br></pre></td></tr></table></figure>

<p>– <code>/Users/yct/Desktop</code></p>
<h3 id="getName"><a href="#getName" class="headerlink" title="getName"></a>getName</h3><p>获取文件名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> f.getParentFile();</span><br><span class="line">  System.out.println(parent.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>Desktop</code></p>
<h3 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h3><p>判断是否是一个目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> f.getParentFile();</span><br><span class="line">  System.out.println(parent.isDirectory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>true</code></p>
<h3 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h3><p>判断是否是一个标准文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> f.getParentFile();</span><br><span class="line">  System.out.println(parent.isFile());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>false</code></p>
<h3 id="lastModified"><a href="#lastModified" class="headerlink" title="lastModified"></a>lastModified</h3><p>获取文件最后修改时间，获取出来的是毫秒，需要用<code>SimpleDateFormat</code>转成自定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/log&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  <span class="type">Date</span> <span class="variable">da</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(f.lastModified());</span><br><span class="line">  <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  System.out.println(sdf.format(da));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>2020-10-02 17:12:08</code></p>
<h3 id="listFiles"><a href="#listFiles" class="headerlink" title="listFiles"></a>listFiles</h3><p>获取当前目录下所有的子文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop&quot;</span>; <span class="comment">// 文件输出的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILE_PATH);</span><br><span class="line">  File[] files = f.listFiles();</span><br><span class="line">  <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">    System.out.println(file.getAbsolutePath());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>交作业：<a href="https://github.com/Clover-You/my-blog-file/blob/main/javaIO%E6%B5%81%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E5%B0%8F%E7%BB%83%E4%B9%A0.java">文件夹拷贝</a></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>38、Java序列化和反序列化</title>
    <url>/2022/01/02/38%E3%80%81Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Java序列化和反序列化"><a href="#Java序列化和反序列化" class="headerlink" title="Java序列化和反序列化"></a>Java序列化和反序列化</h1><ol>
<li>序列化：Serialize<br>把Java对象存储到文件中，将java对象的状态保存下来的过程</li>
<li>反序列化：DeSerialize<br>将硬盘上的数据重新恢复到内存当中，恢复成java对象</li>
</ol>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStreamTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    t.setName(<span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/yct/Desktop/test&quot;</span>))) &#123;</span><br><span class="line">      ois.writeObject(t);</span><br><span class="line">      ois.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">int</span> sex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;sex=&quot;</span> + sex +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序出现错误</p>
<p>java.io.NotSerializableException: io.Test<br>    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)<br>    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)<br>    at io.ObjectInputStreamTest.main(ObjectInputStreamTest.java:13)</p>
<p>原因是Test类没有实现可序列化接口<code>Serializable</code>，这是一个空的接口，里面没有任何方法和属性，这是一个标识</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>参与序列化和反序列化的对象，必须实现<code>Serializable</code>接口。</p>
</li>
<li><p>通过源码发现，<code>Serializable</code>接口只是一个标志接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个接口中什么代码都没有。那么它起到一个什么作用呢？<br>起到标识的作用、标志的作用，java虚拟机检查到实现了这个接口，可能会对这个类进行特殊待遇。</p>
</li>
</ol>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>反序列化回来是一个Test对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/test&quot;</span>))) &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">t</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">  System.out.println(t);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>Test&#123;sex=0, name=&#39;UpYou&#39;&#125;</code></p>
<h2 id="transient-关键字"><a href="#transient-关键字" class="headerlink" title="transient 关键字"></a>transient 关键字</h2><p>如果序列化时，不希望某个成员参与序列化，可以使用<code>transient</code>关键字。<code>transient</code>表示游离的，不参与序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t.setSex(<span class="number">18</span>);</span><br><span class="line">t.setName(<span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/yct/Desktop/test&quot;</span>))) &#123;</span><br><span class="line">  ois.writeObject(t);</span><br><span class="line">  ois.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> sex;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>再读取这个test文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/yct/Desktop/test&quot;</span>))) &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">t</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">  System.out.println(t);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>Test&#123;sex=0, name=&#39;UpYou&#39;&#125;</code></p>
<h2 id="序列号版本号"><a href="#序列号版本号" class="headerlink" title="序列号版本号"></a>序列号版本号</h2><ol>
<li>序列号版本号不对应出现的错误：<br>java.io.InvalidClassException: io.Test; local class incompatible: stream classdesc serialVersionUID &#x3D; 3728061353932211421, local class serialVersionUID &#x3D; -2284980033278438903</li>
<li>java语言中是采用什么机制来区分类的？<ol>
<li>首先通过类名进行比对，如果类名不一样，肯定不是同一个类。</li>
<li>如果类名一样，再通过序列号版本号进行区分。<br>假如有两个同名的类，对于java虚拟机来说，只要两个类实现了<code>Serializable</code>接口，就算这两个名字一样，java虚拟机也是可以区分开的，因为它们都有默认的序列化版本号，它们的序列化版本号不一样，所以可以区分开（这是自动生成序列化版本号的好处）</li>
</ol>
</li>
<li>这种自动生成的序列化号的缺陷：<br>一旦代码确定后，不能进行后续的修改，因为只要修改，必然会重新编译，此时会自动生成全新的序列化版本号，这个时候java虚拟机就会认为这是一个全新的类。</li>
<li>凡是一个类实现了<code>Serializable</code>接口，建议给该类提供一个固定不变的序列化版本号</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3728061353932211421L</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>39、IO和Properties的联合使用</title>
    <url>/2022/01/02/39%E3%80%81IO%E5%92%8CProperties%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="IO和Properties的联合使用"><a href="#IO和Properties的联合使用" class="headerlink" title="IO和Properties的联合使用"></a>IO和Properties的联合使用</h1><ol>
<li>Properties是一个Map集合，key和value都是String类型。想将<code>userinfo</code>文件中的数据加载到Properties对象当中。</li>
</ol>
<p>userinfo文件内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userName=UpYou</span><br><span class="line">password=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>创建一个输入流和一个Map集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/yct/Desktop/userinfo.txt&quot;</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(FILE_PATH)) &#123;</span><br><span class="line">  <span class="type">Properties</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">  e.getStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用Properties对象的load方法将文件中的数据加载到Map集合中。文件中的数据顺着管道加载到Map集合中，其中等号左边做key，右边做value。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userInfo.load(fr);</span><br></pre></td></tr></table></figure>

<p>通过key来获取value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> userInfo.getProperty(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">System.out.println(userName);</span><br></pre></td></tr></table></figure>

<p>– <code>UpYou</code></p>
<blockquote>
<p>IO+Properties的联合使用</p>
<p>类似以上机制的这种文件被称为配置文件。并且当配置文件中的内容格式是：<br>    key1&#x3D;value</p>
<pre><code>key2=value
</code></pre>
<p>的时候，我们把这种配置文件叫做属性配置文件。Java规范中有要求：属性配置文件建议以.properties结尾，但这不是必须的。</p>
<p>这种以.properties结尾的文件在java中被称为属性配置文件。</p>
<p>其中Properties是专门存放属性配置文件内容的一个类。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>36、Java集合</title>
    <url>/2022/01/02/36%E3%80%81Java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><ol start="2">
<li><p>什么是集合？有什么用？</p>
<ul>
<li>数组其实就是一个集合。集合实际上就是一个容器，可以用来容纳其它类型的数据。</li>
</ul>
</li>
<li><p>集合为什么说在开发中用的较多？</p>
<ul>
<li>集合是一个容器，是一个载体，可以一次容纳多个对象。在实际开发中，假设连接数据库，数据库当中有10条记录，那么假设把这10条记录查询出来，在Java程序中会将10 条数据封装成10个Java对象，然后将10个Java对象放到某一个集合当中， 将集合传到前端，然后便利集合，将数据一个一个展现。</li>
</ul>
</li>
<li><p>集合不能直接存储基本数据类型，另外集合也<strong>不能直接存储Java对象</strong>，集合当中<strong>存储的都是Java对象的内存地址</strong>。(或者说集合中存储的是引用)</p>
<ul>
<li><p><code>list.add(100); </code>Java会自动装箱 –&gt; <code>Integer</code></p>
<blockquote>
<p>集合在Java中本身就是一个容器，是一个对象。</p>
<p>集合中任何时候存储的都是引用。</p>
</blockquote>
</li>
</ul>
<p> <img src="http://qiniu-note-image.ctong.top/note/images/image-4cada54d072e4274b6f5e8c59fa0fad1.png" alt="image.png">     </p>
</li>
<li><p>在Java中每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，等于将数据放到了不同的数据结构当中。什么是数据结构？数据存储的结构就是数据结构。</p>
<ul>
<li>数组</li>
<li>二叉树</li>
<li>链表</li>
<li>哈希表</li>
</ul>
</li>
<li><p>集合在Java JDK中哪个包下？</p>
<ul>
<li>java.util.*;<br>所有的集合类和集合接口都在这个包下。</li>
</ul>
</li>
<li><p>在java中集合分为两大类</p>
<ul>
<li>单个方式存储元素<br>单个方式存储元素这一类集合中超级父接口：java.util.Collection;</li>
<li>键值对的方式存储元素<br>以键值对的方式存储元素，这一类集合中超级父接口：java.util.Map;</li>
</ul>
</li>
<li><p>所有集合继承<code>Iterable</code>的含义是，所有集合都是可迭代的。</p>
</li>
<li><p>List集合存储元素特点：有序可重复，存储的元素有下标。</p>
<ul>
<li>有序实际上是说存进去是这个顺序，取出来还是这个顺序，这里的顺序不是说按照大小排序。有序是因为List集合有下标，下标从0开始，以1递增。</li>
</ul>
</li>
<li><p>Set集合存储元素特点是无序不可重复。</p>
<ul>
<li>无序表示存进去是这个顺序，取出来就不一定是这个顺序了，另外Set集合中元素没有下标。Set集合中的元素不能重复。</li>
</ul>
</li>
<li><p>List接口实现类</p>
<ol>
<li>ArrayList<ul>
<li><code>ArrayList</code>集合底层采用了数组这种数据结构</li>
<li><code>ArrayList</code>是非线程安全的</li>
</ul>
</li>
<li>LinkedList<ul>
<li><code>LinkedList</code>集合底层采用了双向链表数据结构</li>
</ul>
</li>
<li>Vector<ul>
<li><code>Vector</code>集合底层采用了数组这种数据结构</li>
<li><code>Vector</code>是线程安全的</li>
<li><code>Vector</code>效率较低</li>
</ul>
</li>
</ol>
</li>
<li><p>Set接口实现类</p>
<ol>
<li>HashSet<ul>
<li>实际上HashSet集合在<code>new</code>的时候，底层实际上<code>new</code>了一个<code>HashMap</code>集合。向HashSet集合中存储元素，实际上是存储到了HashMap集合中了。</li>
<li>HashMap集合是一个哈希表数据结构。</li>
</ul>
</li>
<li><code>TreeSet</code>实现的是<code>SortedSet</code>，<code>SortedSet</code>继承的是<code>Set</code><ul>
<li><code>TreeSet</code>集合实际上<code>new</code>的时候在底层<code>new</code>了一个<code>TreeMap</code>集合。往<code>TreeSet</code>集合中放数据的时候，实际上是将数据放到<code>TreeMap</code>集合中了。</li>
<li>TreeMap集合底层采用了二叉树数据结构。</li>
</ul>
</li>
</ol>
</li>
<li><p>SortedSet集合存储元素的特点是：由于继承了Set集合，所以它的特点也是无序不可重复，但放在SortedSet集合中的元素可以自动排序。我们称为可排序集合。放到该集合中的元素是自动按照大小顺序排序的。</p>
</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-616e1edf77b244b3a7da1d785d4cd934.png" alt="image.png"></p>
<ol start="13">
<li>Map<ul>
<li>Map集合和Collection集合没有关系。</li>
<li>Map集合以key和value的这种键值对的方式存储元素。</li>
<li>key和value都是存储java对象的内存地址。 </li>
<li>所有Map集合的key特点：无序不可重复</li>
</ul>
</li>
<li>HashMap<ul>
<li>HashMap集合底层是哈希表数据结构，是非线程安全的。</li>
</ul>
</li>
<li>Hashtable<ul>
<li><code>Hashtable</code>集合底层也是哈希表数据结构，是线程安全的，其中所有的方法都带有<code>synchronized</code>关键字，效率较低，现在使用较少，因为控制线程安全有其它更好的方案。</li>
</ul>
</li>
<li>Properties<ul>
<li>继承<code>Properties</code>，另外<code>Properties</code>存储元素的时候也是采用<code>key</code>和<code>value</code>的形式存储，并且<code>key</code>和<code>value</code>只支持<code>String</code>类型，不支持其它类型</li>
<li><code>Properties</code>被称为属性类。</li>
</ul>
</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-23aa5d91336141dba6b4360bad9e0000.png" alt="image.png"></p>
<h2 id="总结（所有实现类）"><a href="#总结（所有实现类）" class="headerlink" title="总结（所有实现类）"></a>总结（所有实现类）</h2><ul>
<li><code>ArrayList</code>: 底层是数组。</li>
<li><code>LinkeList</code>：底层是双向链表。</li>
<li><code>Vector</code>：底层是数组，线程安全的，效率较低，使用较少。</li>
<li><code>HashSet</code>：底层是<code>HashMap</code>，放到<code>HashSet</code>集合中的元素等同于放到<code>HashMap</code>集合<code>key</code>部分。</li>
<li><code>TreeSet</code>：底层是<code>TreeMap</code>，放到了<code>TreeSet</code>集合中的元素等同于放到<code>TreeMap</code>集合<code>key</code>部分。</li>
<li><code>HashMap</code>：底层是哈希表。</li>
<li><code>Hashtable</code>：底层也是哈希表，只不过线程安全的，效率较低，使用较少。</li>
<li><code>Properties</code>：是线程安全的，并且<code>key</code>和<code>value</code>只能存储字符串<code>String</code>。</li>
<li><code>TreeMap</code>：底层是二叉树。<code>TreeMap</code>集合的<code>key</code>可以自动按照大小顺序排序。</li>
</ul>
<h3 id="List集合存储元素的特点"><a href="#List集合存储元素的特点" class="headerlink" title="List集合存储元素的特点"></a><strong>List集合存储元素的特点</strong></h3><ul>
<li>有序可重复</li>
<li>有序<br>存进去和取出的顺序相同，每一个元素都有下标。</li>
<li>可重复<br>存进去一个1还可以再存一个1</li>
</ul>
<h3 id="Set（Map）集合存储元素的特点"><a href="#Set（Map）集合存储元素的特点" class="headerlink" title="Set（Map）集合存储元素的特点"></a><strong>Set（Map）集合存储元素的特点</strong></h3><ul>
<li>无序不可重复</li>
<li>无序<br>存进去的顺序和取出的顺序不一定相同。Set集合中没有下标。</li>
<li>不可重复<br>存进去一个1就不能再存一个1</li>
</ul>
<h3 id="SortedSet（SortedMap）集合存储元素的特点"><a href="#SortedSet（SortedMap）集合存储元素的特点" class="headerlink" title="SortedSet（SortedMap）集合存储元素的特点"></a><strong>SortedSet（SortedMap）集合存储元素的特点</strong></h3><ul>
<li>无序不可重复的，但是SortedSet集合中的元素是可排序的。 </li>
<li>无序<br>存进去的顺序和取出的顺序不一定相同。Set集合中没有下标。</li>
<li>不可重复<br>存进去一个1就不能再存一个1</li>
<li>可排序<br>可以按照大小顺序排列。</li>
</ul>
<p><strong>Map集合的key，就是一个Set集合。往Set集合中放数据，实际上放到了Map集合的key部分。</strong></p>
<p><code>new HashSet().add()</code>方法源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/image-14859f1bcd424e99b0dc2ba6daedbc8d.png" alt="image.png"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-ba90f9f67e88403e889f24533c899ab3.png" alt="image.png"></p>
<h2 id="Collection接口中的常用方法"><a href="#Collection接口中的常用方法" class="headerlink" title="Collection接口中的常用方法"></a>Collection接口中的常用方法</h2><ol>
<li><p>Collection中能放什么元素？</p>
<ul>
<li>没有使用<strong>泛型</strong>之前，<code>Collection</code>中可以存储<code>Object</code>的所有子类型。使用了<strong>泛型</strong>之后，<code>Collection</code>中只能存储某个具体的类型。</li>
</ul>
</li>
<li><p>Collection中的常用方法</p>
<ul>
<li><a href="#add"><code>boolean add(Object e);</code></a>向集合中添加元素。</li>
<li><a href="#size"><code>int size();</code></a>获取集合中元素的个数。</li>
<li><a href="#clear"><code>void clear();</code></a>清空集合中全部元素。</li>
<li><a href="#contains"><code>boolean contains(Object o);</code></a>集合是否包含<code>o</code>,包含返回<code>true</code>，不包含返回<code>false</code></li>
<li><a href="#remove"><code>boolean remove(Object o);</code></a>删除集合中的某个元素，如果存在。</li>
<li><a href="#isempty"><code>boolean isEmpty();</code></a>判断集合是否为空，为空返回<code>true</code>，不为空返回<code>false</code></li>
<li><a href="#toarray"><code>Object[] toArray();</code></a>将集合转为<code>Object</code>类型数组</li>
</ul>
</li>
</ol>
<h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>接口无法实例化对象，因为接口是抽象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Collection</span>();</span><br></pre></td></tr></table></figure>

<p>实例化一个<code>Collection</code>下已实现的子类。如果不指定集合类型，那么默认为<code>Object</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure>

<p>添加一个值为<code>100</code>的<code>int</code>数值，<strong>JDK5以上可以自动装箱。</strong>实际上放进去了一个对象的内存地址<code>int --&gt; Intiger</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.add(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>指定类型，限制集合存储元素的类型。例如指定该集合只能存储<code>String</code>类型的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<p>在<code>String</code>类型的集合中存储<code>int</code>类型,出现错误:</p>
<p><code>The method add(String) in the type Collection&lt;String&gt; is not applicable for the arguments (int)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.add(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>存储<code>String</code>类型的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.add(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>-- <code>[Hello World]</code></p>
<h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><p>向集合中添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;Character&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">hiTo</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hiTo.length(); i++)&#123;</span><br><span class="line">  c.add(hiTo.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>[H, e, l, l, o,  , W, o, r, l, d, !]</code></p>
<p>获取集合中元素的个素，从<code>1</code>开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.size();</span><br></pre></td></tr></table></figure>

<p>-- <code>12</code></p>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清空<a href="#size"><code>size</code></a>示例中集合元素的个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.clear();</span><br></pre></td></tr></table></figure>

<p>查看元素个素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(c.size());</span><br></pre></td></tr></table></figure>

<p>-- <code>0</code></p>
<h3 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h3><p>向集合中添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">hiTo</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hiTo.length(); i++)&#123;</span><br><span class="line">  c.add(hiTo.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看集合是否包含<code>H</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(c.contains(<span class="string">&quot;H&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>-- <code>false</code></p>
<p>为什么返回<code>false</code>？因为<code>c.add(hiTo.charAt(i));</code>添加的是一个<code>char</code>类型的元素，<code>&quot;H&quot;</code>则是一个<code>String</code>类型的元素。<strong>两个不同的类型</strong>没有可比性</p>
<p><code>Operator &#39;==&#39; cannot be applied to &#39;char&#39;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;H&#x27;</span> == <span class="string">&quot;H&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>查看集合是否包含<code>char</code>类型的<code>H</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(c.contains(<span class="string">&#x27;H&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>-- <code>true</code></p>
<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>查看集合是否包含某个元素，可以理解为某个元素是否等于某个元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">System.out.println(arrayList.contains(<span class="string">&quot;Hi&quot;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>所有的类都继承于<code>Object</code>，<code>Object</code>有<code>equals</code>方法，也就是说，所有的类都有<code>equals</code>方法。那么都知道<code>String</code>数据是保存在方法区的常量池里<code>==</code>比较的是的内存地址,以下程序返回<code>true</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hi&quot;</span> == <span class="string">&quot;Hi&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>而<code>equals</code>未重写之前源码也是使用了<code>==</code>做比较，那么下面的程序返回<code>true</code>吗？答案是<code>false</code>，上面说到，<code>==</code>比较的是内存地址,<code>String</code>对象存储在方法区的常量池中，而<code>new</code>创建的对象都保存在堆内存，那么现在你觉得它们内存地址还一样吗？说到这可能就有人说：诶！可是我输出的时候确实是输出一个<code>Hi</code>啊！emmm！你还是去看一下<code>Object</code>的源码，以及<code>System.out.println</code>的源码，这里不做过多的赘述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">System.out.println(str == <span class="string">&quot;Hi&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>String</code>通常使用<code>equals</code>方法来进行比较，“诶你刚刚不是说<code>equals</code>也是使用<code>==</code>来比较吗？”,我说的是未重写之前，<code>String</code>类已经重写了<code>equals</code>方法以及<code>toString</code>方法<code>String</code>类里面的<code>equals</code>方法比较的是字符串的内容。</p>
<p>“诶你叭叭叭说这么多，不是说分析<code>contains</code>方法的源码吗？”</p>
<p>……</p>
<p>经过我上面讲的你们应该猜到<code>contains</code>大致原理了吧？</p>
<ul>
<li><code>new String</code> 不能使用双等号和<code>&quot;&quot;</code>做比较</li>
<li>双等号比较的是内存地址</li>
<li>手动<code>new</code> 的<code>String</code>对象是在堆内存，<code>&quot;&quot;</code>对象是在方法区</li>
</ul>
<p>没错！<code>contains</code>底层就是使用了<code>Object</code>的<code>equals</code>方法，这里使用的是多态，如果对比的是<code>String</code>，那么<code>equals</code>就是<code>String</code>的!!!我再问一下，<code>arrayList</code>是否包含<code>str</code>?说包含的建议源码分析从头再看一次,答案是不包含。</p>
<h5 id="扒一下源码"><a href="#扒一下源码" class="headerlink" title="扒一下源码"></a>扒一下源码</h5><p>只扒下实现源码哈！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">  <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOfRange(o, <span class="number">0</span>, size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">indexOfRange</span><span class="params">(Object o, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    Object[] es = elementData;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (es[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o.equals(es[i])) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成员变量<code>size</code>是用来记录集合长度或者说元素个数,<code>elementData</code>就是这个集合的数据。主要先看<code>indexOfRange</code>方法。</p>
<p>直接看<code>else</code>分支,这里是不是使用了<code>Object</code>的<code>equals</code>方法？那么<code>new String(&quot;Hi&quot;).equals(&quot;Hi&quot;);</code>是不是等于<code>true</code>？<strong>String重写了equals方法,String重写的equals方法比较的是内容</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (o.equals(es[i]))</span><br></pre></td></tr></table></figure>

<p>如果比较的是你自己定义的一个类，那么如果你没有重写<code>equals</code>方法，铁定是<code>false</code>，重写得看你的对比规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;UpYou&quot;</span>));</span><br><span class="line">    <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">    System.out.println(arrayList.contains(test));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String n)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> (Test) o;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(test.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>-- <code>true</code></p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>向集合中添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">hiTo</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hiTo.length(); i++)&#123;</span><br><span class="line">  c.add(hiTo.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除集合中的某个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.remove(<span class="string">&#x27;H&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>-- <code>[e, l, l, o,  , W, o, r, l, d, !]</code></p>
<h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h3><p>创建一个集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<p>判断集合是否为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(c.isEmpty());</span><br></pre></td></tr></table></figure>

<p>-- <code>true</code></p>
<p>向一个空的集合添加元素后判断是否为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">System.out.println(c.isEmpty());</span><br></pre></td></tr></table></figure>

<p>-- <code>false</code></p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h3><p>创建一个<code>String</code>集合并添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">c.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>将集合转成<code>Object</code>数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] list = c.toArray();</span><br></pre></td></tr></table></figure>

<p>获取这个数组的第一个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(list[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>-- <code>Hello World!</code></p>
<h2 id="关于集合迭代器"><a href="#关于集合迭代器" class="headerlink" title="关于集合迭代器"></a>关于集合迭代器</h2><p><code>Iterator</code>迭代器，是所有实现于<code>Iterator</code>类通用的一种方式，例如<code>Collector</code>集合。</p>
<p>创建一个集合对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br></pre></td></tr></table></figure>

<p>添加一些元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">eles</span> <span class="operator">=</span> <span class="string">&quot;HelloWorld!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; eles.length(); i++) &#123;</span><br><span class="line">  c.add(eles.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对<code>Collection</code>进行迭代，得到<code>Collection</code>的迭代器<code>Iterator</code>,在源码中，<code>Iterator</code>迭代器在内部类中实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> c.iterator();</span><br></pre></td></tr></table></figure>

<h3 id="迭代器中的方法"><a href="#迭代器中的方法" class="headerlink" title="迭代器中的方法"></a>迭代器中的方法</h3><ol>
<li><p><a href="#hasnext"><code>boolean hasNext();</code></a> 检查集合中是否还有元素，没有元素返回<code>false</code>，否则返回<code>true</code>。</p>
</li>
<li><p><a href="#next"><code>E next();</code></a>使得迭代器前进一位，并返回当前迭代器指针指向的元素。统一返回<code>Object</code>(存进去什么类型取出来就是什么类型)</p>
</li>
</ol>
<h3 id="hasNext"><a href="#hasNext" class="headerlink" title="hasNext()"></a>hasNext()</h3><p>查看是否是一个可迭代的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">hn</span> <span class="operator">=</span> iterator.hasNext();</span><br></pre></td></tr></table></figure>

<p>-- <code>true</code></p>
<h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>使迭代器前进一位，并返回当前迭代器指针指向的元素。统一返回<code>Object</code>类型,<strong>由于<a href="#setmap%E9%9B%86%E5%90%88%E5%AD%98%E5%82%A8%E5%85%83%E7%B4%A0%E7%9A%84%E7%89%B9%E7%82%B9">Set</a>集合特点是无序不可重复的，所以每次执行可能元素位置不一。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">item</span> <span class="operator">=</span> iterator.next();</span><br></pre></td></tr></table></figure>

<p>-- <code>!</code></p>
<h3 id="使用循环"><a href="#使用循环" class="headerlink" title="使用循环"></a>使用循环</h3><p>若想一个一个取出集合中的元素，可以使用循环来控制迭代器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">  System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  -- <code>!</code><br>  -- <code>r</code><br>  -- <code>d</code><br>  -- <code>e</code><br>  -- <code>W</code><br>  -- <code>H</code><br>  -- <code>l</code><br>  -- <code>o</code></p>
<h3 id="迭代器执行原理内存图"><a href="#迭代器执行原理内存图" class="headerlink" title="迭代器执行原理内存图"></a>迭代器执行原理内存图</h3><p>没执行<code>next()</code>方法之前，<code>Iterator</code>指针不会指向任何元素</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-a68a038270f34891889afbb6900e7a6f.png" alt="image.png"></p>
<p>第一次循环开始，执行<code>next()</code>之后,指针向前一位，并将当前指针指向的元素<code>!</code>返回</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-5af85f3f650c4e868ed628e3c56d87bf.png" alt="image.png"></p>
<p>第二次循环开始后，执行<code>next()</code>，指针又向前移一位，将当前指针指向的元素<code>r</code>返回</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-250be5d231e44940b604645153495946.png" alt="image.png"></p>
<p>循环直到<code>hasNext()</code>方法返回<code>false</code>之后结束,指针在最后一位元素的位置。<br><img src="http://qiniu-note-image.ctong.top/note/images/image-9b321cb77b5843bcadfcb771980f5351.png" alt="image.png"></p>
<p>当迭代完成之后，<code>hasNext()</code>方法会一直处于<code>false</code>的状态,如果强行使用<code>next()</code>,那么你程序的生命也就到头了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">  System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(iterator.next());</span><br></pre></td></tr></table></figure>

<p>Exception in thread “main” java.util.NoSuchElementException<br>    at java.base&#x2F;java.util.HashMap$HashIterator.nextNode(HashMap.java:1586)<br>    at java.base&#x2F;java.util.HashMap$KeyIterator.next(HashMap.java:1607)<br>    at com.upyou.collection.CollectionTest01.main(CollectionTest01.java:26)</p>
<p>当集合的结构发生改变时，迭代器必须重新获取，如果还是用以前老的迭代器，会出现异常：<code>java.util.ConcurrentModificationException</code></p>
<p>使用<code>Collection.remove</code>方法之后，集合结构发生了改变，此时迭代器没有更新。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">c.add(<span class="number">1</span>);</span><br><span class="line">c.add(<span class="number">2</span>);</span><br><span class="line">c.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> it.next();</span><br><span class="line">  c.remove(o);</span><br><span class="line">  System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而如果迭代时需要删除元素，最好的办法就是使用迭代器来删除，如何使用迭代器来进行删除元素呢？别急，迭代器给我门提供了这样的一个方法: <code>remove</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">c.add(<span class="number">1</span>);</span><br><span class="line">c.add(<span class="number">2</span>);</span><br><span class="line">c.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">  it.next();</span><br><span class="line">  it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Iterator.remove</code>删除迭代器当前指向的元素，而<code>next</code>方法控制迭代器的指针，所以使用<code>remove</code>时必须先使用<code>next</code>，因为迭代器开始是不会指向任何元素。</p>
<blockquote>
<p>迭代器是通用的</p>
</blockquote>
<h2 id="List接口方法"><a href="#List接口方法" class="headerlink" title="List接口方法"></a>List接口方法</h2><ol>
<li>List集合存储元素特点<ul>
<li>有序可重复</li>
</ul>
</li>
<li>List既然是Collection接口的子接口，那么肯定List接口有自己“特色”的方法<ul>
<li><a href="#add-1"><code>void add(int index, E element);</code></a>向集合中指定位置插入元素。</li>
<li><a href="#get"><code>Object get(int index);</code></a>通过指定下标获取集合中的元素</li>
<li><a href="#indexof"><code>int indexOf(Object o);</code></a>获取指定对象第一次出现处的索引,如果没有返回<code>-1</code></li>
<li><a href="#lastIndexof"><code>int lastIndexOf(Object o)</code></a>获取指定对象最后一次出现的索引，如果没有返回<code>-1</code></li>
<li><a href="#remove"><code>Object remove(int index)</code></a>删除指定下标位置的元素</li>
<li><a href="#set"><code>Object set(int index, Object element)</code></a>修改指定下标位置的元素</li>
</ul>
</li>
</ol>
<h3 id="add-1"><a href="#add-1" class="headerlink" title="add()"></a>add()</h3><p>向集合中指定位置插入元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">l.add(<span class="number">2</span>);</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(l);</span><br><span class="line">l.add(<span class="number">1</span>, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>

<p>-- <code>[1, 2, 3]</code></p>
<p>-- <code>[1, Hello World!, 2, 3]</code></p>
<p>这个方法使用不多，因为对于ArrayList集合来说效率比较低。</p>
<h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>通过指定下标获取集合中的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(l.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>-- <code>Hello World!</code></p>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>获取指定对象第一次出现处的索引,如果没有返回<code>-1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(l.indexOf(<span class="number">3</span>));</span><br><span class="line">System.out.println(l.indexOf(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p>-- <code>2</code></p>
<p>-- <code>-1</code></p>
<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p>获取指定对象最后一次出现的索引，如果没有返回<code>-1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(l.lastIndexOf(<span class="string">&quot;Hello World!&quot;</span>));</span><br><span class="line">System.out.println(l.lastIndexOf(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>-- <code>3</code></p>
<p>-- <code>-1</code></p>
<h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove()"></a>remove()</h3><p>删除指定下标位置的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line">l.remove(<span class="number">1</span>);</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>

<p>-- <code>[1, Hello World!, 3]</code></p>
<h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><p>修改指定下标位置的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">l.set(<span class="number">0</span>, <span class="string">&quot;Hello monkey&quot;</span>);</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>

<p>-- <code>[Hello monkey]</code></p>
<h2 id="ArrayList集合初始化及扩容"><a href="#ArrayList集合初始化及扩容" class="headerlink" title="ArrayList集合初始化及扩容"></a>ArrayList集合初始化及扩容</h2><ol>
<li><p>默认初始化容量10（底层先创建了一个长度为0的数组，当添加第一个元素的时候，初始化容量10）</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合底层是一个Object[]数组</p>
</li>
<li><p>构造方法<br><code>new ArrayList();</code></p>
<p><code>new ArrayList(20);</code></p>
<p>将HashSet集合转为List集合</p>
<p><code>Collection c = new HashSet();</code></p>
<p><code>c.add(1);</code></p>
<p><code>new ArrayList(c);</code></p>
</li>
<li><p>ArrayList集合的容量</p>
<ul>
<li>增长到原容量的1.5倍</li>
<li>尽可能少扩容。因为数组扩容效率比较低，建议在使用ArrayList集合的时候预估计元素的个数，给定一个初始化容量。</li>
</ul>
</li>
<li><p>数组优缺点</p>
<ul>
<li><p>优点：检索效率比较高</p>
</li>
<li><p>缺点：随机增删元素效率低</p>
<p>数组无法存储大数据量，因为很难找到一块非常大的连续的内存空间</p>
</li>
</ul>
</li>
<li><p>向数组末尾添加元素，效率很高，不受影响。</p>
</li>
</ol>
<h3 id="将ArrayList转换成线程安全"><a href="#将ArrayList转换成线程安全" class="headerlink" title="将ArrayList转换成线程安全"></a>将ArrayList转换成线程安全</h3><p>如何将一个非线程安全的ArrayList集合转换成线程安全的呢？</p>
<ul>
<li>使用集合工具类<br><code>java.util.Collections;</code><br>注意<code>java.util.Collection;</code>是集合接口</li>
</ul>
<p>非线程安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;upyou&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>转换成线程安全的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">Collections.synchronizedList(list);</span><br><span class="line">list.add(<span class="string">&quot;upyou&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="单向链表数据结构"><a href="#单向链表数据结构" class="headerlink" title="单向链表数据结构"></a>单向链表数据结构</h2><ol>
<li><p>对于链表数据结构来说，基本的单元是节点Node。</p>
</li>
<li><p>对于单链表来说，任何一个节点Node中都有两个属性</p>
<ul>
<li>存储的数据</li>
<li>下一节点的内存地址</li>
</ul>
</li>
<li><p>链表优缺点</p>
<ul>
<li><p>优点<br>随机增删元素效率较高，因为增删元素不涉及到大量元素位移</p>
</li>
<li><p>缺点</p>
<p>不能通过数学表达式计算被查找元素的内存地址，每一次查找时都需要一个一个的去找</p>
</li>
</ul>
</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-c5db5bec2f244f2b96d4499565c5dcd0.png" alt="image.png"></p>
<h2 id="Map接口的常用方法"><a href="#Map接口的常用方法" class="headerlink" title="Map接口的常用方法"></a>Map接口的常用方法</h2><ol>
<li>Map和Collection没有继承关系</li>
<li>Map集合以key和value的方式存储数据：俗称键值对<ul>
<li>key和value都是引用数据类型</li>
<li>key和value都是存储对象的内存地址</li>
<li>key起到主导的地位，value是key的一个附属品</li>
</ul>
</li>
<li>Map集合中的常用方法<ul>
<li><code>void clear()</code> 清空Map</li>
<li><code>boolean containsValue(Object value)</code> 判断Map中是否包含某个value</li>
<li><code>V get(Object key)</code> 通过key获取value</li>
<li><code>boolean isEmpty()</code> 判断Map集合中的元素个数是否为0</li>
<li><code>Set&lt;K&gt; keySet()</code> 获取Map集合所有的Key </li>
<li><code>V put(K key, V value)</code> 向Map集合中添加键值对</li>
<li><code>V remove(Object key)</code> 通过key删除键值对</li>
<li><code>int size()</code>获取集合长度</li>
<li><code>Collection&lt;V&gt; values()</code>获取Map集合中所有的value，返回一个Collection</li>
<li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>将Map集合转成Set集合</li>
</ul>
</li>
</ol>
<h2 id="哈希表数据结构"><a href="#哈希表数据结构" class="headerlink" title="哈希表数据结构"></a>哈希表数据结构</h2><ol>
<li><p>HashMap集合底层是哈希表的数据结构。</p>
</li>
<li><p>哈希表是一个数组和单向链表的结合体 。</p>
</li>
<li><p>哈希值是key的 <code>hashCode</code> 方法的执行结果。</p>
</li>
<li><p>哈希表HashMap使用不当时无法发挥性能！<br>假设将所有的hashCode返回值固定为某个值，那么会导致底层哈希表变成了纯单向链表。这种情况我们称为：散列分布不均匀。</p>
<ul>
<li>什么是散列分布均匀？<br>假设有100个元素，10个单向链表，那么每个单向链表上有10个节点，这是最好的，是散列分布均匀的。</li>
<li>假设将所有的hashCode方法返回值都设定为不一样的值，可以吗，有什么问题？<br>不行，因为这样的话导致底层哈希表就成为一维数组了，没有链表的概念了。也是散列分布不均匀。</li>
<li>散列分布均匀需要你重写hashCode方法时有一定的技巧。</li>
</ul>
</li>
<li><p>放在<code>HashMap</code>集合key部分的元素，以及放在<code>HashSet</code>集合中的元素，需要同时重写<code>hashCode</code>和<code>equals</code>方法。</p>
</li>
<li><p>HashMap集合的默认初始化容量是16，默认加载因子是0.75，这个默认加载因子是当HashMap集合底层数组的容量达到75%的时候，数组开始扩容。</p>
<p>HashMap集合初始化容量必须是2的倍数，这也是官方推荐的，这是因为达到散列均匀，为了提高HashMap集合的存取效率所必须的。</p>
</li>
<li><p>向Map集合中存取，都是先调用key的hashCode方法，让后再调用equals方法！equals方法有可能调用，也有可能不调用。</p>
<ul>
<li><p>拿put(k, v)举例，什么时候equals不会调用？<br>k.hashCode()方法返回哈希值，哈希值经过哈希算法转换成数组下标。</p>
<p>数组下标位置上如果是null，equals不需要执行。</p>
</li>
<li><p>拿get(k)举例，什么时候equals不会调用？</p>
<p>k.hashCode()方法返回哈希值，哈希值经过哈希算法转换成数组下标。数组下标位置上如果是null，equals不需要执行。</p>
</li>
</ul>
</li>
<li><p>放在HashMap集合key部分的，以及放在HashSet集合中的元素，需要同时重写hashCode方法和equals方法。</p>
</li>
</ol>
<h3 id="put-k，v-实现原理"><a href="#put-k，v-实现原理" class="headerlink" title="put(k，v)实现原理"></a>put(k，v)实现原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>第一步：将<code>k</code>和<code>v</code>封装到<code>Node</code>对象中</p>
<p>第二步：底层会调用<code>k</code>的<code>hashCode</code>方法得出hash值，然后通过哈希函数&#x2F;哈希算法，将hash值转成数组的下标，下标位置上如果没有任何元素，就把Node添加到这个位置上。如果下标对应的位置上有链表，此时会拿着<code>k</code>和链表上每一个节点中的<code>k</code>进行<code>equals</code>，如果所有的<code>equals</code>方法返回都是<code>false</code>，那么这个新节点将被添加到链表的末尾，如果其中有一个<code>equals</code>返回了<code>true</code>，那么这个节点的<code>value</code>将会被覆盖。</p>
<h3 id="get-k-实现原理"><a href="#get-k-实现原理" class="headerlink" title="get(k)实现原理"></a>get(k)实现原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>第一步：先调用k的hashCode方法得出哈希值，通过哈希算法转换成数组下标，通过数组下标快速定位到某个位置上，如果这个位置上什么也没有，返回null，如果这个位置上有单向链表，那么对单向链表上的每个节点中的k进行equals，如果所有equals方法返回<code>false</code>，那么get方法返回<code>null</code>，只要其中有一个节点的k和参数k equals的时候返回<code>true</code>，那么此时这个节点的value就是需要找的value。get方法最终返回这个要找的value。</p>
<h2 id="属性类Properties"><a href="#属性类Properties" class="headerlink" title="属性类Properties"></a>属性类Properties</h2><p>Properties是一个Map集合，继承Hashtable，Properties的key和value都是String类型</p>
<p>Properties被称为属性类对象</p>
<p>Properties是线程安全的</p>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>properties 通过setProperty方法来存储数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pro.setProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;UpYou&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="取数据"><a href="#取数据" class="headerlink" title="取数据"></a>取数据</h3><p>properties 通过getProperty方法来获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(pro.getProperty(<span class="string">&quot;name&quot;</span>));</span><br></pre></td></tr></table></figure>


<h2 id="TreeSet-集合"><a href="#TreeSet-集合" class="headerlink" title="TreeSet 集合"></a>TreeSet 集合</h2><ol>
<li>TreeSet集合底层实际上是一个TreeMap</li>
<li>TreeMap集合底层是一个二叉树</li>
<li>放到TreeSet集合中的元素，等同于放到TreeMap集合key部分了</li>
<li>TreeSet集合中的元素：无序不可重复，但是可以按照元素的大小顺序自动排序，称为：可排序集合</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">ts.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;s&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>输出</p>
<p>– <code>a</code><br>– <code>b</code><br>– <code>d</code><br>– <code>h</code><br>– <code>m</code><br>– <code>s</code></p>
<p><strong>对TreeSet来说，自定义类型可以排序吗？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Learn</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// System.out.println(&quot;Hello World!&quot;);</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    TreeSet&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    persons.add(p1);</span><br><span class="line">    persons.add(p2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Person p : persons) &#123;</span><br><span class="line">      System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  Person(<span class="type">int</span> age) &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;年龄是：&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序执行出现错误 <code>Exception in thread &quot;main&quot; java.lang.ClassCastException: Person cannot be cast to java.lang.Comparable</code>。</p>
<p>对于<code>Person</code>类型来说是无法排序的，因为没有指定Person对象之间的比较规则。对于Person排序需要实现<code>java.lang.Comparable</code>接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt;&#123;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">  Person(<span class="type">int</span> age) &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实现Comparable中的comparaTo方法</span></span><br><span class="line">  <span class="comment">// 需要在这个方法中编写比较的逻辑、或者说比较的规则，按照什么比较！</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age - o.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;年龄是：&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p>– <code>年龄是：1</code><br>– <code>年龄是：2</code></p>
<p><code>k.compareTo(t.key)</code><br>拿着参数k和集合中的每一个k进行比较，返回值可能是 &gt;0 &lt;0 &#x3D;0，比较规则最终还是由我们自己规定。例如：按照年龄升序、降序。</p>
<blockquote>
<p>放在TreeSet集合中的元素需要实现java.lang.Comparable接口，并且实现compareTo方法。</p>
<p>TreeSet中的自动排序是通过二叉树的方式进行排序。</p>
</blockquote>
<h3 id="TreeSet使用自定义比较器"><a href="#TreeSet使用自定义比较器" class="headerlink" title="TreeSet使用自定义比较器"></a>TreeSet使用自定义比较器</h3><p>TreeSet可以使用自定义比较器来比较，TreeSet底层是TreeMap，我就不过多讲述了，就把源码中重要的代码copy出来！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntry</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">  <span class="comment">// Offload comparator-based version for sake of performance</span></span><br><span class="line">  <span class="keyword">if</span> (comparator != <span class="literal">null</span>) <span class="comment">// 使用自定义比较器</span></span><br><span class="line">    <span class="keyword">return</span> getEntryUsingComparator(key);</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">  	......</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="比较器实现"><a href="#比较器实现" class="headerlink" title="比较器实现"></a>比较器实现</h4><p>比较器需要实现<code>java.util.Comparator</code>接口。（Comparable是java.lang包下的。Comparator是java.util包下的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Person&gt; &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Person</code>就不需要实现<code>Comparable</code>接口了，因为我们自定义了一个比较器，把我们自定义的比较器给到<code>TreeSet</code>去使用就好：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">PersonComparator</span>());</span><br></pre></td></tr></table></figure>

<h4 id="内部类实现比较器"><a href="#内部类实现比较器" class="headerlink" title="内部类实现比较器"></a>内部类实现比较器</h4><p>为了减少java文件，也可以使用内部类的方式来实现比较器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;使用的是内部类！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> o1 - o2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>放到TreeSet或者TreeMap集合key部分的元素想做到排序，包括两种方式：</p>
<ol>
<li>放在集合中的元素实现java.lang.Comparable接口</li>
<li>在构造TreeSet或者TreeMap集合的时候给它传一个比较器对象。</li>
</ol>
<p>Comparable和Comparator如何选择？</p>
<ol>
<li>如果比较规则不会轻易改变那么选择Comparable</li>
<li>如果比较规则不定，或者需要多个比较规则之间频繁切换，那么使用Comparator，Comparator接口的设计符合OCP原则。</li>
</ol>
</blockquote>
<h2 id="自平衡二叉树数据结构"><a href="#自平衡二叉树数据结构" class="headerlink" title="自平衡二叉树数据结构"></a>自平衡二叉树数据结构</h2><ol>
<li><p>TreeSet、TreeMap是自平衡二叉树，遵循左小右大的原则。</p>
</li>
<li><p>遍历二叉树的时候有三种方式</p>
<ul>
<li>前序遍历：根左右</li>
<li>中序遍历：左根右</li>
<li>后序遍历：左右根</li>
</ul>
<blockquote>
<p>前中后说的是“根”的位置。根在前面是前序，根在中间是中序，根在后面是后序。</p>
</blockquote>
</li>
<li><p>TreeSet集合&#x2F;TreeMap集合采用的是：中序遍历方式，Iterator迭代器采用的是中序遍历方式。左根右。</p>
</li>
<li><p>100，200，50，60，80，120，140，130，135，180，666，40，55<br><img src="http://qiniu-note-image.ctong.top/note/images/image-6957ab7ce01a43709f42df30f0593788.png" alt="image.png"></p>
</li>
</ol>
<h2 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h2><p>Java.util.Collection 集合接口</p>
<p>Java.util.Collections 集合工具类，方便集合的操作。</p>
<h3 id="synchronizedList"><a href="#synchronizedList" class="headerlink" title="synchronizedList"></a>synchronizedList</h3><p>可将不是线程安全的集合变成线程安全的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; arrList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.synchronizedList(arrList);</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>可对<code>List</code>集合进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; arrList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.sort(arrList);</span><br></pre></td></tr></table></figure>

<p>sort 也支持传入比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; arrList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arrList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>));</span><br><span class="line">arrList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line">arrList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">9</span>));</span><br><span class="line">arrList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 自定义比较器</span></span><br><span class="line">Collections.sort(arrList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对Set集合进行排序的时，需要将Set集合转成List集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; s = ne-qw HashSet&lt;&gt;();</span><br><span class="line">List&lt;String&gt; arrList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(s);</span><br><span class="line">Collections.sort(arrList);</span><br></pre></td></tr></table></figure>

<h2 id="集合最主要掌握什么内容？"><a href="#集合最主要掌握什么内容？" class="headerlink" title="集合最主要掌握什么内容？"></a>集合最主要掌握什么内容？</h2><ol>
<li>每个集合对象的创建（new）</li>
<li>向集合中添加元素</li>
<li>从集合中取出某个元素</li>
<li>遍历集合</li>
<li>主要的集合类<ul>
<li>ArrayList</li>
<li>LinkedList</li>
<li>HashSet</li>
<li>TreeSet</li>
<li>HashMap</li>
<li>Properties</li>
<li>TreeMap</li>
</ul>
</li>
</ol>
<blockquote>
<p>类在转成某个接口类型的时候不需要有继承关系。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>3、Java 控制语句</title>
    <url>/2022/01/02/3%E3%80%81Java-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>Java 控制语句可以分为 7 种：</p>
<ul>
<li>控制选择结构语句<ul>
<li>if、if else</li>
<li>switch</li>
</ul>
</li>
<li>控制循环结构语句<ul>
<li>for</li>
<li>while</li>
<li>do while</li>
</ul>
</li>
<li>改变控制语句顺序<ul>
<li>break</li>
<li>continue</li>
</ul>
</li>
</ul>
<h3 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>如果发生了某件事那么就做什么…</p>
<p>如果 age 满 18，那么输出一段话。if只接受具有比较性的语句，最终比较结果为 Boolean。当满足一定的条件之后，做一件事情。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我满 %d 岁啦！&quot;</span>, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p>当然，如果不满足某一条件之后，再做另一件事情。</p>
<p>还是刚刚那个问题，如果未满18，那么提示 您未满18.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我满 %d 岁啦！&quot;</span>, age);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不好意思，您未满18！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，第一个条件为满足，还可以有第二个条件。当如果第一个条件未满足时再看第二个条件是否也满足。第一个条件不满足享受一种待遇，第二个条件满足又是享受另一种待遇。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我满 %d 岁啦！&quot;</span>, age);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(age &gt;= <span class="number">16</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你已经满16岁啦，可以办理我们的业务啦！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不好意思，您不满足任何条件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>重点：</strong>对于Java中的if语句来说，只要有一个分支执行，整个if语句全部结束。</li>
<li><strong>注意：</strong>以上第一种编写方式和第二种编写方式都带有else分支，这两种方式可以100%保证会有分支执行。</li>
<li>“所有的控制语句”都是可以嵌套使用的，只要合理嵌套执行。</li>
</ul>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>关于 <code>switch</code> 语句：</p>
<ol>
<li><code>switch</code> 语句也属于选择结构，也是分支语句。</li>
<li><code>switch</code> 语句的语法结构：<ul>
<li>一个完整的 <code>switch</code> 语句应该这样编写：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">tar</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span>(tar)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Hello World!&quot;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>switch</code> 接受 <code>int</code> 或 <code>string</code> 类型的字面值或变量。</li>
<li><code>case</code> 是 <code>switch</code> 匹配项，一个 <code>switch</code> 可以有无数个 <code>case</code>：<ul>
<li><code>case</code> 具有穿透性，必须使用关键字 <code>break</code> 阻止穿透。</li>
<li><code>case</code> 接受int或string字面值或变量，不需要使用小括号<code>()</code>包裹。</li>
</ul>
</li>
<li><code>switch</code> 可以有 0 个或 1 个 <code>default</code><ul>
<li>当所有 <code>case</code> 不匹配时，默认匹配该选项</li>
</ul>
</li>
</ol>
<h3 id="循环结构语句"><a href="#循环结构语句" class="headerlink" title="循环结构语句"></a>循环结构语句</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>当某个条件不满足时，一直重复执行，直到循环条件满足。</p>
<p>一个变量 i 初始值为0，如果它小于10，那么执行一次循环体内的语句。执行完后，i++一次。然后 又执行一次，这时 i++ 等于1，1 &lt; 10又继续执行，直到i不小于10后结束循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;现在i=: %d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>while 循环语句：</p>
<ol>
<li><code>while</code> 循环的语法结构：<br> <code>whhile(布尔表达式)&#123;...循环体...&#125;</code></li>
<li><code>while</code> 执行原理:<ul>
<li>先判断布尔表达式执行结果为 <code>true</code> 或 <code>false</code>，如果为 <code>true</code>，执行循环体。<code>false</code> 循环结束。</li>
</ul>
</li>
<li><code>while</code> 可能执行 0 次，也可能执行 n 次。</li>
<li>如果 <code>while</code> 表达式为true，那么会造成死循环，编译检测该程序都无法被执行，所以变异报错。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><p><code>do while</code> 循环语句：</p>
<ol>
<li><code>do while</code> 循环的语法结构<br><code>do&#123;...循环体...&#125;while(...布尔表达式...)</code></li>
<li>执行次数：<ul>
<li>一开始是先执行 <code>do</code> 语句，所以该循环最少被执行 1 次，最多被执行 n 次。</li>
</ul>
</li>
<li>执行原理：<ul>
<li>先执行 <code>do</code> 语句中的循环体，最后执行 <code>while</code>，如果 <code>while</code> 表达式为true，那么会造成死循环，编译检测该程序都无法被执行，所以变异报错。</li>
</ul>
</li>
</ol>
<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i 小于 100 i == %d&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt; <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制循环语句"><a href="#控制循环语句" class="headerlink" title="控制循环语句"></a>控制循环语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>关于Java 控制语句当中的 break语句：</p>
<ol>
<li><code>break</code>是Java语言当中的关键字，被翻译为“中断、折断”</li>
<li><code>break</code> + ‘;’ 可以成为一个当读的完整的Java语句： break;</li>
<li><code>break</code> 可以用在：<ul>
<li><code>switch</code> 语句中，可以终止 <code>switch</code> 语句执行。</li>
<li>使用在循环语句当中，可以使当前整个循环语句终止循环。</li>
</ul>
</li>
</ol>
<p>下列程序，如果i等于3时，退出当前循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span>  = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&#x27;i == %d&#x27;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p><code>continue</code>语句：</p>
<ol>
<li><code>continue</code> 表示： 继续、go、on、下一个</li>
<li><code>continue</code> 也是一个 <code>continue</code> 关键字，加一个分号(;)可以构成一个单独的语句: <code>continue;</code></li>
<li><code>break</code> 和 <code>continue</code> 的区别（用在循环语句中）：<ul>
<li><code>break</code> 可以终止当前整个循环语句</li>
<li><code>continue</code> 可以终止、跳出当前循环，但是整个循环语句不会终止</li>
</ul>
</li>
</ol>
<p>下列程序，如果 i 等于 3，那么跳过当前循环执行下一个循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span>  = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&#x27;i == %d&#x27;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>41、关于java中的类加载器</title>
    <url>/2022/01/02/41%E3%80%81%E5%85%B3%E4%BA%8Ejava%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h2 id="什么是类加载器？"><a href="#什么是类加载器？" class="headerlink" title="什么是类加载器？"></a>什么是类加载器？</h2><p>类加载器是专门负责加载类的命令或者说工具</p>
<p><strong>ClassLoader</strong></p>
<h2 id="java中的3个类加载器"><a href="#java中的3个类加载器" class="headerlink" title="java中的3个类加载器"></a>java中的3个类加载器</h2><p>JDK中自带了3个类加载器</p>
<ol>
<li>启动类加载器</li>
<li>扩展类加载器</li>
<li>应用类加载器</li>
</ol>
<hr>
<p>假设有这样一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>代码在开始执行之前，会将所需要的类全部加载到JVM当中。通过类加载器加载。</p>
<p>看到以上代码类加载器会去找String.class文件，找到就加载，那么是怎么进行加载的呢？</p>
<ul>
<li><p>首先通过“启动类加载器”加载。<br>  <strong>“启动类加载器”专门加载jre&#x2F;lib&#x2F;rt.jar包下的类，rt.jar都是JDK中最核心的类库。</strong></p>
</li>
<li><p>如果通过“启动类加载器”加载不到的时候，会通过“扩展类加载器”加载。</p>
<p>  <strong>“扩展类加载器”专门加载jre&#x2F;lib&#x2F;ext目录下的class文件</strong></p>
</li>
<li><p>如果“扩展类加载器”没有加载到时，那么会通过“应用类加载器”加载。<br><strong>“应用类加载器”专门加载：classpath中的jar包（class）</strong></p>
</li>
</ul>
<hr>
<p>java中为了保证类加载的安全，使用了双亲委派机制。优先从“启动类加载器”中加载，这个称为“父”，“父”无法加载到，再从“扩展类加载器”中加载，这个称为“母”。双亲委派。如果都加载不到，才会考虑从“应用类加载器”中加载，直到加载到为止。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>40、Java 多线程</title>
    <url>/2022/01/02/40%E3%80%81Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="什么是进程？什么是线程？"><a href="#什么是进程？什么是线程？" class="headerlink" title="什么是进程？什么是线程？"></a>什么是进程？什么是线程？</h2><ol>
<li><p>进程是一个应用程序。</p>
</li>
<li><p>线程是一个进程中的执行场景、执行单元。一个进程可以启动多个线程</p>
</li>
<li><p>对于Java程序来说，当在DOS命令窗口输入：java Hello World回车之后，会先启动JVM，而JVM就是一个进程。JVM再启动一个主线程调用main方法。同时再启动一个垃圾回收线程负责看护，回收垃圾。</p>
</li>
<li><p>使用了多线程机制之后，main方法结束，是不是有可能程序也不会结束。main方法结束只是主线程结束了，主栈空了，其它的栈（线程）可能还在压栈弹栈。</p>
<blockquote>
<p>进程A和进程B的内存独立不共享</p>
<p>在java语言中：线程A和线程B，堆内存和方法区内存共享。但是栈内存独立，一个线程一个栈。</p>
</blockquote>
<p> <img src="http://qiniu-note-image.ctong.top/note/images/image-fcc7160104824cb5b20facbca02b58b5.png" alt="多线程内存结构图"></p>
</li>
<li><p>对于单核的CPU来说，真的可以做到真正的多线程并发吗？对于多核的CPU来说，真正的多线程并发是没问题的，4核CPU表示同一个时间点上，可以真正的有4个进程并发执行。</p>
<p><strong>什么是多线程并发？</strong></p>
<p>t1线程执行t1的，t2线程执行t2的，它们不会相互影响，这叫做真正的多线程并发。对于单核CPU来说，在某一个时间点上实际上只能处理一件事情，但是由于CPU的处理速度极快，多个线程之间频繁切换执行，给人的感觉是多个事情同时在做。</p>
<p><strong>单核CPU表示只有一个大脑：</strong></p>
<p>不能够做到真正的多线程并发，但是可以做到给人一种“多线程并发”的感觉。</p>
<blockquote>
<p>电影院采用交卷播放电影，一个交卷一个交卷播放速度达到一定程度之后，人类的眼睛产生了错觉，感觉是动画的，这说明人类的反应速度很慢。</p>
</blockquote>
</li>
</ol>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>java语言中，实现线程有两种方式</p>
<h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p> 编写一个类，直接继承<strong>java.lang.Thread</strong>，重写<code>run</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">    <span class="comment">// 启动线程</span></span><br><span class="line">    myThread.start();</span><br><span class="line">    <span class="type">int</span> <span class="variable">forCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; forCount; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;主线程打印=======》》》》&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">forCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; forCount; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;分支线程打印=======》》》》&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>start() 方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后瞬间就结束了。这段代码的任务只是为了开辟一个新的栈空间，只要新的栈空间开出来，start() 方法就结束了，启动成功的线程会自动调用run方法，并且run方法在分支栈的栈底部（压栈）。run方法在 分支栈的栈底部，main方法在主栈的栈底部，它们两是平级的！</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-428c0fc525a94f668b2a9c194cfeba81.png" alt="执行结果"></p>
<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>编写一个类实现java.lang.Runable接口<br> 这还只是一个可运行的类，它还不是一个线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 需要使用<code>Thread</code>封装成一个线程对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable);</span><br></pre></td></tr></table></figure>

<p>启动多线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t.start();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承其它的类，更灵活。</p>
</blockquote>
<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><ol>
<li>新建状态</li>
<li>准备状态</li>
<li>运行状态</li>
<li>阻塞状态</li>
<li>死亡状态</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-faad6930b5514002a557978eae51425e.png" alt="线程生命周期"></p>
<h2 id="获取线程对象名字"><a href="#获取线程对象名字" class="headerlink" title="获取线程对象名字"></a>获取线程对象名字</h2><p>现在有一个线程对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mt);</span><br></pre></td></tr></table></figure>

<p>设置它的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t.setName(<span class="string">&quot;我的小线程！！&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>打印输出这个线程对象的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t.getName()</span><br></pre></td></tr></table></figure>

<p>–  <code>我的小线程！！</code></p>
<p>如果不使用<code>setName</code>方法设置线程的名字，那么它也会有一个默认名字</p>
<p><strong>Thread-0</strong></p>
<p>这个默认线程的名字以**Thread-**与当前进程的线程数组成，这个线程数以0开始，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thread-0、Thread-1、Thread-2、Thread-3</span><br></pre></td></tr></table></figure>



<h2 id="获取当前线程对象"><a href="#获取当前线程对象" class="headerlink" title="获取当前线程对象"></a>获取当前线程对象</h2><p>可以使用<code>Thread</code>对象中的<code>currentThread</code>方法来获取当前线程对象，这是一个静态方法，返回一个<code>Thread</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; forCount; i++) &#123;</span><br><span class="line">  System.out.println(thread.getName() + <span class="string">&quot;=======》》》》&quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>我的小线程！！=======》》》》0</code></p>
<h2 id="线程的sleep方法"><a href="#线程的sleep方法" class="headerlink" title="线程的sleep方法"></a>线程的sleep方法</h2><p>关于线程的sleep方法：</p>
<p>static void sleep(long illis)</p>
<ol>
<li>静态方法</li>
<li>参数是毫秒</li>
<li>作用：让当前线程进入休眠，进入“阻塞状态”，放弃占有CPU时间片，让给其他线程使用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;准备开始睡眠！&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Thread.sleep(millis);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;线程休眠结束！！！&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p><code>t.sleep</code>会让线程<strong>t</strong>进入休眠状态吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">5</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;准备开始睡眠！&quot;</span>);</span><br><span class="line">    <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">    t.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">    t.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      t.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">forCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; forCount; i++) &#123;</span><br><span class="line">      System.out.println(thread.getName() + <span class="string">&quot;=======》》》》&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案是不会，因为<code>sleep</code>是<strong>静态方法</strong>，它跟对象没有半毛钱关系，在执行的时候还是会转换成 <code>Thread.sleep(millis)</code>，这行代码的作用是：让当前线程进入休眠状态，也就是说main线程会进入休眠状态。</p>
<h2 id="终止线程的睡眠"><a href="#终止线程的睡眠" class="headerlink" title="终止线程的睡眠"></a>终止线程的睡眠</h2><p>sleep睡眠太久了，如何唤醒一个正在睡眠的线程？</p>
<blockquote>
<p>run()当中的异常不能throws，只能try…catch。因为子类不能比父类抛出更多的异常。或者说重写之后的方法不能比重写之前的方法抛出更多（更宽泛）的异常，可以更少。run()方法在父类中没有抛出任何异常</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">TestSleep</span> <span class="variable">testSleep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSleep</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testSleep);</span><br><span class="line">    thread.setName(<span class="string">&quot;沉睡中的线程&quot;</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;5秒后叫醒沉睡的线程！！！&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这里唤醒线程</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestSleep</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;进入沉睡！！&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;我被叫醒起来干活了！！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><p>可以使用<code>interrupt</code>方法来终断线程，这种方式是依靠了java的异常处理机制来唤醒线程，相当于你在睡觉，我直接给你泼一盆冷水过去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread.interrupt();</span><br></pre></td></tr></table></figure>

<p>这个代码执行之后，<code>TestSleep</code>中的<code>Thread.sleep(millis);</code>受到了干扰出现了异常，这个异常被<code>try</code>抓住之后就被结束掉了，catch执行过后try…catch结束开始继续执行下边的代码。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-17bec6a0476d4ec8ac96e6a1c300d90d.png" alt="interrupt执行结果"></p>
<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>如果需要强行终止一个线程的执行，可以使用<code>stop</code>方法强行终止该线程（此方法已过时，不建议使用），这个stop不是终止线程睡眠，而是强制干掉指定线程。如果使用stop强行终止线程，则极大概率造成数据丢失、损坏等严重后果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">TestSleep</span> <span class="variable">testSleep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSleep</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testSleep);</span><br><span class="line">    thread.setName(<span class="string">&quot;执行中的线程&quot;</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;3秒后叫杀死线程！！！&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    thread.stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestSleep</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> ;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行中的线程-----&gt; &quot;</span> + i);</span><br><span class="line">        Thread.sleep(millis);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何合理的终止一个线程？</p>
<p>可以使用标记的方式结束一个正在执行的线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">TestSleep</span> <span class="variable">testSleep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSleep</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testSleep);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;3秒后杀死线程！！！&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    testSleep.run = <span class="literal">false</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;thread kill&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestSleep</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个标记，用来结束这个线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">run</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.run) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">millis</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">          System.out.println(<span class="string">&quot;执行-----&gt;&quot;</span> + i);</span><br><span class="line">          Thread.sleep(millis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里处理结束线程之前需要执行的某些操作、例如保存数据等</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="线程调度概述"><a href="#线程调度概述" class="headerlink" title="线程调度概述"></a>线程调度概述</h2><ol>
<li><p>常见的线程调度模型有哪些？</p>
<ul>
<li>抢占式调度模型：哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些&#x2F;多一些。java采用的就是抢占式调度模型。</li>
<li>均分式调度模型：平均分配CPU时间片。每个线程占有的CPU时间片时间长短一样。平均分配，一切平等。</li>
</ul>
</li>
<li><p>Java中提供了哪些方法是和线程调度有关系的呢？</p>
<ul>
<li><p>实例方法：</p>
<ol>
<li><p><code>void setPrioriry(int new Prioriry)</code>设置线程的优先级</p>
</li>
<li><p><code>int getPriority()</code>获取线程优先级,最低优先级1，默认优先级5，最高优先级是10，优先级比较高的获得CPU时间片可能比较多一些（但也不完全是，大概率是多的）。</p>
</li>
<li><p><code>void join()</code>合并线程，使当前线程进入阻塞状态，t线程执行，直到t线程结束，当前线程才可以继续执行，例如代码是这样的情况下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyThread1</span> <span class="variable">myThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread1);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      t.start();</span><br><span class="line">      t.join(); <span class="comment">// 使当前线程进入阻塞，t开始执行</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;main ----&gt; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;run ----&gt; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>静态方法</p>
<ol>
<li><p><code>static void yield()</code> 暂停当前正在执行的线程对象，并执行其他线程（让位方法）。yield方法不是阻塞方法，让当前线程让位，让给其他线程使用。yield方法的执行会让当前线程从<strong>“运行状态”</strong>回到<strong>“就绪状态”</strong></p>
<blockquote>
<p>回到就绪状态之后有可能还会再抢到时间片</p>
</blockquote>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-ac178fc547e84b62a87a0930a88cd6b0.png" alt="线程yield"></p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>关于线程的优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;线程最大优先级：&quot;</span> + Thread.MAX_PRIORITY);</span><br><span class="line">System.out.println(<span class="string">&quot;线程默认优先级：&quot;</span> + Thread.NORM_PRIORITY);</span><br><span class="line">System.out.println(<span class="string">&quot;线程最小优先级：&quot;</span> + Thread.MIN_PRIORITY);</span><br></pre></td></tr></table></figure>

<p>– <code>线程最大优先级：10</code><br>– <code>线程默认优先级：5</code><br>– <code>线程最小优先级：1</code></p>
<p>设置进程优先级，优先级高的CPU时间片多一些，是指线程处于运行状态的时间多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPriority</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thisThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    System.out.println(<span class="string">&quot;设置之前：&quot;</span> + thisThread.getPriority());</span><br><span class="line">    thisThread.setPriority(<span class="number">10</span>);</span><br><span class="line">    thisThread.getPriority();<span class="comment">// 当前线程优先级</span></span><br><span class="line">    System.out.println(<span class="string">&quot;设置之后：&quot;</span> + thisThread.getPriority());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>– <code>设置之前：5</code><br>– <code>设置之后：10</code></p>
<h3 id="线程让位"><a href="#线程让位" class="headerlink" title="线程让位"></a>线程让位</h3><p>让位，当前线程暂停，回到就绪状态，让给其它线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.<span class="keyword">yield</span>();</span><br></pre></td></tr></table></figure>

<p>让位回到就绪状态之后，有可能还会抢到CPU时间片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYield</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">YieldThread</span> <span class="variable">yieldThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YieldThread</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(yieldThread);</span><br><span class="line">    t.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i % <span class="number">100</span>) &#123;</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;main ----&gt; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YieldThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;run ----&gt; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/image-ac178fc547e84b62a87a0930a88cd6b0-20211227102835587.png" alt="线程生命周期-yield"></p>
<h3 id="合并线程"><a href="#合并线程" class="headerlink" title="合并线程"></a>合并线程</h3><p>join方法可以将<code>t</code>线程合并到当前线程中，当前线程受阻塞，<code>t</code>线程执行直到结束。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyThread1</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread start!&quot;</span>);</span><br><span class="line">    t.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      t.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread over!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;run ----&gt; &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>main thread start!</code><br>– <code>run ----&gt; 0</code><br>– <code>run ----&gt; 1</code><br>– <code>run ----&gt; 2</code><br>– <code>main thread over!</code></p>
<blockquote>
<p>线程合并不是意味着两个线程合并成了一个线程，而是两个线程之前发生了等待关系。</p>
</blockquote>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ol>
<li><p>为什么这个是重点？<br>以后在开发中，我们的项目都是运行在服务器当中，而服务器已经将线程对象的创建、线程的启动等，都已经实现完成了。这些代码都不需要编写。最重要的是我们要知道，我们编写的程序需要放到一个多线程的环境下运行，你更需要关注的是这些数据在多线程并发的环境下是否是安全的。</p>
</li>
<li><p>什么时候数据在多线程并发的环境下会存在安全问题？</p>
<ol>
<li>多线程并发</li>
<li>有共享数据</li>
<li>共享数据有修改的行为</li>
</ol>
<p>满足以上三个条件之后就会存在线程安全问题。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-ffd3735a179643adb0831bdf779b1f11.png" alt="造成线程安全原理图"></p>
<iframe src="//player.bilibili.com/player.html?aid=93347594&bvid=BV1mE411x7Wt&cid=163966574&page=305" scrolling="no" width="100%" style='height: -webkit-fill-available' border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</li>
<li><p>怎么解决线程安全问题呢？</p>
<p>当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在线程安全问题，怎么解决这个问题？</p>
<ul>
<li><p>线程排队执行。（不能并发）。用排队执行解决线程安全问题，这种机制被称为：线程同步机制。</p>
</li>
<li><p>专业术语叫做：线程同步，实际上就是线程不能并发了，线程必须排队执行。</p>
</li>
<li><p>使用<strong>线程线程同步机制</strong>解决这个问题，线程同步就是线程排队了，线程排队了就会牺牲一部分效率</p>
</li>
</ul>
</li>
<li><p>说到线程同步这块，涉及到这两个专业术语：</p>
<ul>
<li>异步编程模型：<br>线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做：异步编程模型。其实就是：多线程并发（效率较高。）</li>
<li>同步编程模型：<br>线程t1和线程t2，在线程t1执行的时候，必须等待t2执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型，效率较低。线程排队执行</li>
</ul>
</li>
</ol>
<h3 id="synchronized-关键字-–-线程同步机制"><a href="#synchronized-关键字-–-线程同步机制" class="headerlink" title="synchronized 关键字 – 线程同步机制"></a>synchronized 关键字 – 线程同步机制</h3><p>线程同步的语法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> () &#123;</span><br><span class="line">  <span class="comment">// 线程同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized后面小括号中传的这个数据是相当关键的。这个数据必须是多线程共享的数据。才能达到多线程排队。小括号中写什么那主要是看你想要哪些线程同步了。</p>
<p>假有：t1、t2、t3、t4、t5，有五个线程，你只希望t1、t2、t3排队，t4、t5不需要排队怎么办？</p>
<ul>
<li><p>只需要在小括号中写一个：t1、t2、t3共享的对象。而这个对象对t4、t5来说不是共享的。</p>
<p>例如有一个账户类，类中的金额这个数据是共享的，这个类还有一个取款方法（<code>withbraw</code>中加<code>sleep</code>是为了模拟网络延迟）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String Name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    Name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.balance = balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取款</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withbraw</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">before</span> <span class="operator">=</span> getBalance();</span><br><span class="line">      <span class="type">double</span> <span class="variable">after</span> <span class="operator">=</span> before - money;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      setBalance(after);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于以上程序来说，这是相当危险的操作，因为<code>sleep</code>模拟网络延迟之后，无法调用<code>setBalance</code>方法去修改金额，第二个线程进来的时候金额还是<code>1000</code>，导致两个人对同一个账户取款5000时还剩下5000，如果加上线程同步就不会发生这种问题，因为某个线程在执行的时候其他线程在后面排队</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withbraw</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="variable">before</span> <span class="operator">=</span> getBalance();</span><br><span class="line">    <span class="type">double</span> <span class="variable">after</span> <span class="operator">=</span> before - money;</span><br><span class="line">    setBalance(after);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在java语言中，任何一个对象都有**”一把锁”**，其实这把锁就是一个标记。(只是把它叫做锁)，100个对象100把锁，一个对象一把锁。</p>
</li>
<li><p>以上代码的执行原理？</p>
<ol>
<li>假设t1和t2线程并发，开始执行以上代码的时候，肯定有一个先一个后。</li>
<li>假设t1先执行了，遇到了<code>synchronized</code>的时候自动找“后面共享对象”的对象锁，找到之后，并占有这把锁，然后执行同步代码块中的程序，在程序执行过程中占有这把锁的。直到同步代码块执行结束，这把锁才会释放。</li>
<li>假设t1已经占有这把锁，此时t2也遇到了<code>synchronized</code>关键字，也会去占有后面共享对象的这把锁，结果这把锁被t1占有，t2只能在同步代码块外面等待t1的结束，直到t1把同步代码块执行结束，t1会归还这把锁，此时t2终于等到这把锁，然后t2占有这把锁之后，进入同步代码执行程序。</li>
</ol>
<blockquote>
<p>这样就达到了线程排队执行</p>
<p>这里需要注意的是：这个共享对象一定要选好。这个共享对象一定是你需要排队执行的这些线程对象共享的。</p>
</blockquote>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-1b76c2ef7b0a43c5bb7e1e814cb23ec1.png" alt="线程生命周期-synchronized"></p>
<ol start="4">
<li><p>Java中有三大变量？</p>
<ul>
<li>实例变量：在堆中</li>
<li>静态变量：在方法区</li>
<li>局部变量：在栈中</li>
</ul>
<blockquote>
<p>以上三大变量中，局部变量永远都不会存在线程安全问题。因为局部变量不共享。一个线程一个栈，局部变量在栈中。</p>
<p>实例变量在堆中，堆只有一个。</p>
<p>静态变量在方法区中，方法区只有一个。</p>
<p>堆和方法区都是多线程共享的，所以可能存在线程安全问题。</p>
</blockquote>
</li>
<li><p>同步代码块越小效率越高。</p>
</li>
<li><p>在实例方法上可以使用<code>synchronized</code><br>synchronized出现在实例方法上，一定锁的是this，也只能是this。不能再是其他对象了，所以这种方式不灵活。</p>
<p>另外还有一个缺点：synchronized出现在实例方法上，表示整个方法体都需要同步，可能会无故扩大同步的范围，导致程序的执行效率降低。所以这种方式不常用</p>
</li>
<li><p>synchronized有三种写法：</p>
<ul>
<li><p>同步代码块，比较灵活</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(线程共享对象) &#123;</span><br><span class="line">  同步代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在实例方法上使用synchronized</p>
<p>表示共享对象一定是this，并且同步代码块是整个方法体。</p>
</li>
<li><p>在静态方法上使用synchronized<br>表示找类锁<br>类锁永远只有一把，就算创建了100个对象，那类锁也只有一把。</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><p>死锁会导致程序不出异常，也不会出现错误，程序一直僵持在那里，这种错误最难调试。</p>
<h3 id="死锁简单代码"><a href="#死锁简单代码" class="headerlink" title="死锁简单代码"></a>死锁简单代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">MyThread2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>(o1, o2);</span><br><span class="line">    <span class="type">MyThread3</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread3</span>(o1, o2);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  Object o1;</span><br><span class="line">  Object o2;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyThread2</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.o1 = o1;</span><br><span class="line">    <span class="built_in">this</span>.o2  = o2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  Object o1;</span><br><span class="line">  Object o2;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyThread3</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.o1 = o1;</span><br><span class="line">    <span class="built_in">this</span>.o2  = o2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread3&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>synchronized在开发中最好不要嵌套使用，一不小心就可能导致死锁现象发生。</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在开发中是一上来就选择线程同步吗？synchronized，不是，synchronized会让程序执行效率降低，用户体验不好。 </p>
<ol>
<li>尽量使用局部变量来代替“实例变量和静态变量”</li>
<li>如果必须是实例变量，那么可以考虑创建多个对象，这样实例变量的内存就不共享里。（一个线程对应一个对象，100个线程对应100个对象，对象不共享，就没有数据安全问题了。）</li>
<li>如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择synchronized了，线程同步机制。</li>
</ol>
<h2 id="线程相关内容"><a href="#线程相关内容" class="headerlink" title="线程相关内容"></a>线程相关内容</h2><ol>
<li><p>守护线程</p>
<p>Java语言中线程分为两大类：</p>
<ol>
<li><p>用户线程</p>
<p>主线程<code>main</code>方法是一个用户线程。</p>
</li>
<li><p>守护线程（后台线程）<br>其中具有代表性的就是：gc垃圾回收线程。</p>
<h4 id="守护线程的特点"><a href="#守护线程的特点" class="headerlink" title="守护线程的特点"></a>守护线程的特点</h4><p>一般守护线程是一个死循环，所有的用户线程只要结束，守护线程自动结束。</p>
<h4 id="守护线程用在什么地方呢？"><a href="#守护线程用在什么地方呢？" class="headerlink" title="守护线程用在什么地方呢？"></a>守护线程用在什么地方呢？</h4><p>守护线程的目的是守护，比如每天00:00的时候系统数据自动备份，这个需要使用到定时器，并且我们可以将定时器设置为守护线程。一直在那里看着，每到00:00的时候开始备份一次。</p>
<h4 id="设置守护线程"><a href="#设置守护线程" class="headerlink" title="设置守护线程"></a>设置守护线程</h4><p>在启动之前将线程设置为守护线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(...);</span><br><span class="line">t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure>

<p>即使是死循环，但由于该线程是守护者，当用户线程结束，守护线程自动终止。</p>
</li>
</ol>
</li>
<li><p>定时器<br>间隔特定的时间去做特定的事。</p>
<p>比如每周要进行银行账户的总帐操作。每天要进行数据的备份操作。在实际开发中，每隔多久执行一段特定的程序，这种需求是很常见的，那么在java中其实可以采用很多种方法实现</p>
<ol>
<li>可以使用sleep方法，睡眠，设置睡眠时间，每到这个点醒来，执行任务，这种方式是最原始的。</li>
<li>在java的类库中已经写好了一个定时器：java.util.Timer，不过这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持定时任务的。</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTimer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">logTimerTask</span> <span class="variable">logTimerTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">logTimerTask</span>();</span><br><span class="line">    <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="string">&quot;记录日志&quot;</span>);</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-d HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Date</span> <span class="variable">da</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2020-11-03 23:52:00&quot;</span>);</span><br><span class="line">      timer.schedule(logTimerTask,da, <span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">logTimerTask</span> <span class="keyword">extends</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始记录！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>实现线程的第三种方式：FutrueTask方式，实现Callable接口。（JDK8新特性）<br>这种方式实现的线程可以获取线程的返回值，之前写的那几种方式是无法获取线程的返回值，因为run方法返回void</p>
<h4 id="实现线程的第三种方式"><a href="#实现线程的第三种方式" class="headerlink" title="实现线程的第三种方式"></a>实现线程的第三种方式</h4><p>创建一个未来任务类对象</p>
<p><code>java.util.concurrent.FutureTask</code>JUC包下的，属于java的并发包，老JDK中没有这个包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FutureTask</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(<span class="keyword">new</span> <span class="title class_">Callable</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// call 方法就相当于run方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用这个未来任务类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FutureTask</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(...);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure>

<p>使用FutureTask中的get方法来获取线程的返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FutureTask</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(...);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">t.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ft.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用get方法之后会阻塞当前线程，而get方法可能需要很久。因为get方法是为了拿另一个线程的执行结果，另一个线程执行是需要时间的。</strong></p>
</li>
<li><p>关于Object类中的wait和notify方法（生产者和消费者模式）</p>
<ul>
<li><p>wait和notify不是线程对象的方法，是java中任何一个对象都有的方法，因为这两个方法是Object类中自带的。</p>
</li>
<li><p>wait方法的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Obect</span>();</span><br><span class="line">o.wait();</span><br></pre></td></tr></table></figure>

<p>表示让正在o对象上活动的线程进入等待状态，无期限等待，直到被唤醒为止。（当前线程）</p>
<p><strong>o.wait();方法会让正在o对象上活动的当前线程对象进入等待状态，并且释放之前占有的o对象的锁</strong></p>
</li>
<li><p>notify方法的作用</p>
<p>T线程在o线程上活动，T线程是当前线程对象。当调用o.wait方法之后。T线程进入无期限等待。当前线程进入等待状态，直到最终调用notify方法。o.notify方法的调用可以让正在o对象上等待的线程唤醒。<br><code>o.notify();</code></p>
<p><strong>表示唤醒正在o对象上等待的线程。</strong></p>
</li>
</ul>
<h3 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h3><p>生产者和消费者模式是为了专门解决某个特定需求的。</p>
<p>一个线程负责生产，一个线程负责消费，而且还要达到生产和消费必须均衡。例如：</p>
<p>生产满了，就不能再继续生产了，必须让消费线程进行消费。消费完了，就不能消费了，必须让生产线程进行生产</p>
<blockquote>
<p>wait方法和notify方法建立在synchronized线程同步的基础之上。</p>
</blockquote>
</li>
</ol>
<p> <a href="https://github.com/Clover-You/my-blog-file/blob/main/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81.zip">点击下载「生产者和消费者模式」的学习代码</a></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>42、java反射机制</title>
    <url>/2022/01/02/42%E3%80%81java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h1><h2 id="反射机制有什么用"><a href="#反射机制有什么用" class="headerlink" title="反射机制有什么用"></a>反射机制有什么用</h2><p>通过java语言中的反射机制可以操作字节码文件。通过反射机制可以操作代码片段。（class文件）</p>
<h2 id="反射机制相关类"><a href="#反射机制相关类" class="headerlink" title="反射机制相关类"></a>反射机制相关类</h2><h3 id="java反射机制的相关类在哪个包下？"><a href="#java反射机制的相关类在哪个包下？" class="headerlink" title="java反射机制的相关类在哪个包下？"></a>java反射机制的相关类在哪个包下？</h3><p>java的反射机制在 java.lang.reflect.*这个包下</p>
<h3 id="java反射机制相关的重要的类有哪些？"><a href="#java反射机制相关的重要的类有哪些？" class="headerlink" title="java反射机制相关的重要的类有哪些？"></a>java反射机制相关的重要的类有哪些？</h3><ul>
<li><p>java.lang.Class<br>代表字节码文件，代表一个类型、代表整个类</p>
</li>
<li><p>java.lang.reflect.Method<br>代表字节码中的方法，代表类中的方法</p>
</li>
<li><p>java.lang.reflect.Constructor<br>代表字节码中的构造方法字节码，代表类中的构造方法</p>
</li>
<li><p>java.lang.reflect.Field</p>
<p>代表字节码中的属性字节码。代表类中的成员变量（静态变量和实例变量）</p>
</li>
</ul>
<h2 id="获取Class的三种方式"><a href="#获取Class的三种方式" class="headerlink" title="获取Class的三种方式"></a>获取Class的三种方式</h2><p>需要操作一个类的字节码，首先需要获取到这个类的字节码，怎么获取<code>java.lang.Class</code>实例?</p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><code>Class.forName()</code></p>
<ol>
<li>静态方法</li>
<li>方法的参数是一个字符串</li>
<li>字符串需要的是一个完整的类名。</li>
<li>完整类名必须带有包名。即使是在<code>java.lang</code>包下的也不能省略</li>
</ol>
<blockquote>
<p>Class.forName方式，会导致这个类被加载（加载到方法区）</p>
</blockquote>
<p>通过类名获取到这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;learnClass.TestClass&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>clazz代表的是<code>TestClass</code>类型</p>
<p>TestClass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> learnClass;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，需要处理<code>ClassNotFoundException</code>异常，这是一个编译时异常。</p>
</blockquote>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>java中任何一个对象都有一个方法：getClass();这个方法是在<code>java.lang.Object</code>包下的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TestClass</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> tc.getClass();</span><br></pre></td></tr></table></figure>

<p>如果使用<code>==</code>来比较两个相同类型的<code>Class</code>，那么它们的结果为<code>true</code>，因为它们保存的内存地址是一样的，都指向方法区中的节码文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;learnClass.TestClass&quot;</span>);</span><br><span class="line">  <span class="type">TestClass</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line">  <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> tc.getClass();</span><br><span class="line">  System.out.println(clazz == clazz2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>true</code></p>
<h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>java语言中任何一种数据类型，包括基本数据类型，它都有<code>.class</code>属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> TestClass.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="type">int</span>.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">void</span>.class;</span><br></pre></td></tr></table></figure>



<h2 id="通过反射实例化对象"><a href="#通过反射实例化对象" class="headerlink" title="通过反射实例化对象"></a>通过反射实例化对象</h2><p>通过反射机制获取Class，通过Class来实例化对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TestClass</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造方法已执行！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> TestClass.class;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br></pre></td></tr></table></figure>

<p>newInstance这个方法返回的是一个范型，这个方法会调用TestClass这个类的无参数构造方法，完成对象的创建。</p>
<p>– <code>构造方法已执行！</code></p>
<p>如果需要实例化的对象需要一个参数才能完成实例化，那么会出现一个实例化异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.InstantiationException: learnClass.TestClass</span><br><span class="line">  at java.lang.Class.newInstance(Class.java:<span class="number">427</span>)</span><br><span class="line">  at learnClass.ClassForName.main(ClassForName.java:<span class="number">13</span>)</span><br><span class="line">  Caused by: java.lang.NoSuchMethodException: learnClass.TestClass.&lt;init&gt;()</span><br><span class="line">    at java.lang.Class.getConstructor0(Class.java:<span class="number">3082</span>)</span><br><span class="line">    at java.lang.Class.newInstance(Class.java:<span class="number">412</span>)</span><br><span class="line">    ... <span class="number">1</span> more</span><br></pre></td></tr></table></figure>

<blockquote>
<p>newInstance()方法内部实际上调用了无参数构造方法，必须保证无参数构造存在才可以。</p>
</blockquote>
<h2 id="Class-forName发生了什么？"><a href="#Class-forName发生了什么？" class="headerlink" title="Class.forName发生了什么？"></a>Class.forName发生了什么？</h2><p>例如用forName方式获取TestClass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(TestClass.class.getName() + <span class="string">&quot;开始加载！！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;learnClass.TestClass&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>learnClass.TestClass开始加载！！</code></p>
<p>经过以上测试，<strong>forName导致类加载</strong>。</p>
<p>如果你只是希望一个类的静态代码块执行，其它代码一律不执行，可以采用：<code>Class.forName();</code>。</p>
<h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><h3 id="获取Field"><a href="#获取Field" class="headerlink" title="获取Field"></a>获取Field</h3><p>Field翻译为字段，其实就是属性、成员</p>
<p>4个Field，分别采用了不同的访问控制权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="type">boolean</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><p>获取类名<code>getSimpleName</code>获取的是简类名，而<code>getName</code>获取的是完整类名（带包名）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">System.out.println(clazz.getSimpleName());</span><br><span class="line">SYstem.out.pritnln(clazz.getName());</span><br></pre></td></tr></table></figure>

<p>– <code>Student</code></p>
<p>– <code>reflect.Student</code></p>
<h3 id="获取类中所有的Field"><a href="#获取类中所有的Field" class="headerlink" title="获取类中所有的Field"></a>获取类中所有的Field</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line"><span class="comment">// 获取类中所有 的Filed</span></span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line">System.out.println(fields.length);</span><br></pre></td></tr></table></figure>

<p>– <code>1</code></p>
<h3 id="取出这个Field的名字"><a href="#取出这个Field的名字" class="headerlink" title="取出这个Field的名字"></a>取出这个Field的名字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">fieldFirstName</span> <span class="operator">=</span> fields[<span class="number">0</span>].getName();</span><br><span class="line">System.out.println(fieldFirstName);</span><br></pre></td></tr></table></figure>

<p>– <code>no</code></p>
<p>使用<code>getDeclaredFields</code>获取Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fs = clazz.getDeclaredFields();</span><br><span class="line">System.out.println(fs.length);</span><br></pre></td></tr></table></figure>

<p>– <code>4</code></p>
<blockquote>
<p>getFields()只能获取被<code>public</code>修饰的Field，而<code>getDeclaredFields();</code>可以获取任意修饰符的Field</p>
</blockquote>
<h3 id="查看获取到的Field的名字"><a href="#查看获取到的Field的名字" class="headerlink" title="查看获取到的Field的名字"></a>查看获取到的Field的名字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line"><span class="comment">// 获取类中所有 的Filed</span></span><br><span class="line">Field[] fs = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">  System.out.println(field.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>no</code><br>– <code>name</code><br>– <code>age</code><br>– <code>sex</code></p>
<h3 id="获取FIeld类型"><a href="#获取FIeld类型" class="headerlink" title="获取FIeld类型"></a>获取FIeld类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">Field[] fs = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">fieldType</span> <span class="operator">=</span> field.getType();</span><br><span class="line">  System.out.println(fieldType.getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>int</code></p>
<p>– <code>String</code></p>
<p>– <code>int</code></p>
<p>– <code>boolean</code></p>
<h3 id="获取修饰符列表"><a href="#获取修饰符列表" class="headerlink" title="获取修饰符列表"></a>获取修饰符列表</h3><p>返回的修饰符是一个数字，每个数字都是修饰符的代号！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">Field[] fs = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">  System.out.println(field.getModifiers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>1</code><br>– <code>2</code><br>– <code>4</code><br>– <code>0</code></p>
<p>可以使用<code>Modifier</code>这个类将这个代号转为对应修饰符的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">System.out.println(clazz.getSimpleName());</span><br><span class="line">Field[] fs = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">modifier</span> <span class="operator">=</span> field.getModifiers();</span><br><span class="line">  <span class="type">String</span> <span class="variable">modifierName</span> <span class="operator">=</span> Modifier.toString(modifier);</span><br><span class="line">  System.out.println(modifierName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>public</code><br>– <code>private</code><br>– <code>protected</code></p>
<p>– <code> </code></p>
<h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>通过反射机制来反编译一个类的Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="type">boolean</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将类结构大致模拟出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="comment">// 获取到修饰符名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classModifierName</span> <span class="operator">=</span> Modifier.toString(clazz.getModifiers());</span><br><span class="line">sb.append(classModifierName + <span class="string">&quot; class &quot;</span>);</span><br><span class="line">sb.append(clazz.getSimpleName());</span><br><span class="line">sb.append(<span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure>

<p>– <code>public class Student &#123; &#125;</code></p>
<p>设置类体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="comment">// 获取到修饰符名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classModifierName</span> <span class="operator">=</span> Modifier.toString(clazz.getModifiers());</span><br><span class="line">sb.append(classModifierName + <span class="string">&quot; class &quot;</span>);</span><br><span class="line">sb.append(clazz.getSimpleName());</span><br><span class="line">sb.append(<span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">  sb.append(<span class="string">&quot;\n\t&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">fieldModifierName</span> <span class="operator">=</span> Modifier.toString(field.getModifiers());</span><br><span class="line">  <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">  sb.append(fieldModifierName + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  sb.append(field.getType().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  sb.append(fieldName);</span><br><span class="line">  sb.append(<span class="string">&quot;;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure>

<p>– <code>public final String &#123;</code></p>
<p>– <code>private final char[] value;</code></p>
<p>– <code>private int hash;</code></p>
<p>– <code>private static final long serialVersionUID;</code></p>
<p>– <code>private static final ObjectStreamField[] serialPersistentFields;</code></p>
<p>– <code>public static final Comparator CASE_INSENSITIVE_ORDER;</code></p>
<p>– <code>&#125;</code></p>
<h3 id="通过反射机制访问对象的属性"><a href="#通过反射机制访问对象的属性" class="headerlink" title="通过反射机制访问对象的属性"></a>通过反射机制访问对象的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="type">boolean</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>以下代码的obj对象就是上面这个实体</strong></p>
<p>怎么通过反射机制访问一个java对象的属性？</p>
<ul>
<li>给属性赋值set</li>
<li>获取属性的值get</li>
</ul>
<p>获取到需要访问的对象，让后将它实例化（以下代码obj就是Student对象，底层调用无参数构造方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  obj = clazz.newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取某个特定的属性，返回Field对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;no&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>给obj对象（Student对象）的对应属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">noField.set(obj, <span class="number">555555</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反射给对象赋值与我们平时实例化后赋值步骤一样。</p>
</blockquote>
<p>如果需要获取obj中某个属性的值，则使用get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">noField.set(obj, <span class="number">555555</span>);</span><br><span class="line">System.out.println(noField.get(obj));</span><br></pre></td></tr></table></figure>

<p>如果我们给私有属性设置值会发生什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">noField.set(obj, <span class="string">&quot;UpYou&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalAccessException: Class reflect.ReflectTest01 can not access a member of <span class="keyword">class</span> <span class="title class_">reflect</span>.Student with modifiers <span class="string">&quot;private&quot;</span></span><br><span class="line">  at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:<span class="number">102</span>)</span><br><span class="line">  at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:<span class="number">296</span>)</span><br><span class="line">  at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:<span class="number">288</span>)</span><br><span class="line">  at java.lang.reflect.Field.set(Field.java:<span class="number">761</span>)</span><br><span class="line">  at reflect.ReflectTest01.main(ReflectTest01.java:<span class="number">19</span>)</span><br></pre></td></tr></table></figure>

<p>因为被<code>private</code>修饰，所以即使是反射也是不允许被赋值的，那么该怎么办呢？<strong>“打破封装”</strong></p>
<p>使用<code>setAccessible(true);</code>打破封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">noField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">noField.set(obj, <span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">System.out.println(noField.get(obj));</span><br></pre></td></tr></table></figure>

<p>– <code>UpYou</code></p>
<blockquote>
<p>反射机制的缺点：打破封装，可能会给不法分子留下机会！！</p>
</blockquote>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> true 表示成功，false表示失败！</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String name, String password)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 系统注销</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;系统已经安全退出！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="获取Method"><a href="#获取Method" class="headerlink" title="获取Method"></a>获取Method</h3><p><code>getDeclaredMethods</code>获取全部方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.UserService&quot;</span>);</span><br><span class="line">Method[] userServiceClassMethods = userServiceClass.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : userServiceClassMethods) &#123;</span><br><span class="line">  System.out.println(method.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>logout</code><br>– <code>login</code></p>
<h3 id="获取返回值类型"><a href="#获取返回值类型" class="headerlink" title="获取返回值类型"></a>获取返回值类型</h3><p><code>getReturnType</code>获取一个方法的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.UserService&quot;</span>);</span><br><span class="line">Method[] userServiceClassMethods = userServiceClass.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : userServiceClassMethods) &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">methodReturnTypeName</span> <span class="operator">=</span> method.getReturnType().getSimpleName();</span><br><span class="line">  System.out.println(methodReturnTypeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>boolean</code></p>
<p>– <code>void</code></p>
<h3 id="获取方法参数类型"><a href="#获取方法参数类型" class="headerlink" title="获取方法参数类型"></a>获取方法参数类型</h3><p><code>getParameterTypes()</code>可获取一个方法的参数类型列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.UserService&quot;</span>);</span><br><span class="line">Method[] userServiceClassMethods = userServiceClass.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : userServiceClassMethods) &#123;</span><br><span class="line">  Class[] paraType = method.getParameterTypes();</span><br><span class="line">  <span class="keyword">for</span> (Class methodParameterType : paraType) &#123;</span><br><span class="line">    System.out.println(methodParameterType.getSimpleName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>String</code></p>
<p>– <code>String</code></p>
<h3 id="反射机制调用方法"><a href="#反射机制调用方法" class="headerlink" title="反射机制调用方法"></a>反射机制调用方法</h3><p>获取一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflect.UserService&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>实例化这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> userServiceClass.newInstance(); </span><br></pre></td></tr></table></figure>

<p>根据方法名获取需要调用的方法，获取一个方法不能只靠方法名，因为在java中有重载方法的机制（overload）。java中获取一个方法需要靠方法名和参数列表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">login</span> <span class="operator">=</span> userServiceClass.getMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class, <span class="type">int</span>.class);</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">isLogin</span> <span class="operator">=</span> login.invoke(obj, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(isLogin);</span><br></pre></td></tr></table></figure>

<p>– <code>true</code></p>
<blockquote>
<p>反射机制，让代码很具有通用性，可变化的内容都是些到配置文件当中，将来修改配置文件之后，创建的对象不一样了，调用的方法也不一样了，当是Java代码不需要做任何改动，这就是反射机制的魅力。</p>
</blockquote>
<h2 id="获取父类和父接口"><a href="#获取父类和父接口" class="headerlink" title="获取父类和父接口"></a>获取父类和父接口</h2><p>获取一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">vipSuperClass</span> <span class="operator">=</span> vipClass.getSuperclass();</span><br><span class="line">System.out.println(vipSuperClass.getSimpleName());</span><br></pre></td></tr></table></figure>

<p>– <code>Object</code></p>
<p>获取实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class[] vipInterfaces = vipClass.getInterfaces();</span><br><span class="line"><span class="keyword">for</span> (Class vipInterface : vipInterfaces) &#123;</span><br><span class="line">  System.out.println(vipInterface.getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>Serializable</code><br>– <code>Comparable</code><br>– <code>CharSequence</code></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>43、java注解</title>
    <url>/2022/01/02/43%E3%80%81java%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="java注解"><a href="#java注解" class="headerlink" title="java注解"></a>java注解</h1><ol>
<li>注解，或者叫注释，英文单词是：Annotation</li>
<li>注解是一种引用数据类型。编译之后也是生成xxx.class文件</li>
<li>怎么自定义一个注解呢？语法格式？<br>[修饰符列表] @interface 注解类型名 {<br>}</li>
<li>注解怎么用，用在什么地方？<ol>
<li>注解使用时的语法格式<br>@注解类型名</li>
<li>注解可以出现在类上、属性上、方法上、变量上等…<br>注解还可以出现在注解类型上。</li>
</ol>
</li>
</ol>
<h2 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h2><ul>
<li>Deprecated和@Deprecated注解的程序元素，不推荐使用这样的元素，通常因为它很危险或存在更好的选择。</li>
<li>Override 表示一个方法声明打算重写超类中的另一个方法声明</li>
<li>SuppressWarnings 指示应该在注解元素（以及包含在该注解元素中的所有程序元素）中取消显示指定的编译器警告。</li>
</ul>
<blockquote>
<p>注解的注解叫做元注解</p>
</blockquote>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul>
<li><p>什么是元注解<br>用来标注“注解类型”的注解叫做元注解</p>
</li>
<li><p>常见的元注解有哪些？</p>
<ol>
<li><p>Target<br>这个注解可以用来指定，被标注的注解可以出现在哪些位置上。<br><code>@Target(ElementType.METHOD)</code>表示被标注的注解只能出现在方法上。</p>
</li>
<li><p>Retention</p>
<p>用来标注被标注的注解最终保存在哪里。（注解保存策略）<br><code>@Retention(RetentionPolicy.SOURCE)</code>表示该注解只被保留在java源文件中。<br><code>@Retention(RetentionPolicy.CLASS)</code>表示该注解被保留在Class文件当中</p>
<p><code>@Retention(RetentionPolicy.RUNTIME)</code>表示该注解被保存在class文件中，并且可以被反射机制所读取。</p>
</li>
</ol>
</li>
</ul>
<h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><p><code>@Override</code> 只能出现在方法上.<code>@Override</code>这个注解是给编译器参考的，也运行阶段没有关系。凡是java中的方法带有这个注解的，编译器都会进行检查，如果这个方法不是重写父类的方法，编译器报错。但这不是必须的。</p>
<p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123; &#125;</span><br></pre></td></tr></table></figure>



<h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="Deprecated"></a>Deprecated</h3><p>表示被标注的元素已过时，这个注解主要是向其他程序员传达一个信息，告知已过时，有更好的解决方案存在。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>已过时的方法或类在不同的编译器可能有不同的展示效果，例如vscode：<br><img src="http://qiniu-note-image.ctong.top/note/images/image-8be00261e20d45288ba53b85794d7c41.png" alt="vscode"></p>
<p>idea</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-12ed2c3c434f4bc5977851c75eb0a819.png" alt="idea"></p>
<h2 id="自动定义Annotation"><a href="#自动定义Annotation" class="headerlink" title="自动定义Annotation"></a>自动定义Annotation</h2><p>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符列表] <span class="meta">@interface</span> 注解类型名 &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>我们通常在注解当中可以定义属性，以下这个是MyAnnotation的name属性。一个注解如果有定义了一个不能为空的属性，那么使用该注解的时候必须给属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">name</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>给指定的属性名赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(name = &quot;UpYou&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sun</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让它使用自己的默认值</p>
<p>在Annotation中这样定义一个属性，这个属性有个默认值18</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>在有默认值的情况下，我们可以设置它的属性值，也可以使用默认</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(name = &quot;UpYou&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sun</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>不使用默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(name = &quot;UpYou&quot;, age = 18)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sun</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果一个注解的属性名字是value，并且只有一个属性的话，在使用的时候，该属性名可以省略。</p>
</blockquote>
<hr>
<p>注解当中的属性可以是哪一种类型？</p>
<ul>
<li>byte</li>
<li>short</li>
<li>int</li>
<li>long</li>
<li>float</li>
<li>double</li>
<li>boolean</li>
<li>char</li>
<li>String</li>
<li>Class</li>
<li>枚举类型</li>
</ul>
<p>以及以上每一种类型的数组形式</p>
<h3 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h3><p>定一个数组类型的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="type">int</span>[] age();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果只有一个值的情况下，可以这样用<code>name = value</code>，如果你有多个值时需要使用大括号<code>&#123;&#125;</code>而不是中括号<code>[]</code>包裹，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(age = 18)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sun</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(age = &#123;17, 18, 19, 20&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doT</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="反射注解"><a href="#反射注解" class="headerlink" title="反射注解"></a>反射注解</h2><p>被反射的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(age = &#123;14, 15, 16, 17, 18&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doT</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;annotation.AnnotationTest&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>判断类上面是否有注解某个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isMyAnnotationPresent</span> <span class="operator">=</span> clazz.isAnnotationPresent(MyAnnotation.class);</span><br></pre></td></tr></table></figure>

<p>– <code>true</code></p>
<p>获取到这个注解对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isMyAnnotationPresent) &#123;</span><br><span class="line">  <span class="type">MyAnnotation</span> <span class="variable">clazzMyAnotation</span> <span class="operator">=</span> (MyAnnotation) clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定获取这个注解的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] clazzMyAnotationAge = clazzMyAnotation.age();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; clazzMyAnotationAge.length; i++) &#123;</span><br><span class="line">  System.out.println(clazzMyAnotationAge[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>14</code><br>– <code>15</code><br>– <code>16</code><br>– <code>17</code><br>– <code>18</code></p>
<h3 id="获取注解对象的属性值"><a href="#获取注解对象的属性值" class="headerlink" title="获取注解对象的属性值"></a>获取注解对象的属性值</h3><p>获取doT方法上的注解信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取do方法是否带有MethodAnnotation</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">clazzMethods</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;doT&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">clazzMethodsIsAnnotationPresent</span> <span class="operator">=</span> clazzMethods.isAnnotationPresent(MethodAnnotation.class);</span><br><span class="line"><span class="keyword">if</span> (clazzMethodsIsAnnotationPresent) &#123;</span><br><span class="line">  <span class="type">MethodAnnotation</span> <span class="variable">methodAnnotation</span> <span class="operator">=</span> clazzMethods.getAnnotation(MethodAnnotation.class);</span><br><span class="line">  System.out.println(methodAnnotation.name());</span><br><span class="line">  System.out.println(methodAnnotation.pass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>admin</code><br>– <code>123</code></p>
<h2 id="注解在开发中有什么用"><a href="#注解在开发中有什么用" class="headerlink" title="注解在开发中有什么用"></a>注解在开发中有什么用</h2><p>假设有这样一个注解，叫做：@Id</p>
<p>这个注解只能出现在类上面，当这个类上有这个注解的时候，要求这个类中必须有一个int类型的id属性。如果没有这个属性就报异常。如果有这个属性则正常执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id(fiel = &quot;id&quot;, type = int.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Id注解的定义"><a href="#Id注解的定义" class="headerlink" title="Id注解的定义"></a>Id注解的定义</h3><p>这个注解@Id用来标注类，被标注的类中必须有一个对应类型的属性属性，没有就报异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Id &#123;</span><br><span class="line">  <span class="comment">// 必须出现的字段</span></span><br><span class="line">  String <span class="title function_">fiel</span><span class="params">()</span>;</span><br><span class="line">  <span class="comment">// 字段类型</span></span><br><span class="line">  Class <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p> 拿到User类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>判断这个类是否存在这个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">userClassIsAnnotationPresent</span> <span class="operator">=</span> userClass.isAnnotationPresent(Id.class);</span><br><span class="line"><span class="comment">// 存在这个注解时执行对应操作</span></span><br><span class="line"><span class="keyword">if</span> (userClassIsAnnotationPresent) &#123;</span><br><span class="line">  ...在这里执行操作...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到这个类上的@Id注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Annotation</span> <span class="variable">idAnnotation</span> <span class="operator">=</span> userClass.getAnnotation(Id.class)</span><br></pre></td></tr></table></figure>

<p>拿到指定的属性跟属性类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">idFieldName</span> <span class="operator">=</span> idAnnotation.fiel();</span><br><span class="line"><span class="type">Class</span> <span class="variable">idFieldType</span> <span class="operator">=</span> idAnnotation.type();</span><br></pre></td></tr></table></figure>

<p>判断这个属性是否存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">Field</span> <span class="variable">idField</span> <span class="operator">=</span> userClass.getDeclaredField(idFieldName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException | SecurityException e) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;错误，不存在属性: &quot;</span> + idFieldName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断这个属性类型是否对应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (idField.getType() != idFieldType) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;期望的属性类型为&quot;</span> + idFieldType.getSimpleName() + <span class="string">&quot;; 可得到的类型为&quot;</span> + idField.getType().getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>当<code>User.java</code>文件内容如下时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id(fiel = &quot;id&quot;, type = int.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>错误，不存在属性: id</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id(fiel = &quot;id&quot;, type = int.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>期望的属性类型为int; 可得到的类型为String</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id(fiel = &quot;id&quot;, type = int.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有错误</p>
<hr>
<p>注解在程序当中等同于一种标记，如果这个元素上有这个注解怎么办，没有这个注解怎么办。</p>
<p><a href="https://github.com/Clover-You/my-blog-file/blob/main/%E6%B3%A8%E8%A7%A3%2B%E5%8F%8D%E5%B0%84%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81.zip">注解+反射练习</a></p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>4、Java方法</title>
    <url>/2022/01/02/4%E3%80%81Java%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>分析以下程序，不使用“方法”有哪些缺点？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//需求1：请编写程序计算 1 和 2 的和，并将结果输出：【计算两个int类型数据的和】</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r1</span> <span class="operator">=</span> i + y;</span><br><span class="line">    System.out.println(i + <span class="string">&quot;+&quot;</span> + y + <span class="string">&quot;=&quot;</span> + r1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需求2：请编写程序计算 10 和 20 的和，并将结果输出：【计算两个int类型数据的和】</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> i2 + y2;</span><br><span class="line">    System.out.println(i2 + <span class="string">&quot;+&quot;</span> + y2 + <span class="string">&quot;=&quot;</span> + r2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需求1：请编写程序计算 100 和 200 的和，并将结果输出：【计算两个int类型数据的和】</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r3</span> <span class="operator">=</span> i3 + y3;</span><br><span class="line">    System.out.println(i3 + <span class="string">&quot;+&quot;</span> + y3 + <span class="string">&quot;=&quot;</span> + r3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以上需求其实就是一个需求</li>
<li>这个需求是：计算两个 int 类型数据的和，功能相同</li>
<li>只是每次参与计算的数据不同</li>
<li><h2 id="问题、缺点-过多的代码重复-无法复用-开辟无意义的内存空间较多"><a href="#问题、缺点-过多的代码重复-无法复用-开辟无意义的内存空间较多" class="headerlink" title="问题、缺点- 过多的代码重复- 无法复用- 开辟无意义的内存空间较多"></a>问题、缺点<br>- 过多的代码重复<br>- 无法复用<br>- 开辟无意义的内存空间较多</h2></li>
</ul>
<p>在Java语言当中有这样一种机制：</p>
<ul>
<li>某个功能代码只需要写一次</li>
<li>需要使用这个功能，只需要给这个功能传递具体的数据</li>
<li>这个功能完成之后返回一个最终的结果。</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>学了方法之后，就可以调用某个方法来进行计算，只要给出数据，该方法只需要计算出结果返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//需求1：请编写程序计算 1 和 2 的和，并将结果输出：【计算两个int类型数据的和】</span></span><br><span class="line">    System.out.println(<span class="string">&quot;1 + 2 =&quot;</span> + mathFoot(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求2：请编写程序计算 10 和 20 的和，并将结果输出：【计算两个int类型数据的和】</span></span><br><span class="line">    System.out.println(<span class="string">&quot;10 + 20 =&quot;</span> + mathFoot(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//需求1：请编写程序计算 100 和 200 的和，并将结果输出：【计算两个int类型数据的和】</span></span><br><span class="line">    System.out.println(<span class="string">&quot;100 + 200 = &quot;</span> + mathFoot(<span class="number">100</span>, <span class="number">200</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mathFoot</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l + r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序优点</p>
<ul>
<li>代码得到了重复使用</li>
<li>method 方法更简洁了</li>
</ul>
<p>这样可以重复利用，减少沉余代码。</p>
<h3 id="方法是什么？"><a href="#方法是什么？" class="headerlink" title="方法是什么？"></a>方法是什么？</h3><p>方法的本质是什么？</p>
<ul>
<li>方法就是一段独立的代码片段</li>
<li>可以完成特定的功能</li>
<li>可以重复调用</li>
<li>Java中的方法定义在类体当中</li>
<li>方法无法定义在方法体当中</li>
<li>由Java语句构成，方法体当中的代码遵循由上而下的顺序依次执行</li>
</ul>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><ul>
<li><p>方法怎么定义？语法结构</p>
<ul>
<li><code>[修饰符列表] 返回值类型 方法名(形式参数列表) &#123; 方法体 &#125;</code></li>
</ul>
</li>
<li><p>对以上语法结构进行解释说明</p>
<ul>
<li><p>关于修饰符列表</p>
<ul>
<li><p>可选项，不是必须的</p>
</li>
<li><p>目前统一写成：<code>public static</code></p>
</li>
<li><p>方法的修饰符列表当中有 <code>static</code> 关键字的话，怎么调用这个方法？</p>
<ul>
<li><code>className.MethodName(实际参数列表)</code></li>
</ul>
</li>
</ul>
</li>
<li><p>返回值类型</p>
<ul>
<li><p>什么是返回值？</p>
<ul>
<li>一个方法是可以完成某个特定功能，这个功能结束之后，大多数都是需要返回最终执行结果的，执行结果可能是一个具体存在的数据。而这个具体存在的数据就是返回值</li>
</ul>
</li>
<li><p>返回值类型</p>
</li>
<li><p>返回值是一个具体存在的数据，数据都是有类型的，此处需要指定的是返回值的具体类型。如果返回值类型不是指定返回类型的话编译器报错。<br><img src="http://qiniu-note-image.ctong.top/note/images/image-0ac1563401a54374b041cc518856f7b0-20211227094856112.png" alt="image.png"></p>
</li>
<li><p>返回值类型都可以指定哪些数据类型呢？</p>
<ul>
<li>Java任意一种数据类型都可以，包括基本数据类型和所有的引用数据类型。</li>
</ul>
</li>
<li><p>也可能这个方法执行结束之后不返回任何数据，Java中规定，当一个方法执行结束之后不返回任何数据的话，返回值类型位置必须编写：<code>void</code> 关键字</p>
</li>
<li><p>返回值类型如果不是 <code>void</code> ，表示这个方法执行结束之后必须返回一个具体的数值。当方法执行结束的时候没有返回任何数据的话编译器报错。</p>
</li>
<li><p>返回值类型是 <code>void</code> 的时候，在方法体当中不能编写 <code>return 值;</code> 这样的语句。但是可以编写 <code>return;</code> 这样的语句。</p>
</li>
<li><p>只要带有 <code>return</code> 关键字的语句执行，<code>return</code> 语句所在的方法结束。强行终止正在执行的方法。「不是JVM结束，是所在的方法结束」</p>
</li>
</ul>
</li>
</ul>
<p>​    </p>
<ul>
<li><p>方法名：</p>
<ul>
<li>只要是合法的标识符就行</li>
<li>方法名最好见名知章</li>
<li>方法名最好是动词<ul>
<li>因为方法是用来完成某些特定功能的</li>
</ul>
</li>
<li>方法名首字母要求小写，后面每个单词首字母大写</li>
</ul>
</li>
<li><p>方法体</p>
<ul>
<li>方法体必须由大括号括起来，方法体当中的代码有顺序，遵循由上而下的顺序依次执行。并且方法体由Java语句构成，每一个Java语句以 <code>;</code> 结尾。</li>
</ul>
</li>
<li><p>形式参数列表，简称：形参</p>
<ul>
<li><p>形参是局部变量</p>
</li>
<li><p>形参的个数可以是 0 ~ n 个</p>
</li>
<li><p>多个形参之间用 <code>,</code> 隔开</p>
</li>
<li><p>形参的名字只要是合法的标识符就行</p>
</li>
<li><p>实参与形参列表必须满足：</p>
<ul>
<li>类型对应相同</li>
<li>数量相同</li>
</ul>
</li>
<li><p>形参中起决定性作用的是形参的数据类型，形参的名字就是局部变量的名字。<br>形参起决定性作用的是形参的数据类型例如：<br>方法定义<br><code>public static int sum(int a, int b)&#123;&#125;</code><br>方法调用<br><code>sum(&quot;abc&quot;, &quot;def&quot;);</code> 因为规定的是两个<code>int</code>类型的变量，这里传递的却是两个<code>String</code>,所以编译器报错。</p>
<p><code>sum(1,2);</code> （1，2）是实参列表</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>方法怎么调用？</p>
<ul>
<li>方法只定义不去调用是不会执行的，只有在调用的时候才会执行。<br>语法规则：「方法的修饰符当中有 <code>static</code> 」<br><code>className.methodName(实参列表);</code>这是一条Java语句。表示调用某个 class 的某个 method.,传递这样的参数。</li>
</ul>
</li>
</ul>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testMethod</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>public </code> 表示公开的</p>
<p><code>class </code> 表示定义类的关键字</p>
<p><code>testMethod </code> 是一个类名</p>
<p>表示定义一个公开的类，起名<code>testMethod</code>,由于是公开的类，所以，源文件名必须是：<code>testMethod.java</code>。<code>&#123;...&#125;</code> 是类体部分，在类体中不能直接编写Java语句，除变量之外。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> testMethod &#123;...&#125;</span><br></pre></td></tr></table></figure>



<p>方法出现在类体当中。以下就是一个方法。</p>
<p><code>public</code> 表示公开的</p>
<p><code>static</code> 表示静态的</p>
<p><code>void</code> 表示方法执行结束后没有返回值</p>
<p><code>main</code> 方法名：主方法，这个是一个程序的入口，这是由<code>JVM</code>调用的方法，一定会执行</p>
<p><code>(String[] args)</code> 形式参数列表，其中<code>String[]</code>是一种引用数据类型，<code>args</code>是局部变量的变量名</p>
<p>以下只有<code>args</code>这个局部变量的变量名是随意的</p>
<p>主方法就需要这样固定编写，这是程序的入口。「SUM规定的，必须这样写」</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>



<p>以下是自定义方法，不是程序的入口（编写在类体中）</p>
<p>方法作用：计算两个 <code>int</code> 类型数据的和，不要求返回结果，但是要求将结果直接输出到控制台。</p>
<p>修饰符列表：<code>public static</code></p>
<p>返回值类型：<code>void</code></p>
<p>方法名：<code>sum</code></p>
<p>形式参数列表：<code>(int x, int y)</code></p>
<p>方法体：主要任务是，求和之后输出计算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">  System.out.println(x + <span class="string">&quot;+&quot;</span> + y + <span class="string">&quot;=&quot;</span> + (x + y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以上程序编写好之后需要调用，让<code>main</code>调用<code>sum</code>，这两个方法并没有任何区别，但是<code>main</code>有<code>JVM</code>调用而<code>sum</code>没有方法去调用它。<code>main</code>是由虚拟机(<code>JVM</code>)调用，所以<code>main</code>一定会执行。因为<code>sum</code>是一个静态方法，所以需要指定所在的<code>className</code>。方法可以复用。</p>
<p><code>sum</code>计算 1 和 2 的和之后打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  testMethod.sum(<span class="number">23</span>, <span class="number">1232</span>);</span><br><span class="line">  testMethod.sum(<span class="number">1342</span>, <span class="number">212</span>);</span><br><span class="line">  testMethod.sum(<span class="number">4211</span>, <span class="number">4532</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中，代码执行总是以同步的形式进行执行，以上代码示例：</p>
<p>以代码块行号为准，当第二行代码执行时，main不会往下执行，它需要等待<code>sum</code>执行完成后才会继续往下走，而走到第三行时又等待<code>sum</code>执行完成后才依次往下执行。方法体内的代码是有顺序的，遵循自上往下依次执行。</p>
<h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testMethod</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    testMethod.sum(<span class="number">23</span>, <span class="number">1232</span>);</span><br><span class="line">    testMethod.sum(<span class="number">1342</span>, <span class="number">212</span>);</span><br><span class="line">    testMethod.sum(<span class="number">4211</span>, <span class="number">4532</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">    System.out.println(x + <span class="string">&quot;+&quot;</span> + y + <span class="string">&quot;=&quot;</span> + (x + y));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>一个方法存在的意义是为了完成某一个功能，如果已经脱离了这个功能，那么它就没有存在的意义。</p>
<p>以下问号的位置是任何一个程序员将来需要攻克的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ??? 方法名(???)&#123;???&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>你觉得方法需要返回什么值比较合适</li>
<li>这个方法在定义的时候，需要定义什么样的参数</li>
<li>方法定义好后，方法体内的代码应该怎么去编写</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>6、Java方法执行与内存分析</title>
    <url>/2022/01/02/6%E3%80%81Java%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><ul>
<li>方法在执行过程中，在JVM中的内存是如何分配的呢，内存是如何变化的？<ol>
<li>方法只定义，不调用，是不会执行的，并且在<code>JVM</code>也不会给该方法分配<strong>运行所属</strong>的内存空间。<br>只有在调用这个方法的时候，才会动态的给这个方法分配所属的内存空间。</li>
<li>在<code>JVM</code>内存划分上有这样三块主要的内存空间（还有其它的内存空间）：<ul>
<li>方法区内存</li>
<li>栈内存</li>
<li>堆内存</li>
</ul>
</li>
<li>关于<strong>栈</strong>数据结构：<ul>
<li>栈： stack，是一种数据结构</li>
<li>数据结构反应的是数据的存储形态。</li>
<li>数据结构是独立的学科，不属于任何编程语言的范畴，只不过在大多数编程语言当中要使用数结构。</li>
<li>作为程序员需要提前精通：数据结构 + 算法[计算机必修]</li>
</ul>
</li>
<li>方法执行的时候代码片段存在哪里？方法执行的时候执行过程的内存在哪里分配？<ul>
<li>方法代码片段属于<code>.class</code>文件的一部分，字节码文件在类载（classLoader、类加载器）加载的时候，将其放到了方法区内存当中。所以<code>JVM</code>中的三块主要的内存空间中方法区内存最先有数据。</li>
<li>代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。【栈内存中分配方法运行的所属内存空间】</li>
</ul>
</li>
<li>方法在调用瞬间，在<strong>栈内存</strong>中会给该方法分配独立的内存空间，此时发生<strong>压栈</strong>动作(push)，方法执行结束之后，给该方法分配的内存空间全部释放，此时发生<strong>弹栈</strong>动作(pop)。<ul>
<li>压栈： 给该方法分配内存</li>
<li>弹栈： 释放该方法的内存空间</li>
</ul>
</li>
<li>局部变量在<strong>方法体</strong>中声明，局部变量在运行阶段内存在栈中分配。<ul>
<li>局部变量有形参也有在方法体定义的局部变量。</li>
<li>局部变量生命周期最短，因为只要出了这个方法的大括号，那么就意味着这个方法结束了，方法结束了那么就再也没有机会去访问这个内存空间因为内存空间释放掉了，没有了。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="JVM执行原理图"><a href="#JVM执行原理图" class="headerlink" title="JVM执行原理图"></a><strong><code>JVM</code>执行原理图</strong></h4><p><img src="http://qiniu-note-image.ctong.top/note/images/image-69e9c7753b6c44a2a08575d961f749e8.png" alt="image.png"></p>
<h3 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/image-239a3582d5964387bf9cd767fd53e6b9.png" alt="image.png"></p>
<ol>
<li><p>栈帧永远指向栈顶元素。</p>
</li>
<li><p>栈顶元素处于活跃状态，其它元素静止。</p>
</li>
<li><p>术语：<br><img src="http://qiniu-note-image.ctong.top/note/images/image-85540f1ac0e84fe09c802e350cec1ad1-20211227095638630.png" alt="image.png"></p>
<ul>
<li>压栈&#x2F;入栈&#x2F;push</li>
<li>弹栈&#x2F;出栈&#x2F;pop</li>
</ul>
</li>
<li><p>栈数据结构的特点是：</p>
<ul>
<li>先进后出</li>
<li>后进先出</li>
</ul>
</li>
</ol>
<h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><p>以下程序在<code>JVM</code>中如何执行？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testMethod</span>()&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">retValue</span> <span class="operator">=</span> sumInt(a, b);</span><br><span class="line">    System.out.println(<span class="string">&quot;retValue = &quot;</span> + retValue);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumInt</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">retValue</span> <span class="operator">=</span> divide(result, num);</span><br><span class="line">    <span class="keyword">return</span> retValue;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> x / y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>.java</code>文件通过编译后,<strong>Class Loader</strong>(类加载器)将<code>testMethod.class</code>放到了方法区内存中。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-b99899b9d5114573a60cdb8a37893285.png" alt="image.png"></p>
<p><code>JVM</code>会默认执行入口函数<code>main</code>，代码执行时<code>JVM</code>在栈内存开辟一块空间供<code>main</code>执行。<code>JVM</code>将<code>main</code>放到了栈内存当中执行，期间发生了<strong>压栈</strong>(push)动作。<strong>栈帧</strong>永远指向栈顶元素，栈顶元素是<strong>活跃</strong>的。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-349613633bbb4048907d50adaa027daa-20211227095132369.png" alt="image.png"></p>
<p>代码一步一步执行后，逐渐为局部变量开辟内存空间。为<code>main</code>栈开辟了两个名为<code>a、b</code>的内存空间</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201021410746.png" alt="image.png"></p>
<p>当执行到第 5 行的时候也就是<code>int retValue = sumInt(a, b);</code>,调用了<code>sumInt</code>方法。调用的这一瞬间<code>JVM</code>又给<code>sumInt</code>开辟内存。而这时栈帧发生改变，指向了<code>sumInt</code>栈。由于栈帧改变，所以<code>main</code>已暂停执行、被阻塞，现在执行的是栈顶元素，由于栈帧永远指向的是栈顶元素，所以栈顶元素永远处于<strong>活跃</strong>状态。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-c7d507c6a7d14b93b2758bd98eaf8848.png" alt="image.png"></p>
<p>在<code>main</code>调用<code>sumInt</code>的时候，在参数传递的时候，实际上传递的是变量中保存的值。将<code>a</code>和<code>b</code>变量的值给到<code>sumInt</code>而不是<code>a</code>和<code>b</code>。所以<code>sumInt</code>无法操作<code>main</code>里面的局部变量**(无法得到内存地址)**。参数传递的时候是按顺序传递。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-0d36dbb8e9174cac98f4680c393c5691.png" alt="image.png"></p>
<p>执行到第10行的时候<code> int result = i + j;</code>,这时候需要计算 <code>i + j</code> 的结果给<code>result</code>栈储存。而计算是由中央处理器也就是CPU来执行，CPU将处理后的结果给到<code>result</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-fa449887fdd24dcb9fcd8aa9b11eb365.png" alt="image.png"></p>
<p>程序继续执行，当执行到第12行的时候<code>int retValue = divide(result, num);</code>,又调用 <code>divide</code>,<code>JVM</code>给<code>divide</code>开辟了一块内存空间，发生了<strong>压栈</strong>动作。逐步开辟<code>x、y、z</code>栈，而<code>z</code>的结果需要通过CPU计算得到。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-37e46b5564f34327b6be5911b7d3e339.png" alt="image.png"></p>
<p>而程序遇到<code>return</code>语句后就会<strong>强制弹栈</strong>（释放内存空间），继续栈顶元素的执行，这时候栈顶元素以及变成<code>sumInt</code>，<strong>弹栈</strong>后代表第12行<code>int retValue = divide(result, num);</code>结束。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-289106c2b78743afb6b89966d09a4844.png" alt="image.png"></p>
<p>将<code>divide</code> 的结果给到<code>retValue</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-06e3f54419e041bea5a6eb0fb5a4ad27.png" alt="image.png"></p>
<p>而往下走遇到<code>return</code>强制弹栈<code>return retValue;</code>。<code>sumInt</code>弹栈之后代表着第5行<code> int retValue = sumInt(a, b);</code>结束。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-7ad9bae6dacd4042bc0aab3567d0b1c9.png" alt="image.png"></p>
<p>往下走遇到了<code>System</code>类,这个类实际与其它class(包含<code>testMethod.class</code>)一起被加载到代码区。调用<code>System</code>类里面的<code>println</code>方法后又压栈，执行完成后弹栈，最后<code>main</code>执行完成弹栈。资源全部释放。</p>
<blockquote>
<p>代码是逐行执行，从上倒下。</p>
<p>代码编译期不会执行任何计算，JVM执行时计算</p>
<p>栈结构遵循 先进后出，后进先出 的规则</p>
<p>栈内存主要存储的是局部变量</p>
<p>方法调用的时候，在传参的时候，实际上传递的是变量保存的<strong>值</strong></p>
<p>栈帧永远在栈顶，栈顶元素永远处于<strong>活跃</strong>状态</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>7、Java方法重载</title>
    <url>/2022/01/02/7%E3%80%81Java%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以下程序有哪些缺点？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">overLoad</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sumInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> sumBouble(<span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> sumLong(<span class="number">1L</span>, <span class="number">2L</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumInt</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">	  <span class="keyword">return</span> a + b;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sumDouble</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sumLong</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>sumInt</code> <code>sumLong</code> <code>sumDouble</code> 方法虽然不同，但是功能相似，都是求和</li>
<li>以上程序当中功能相似的方法，分别起了三个不同的名字，这对于程序员来说，调用方法的时候不方便，程序员需要记忆更多的方法。</li>
</ol>
<p>有没有这样一种机制：</p>
<pre><code>    这些功能虽然不同，但是**功能相似**的时候，可以让程序员使用这些方法的时候就像在使用同一个方法一样，这		样程序员以后编写代码比较方便，也不许要记忆更多的方法名。
</code></pre>
<p>有这种机制：</p>
<ul>
<li>Java提供了方法重载机制<code>overload</code></li>
<li>不是所有语言都支持重载机制，例如: <code>JavaScript</code> 就不支持</li>
</ul>
<h4 id="改写"><a href="#改写" class="headerlink" title="改写"></a>改写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">overLoad</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> sum(<span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> sum(<span class="number">1L</span>, <span class="number">2L</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">	  <span class="keyword">return</span> a + b;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重载：</p>
<ul>
<li>使用时就像在使用一个方法，但实际上是使用了 3 个方法。</li>
<li>调用时会根据传递的：参数类型，对应调用的方法不同。</li>
</ul>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>方法重载：</p>
<ol>
<li>方法重载又被称为：<code>overload</code></li>
<li>什么时候考虑使用方法重载？<ul>
<li>功能相似的时候，尽可能选择重载<strong>「功能不同、不相似的时候，尽可能让方法名不同」</strong></li>
</ul>
</li>
<li>什么条件满足之后构成了方法重载？<ul>
<li>同级</li>
<li>方法名相同</li>
<li>参数列表<ul>
<li>参数长度</li>
<li>类型不同</li>
<li>顺序不同</li>
</ul>
</li>
</ul>
</li>
<li>方法重载和什么有关系，和什么没有关系？<ul>
<li>和方法名 + 参数列表有关</li>
<li>和返回值类型无关</li>
<li>修饰符列表无关</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>8、Java面向对象和面向过程的区别</title>
    <url>/2022/01/02/8%E3%80%81Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><ol>
<li><p><strong>面向过程：</strong></p>
<ul>
<li><p>如果有一个软件，采用面向过程开发，在这个过程当中，没有任何独立体的概念。将<strong>因为所以</strong>关联在一起把整个业务逻辑实现。这种方式的开发，我们称为面向过程。面向过程开发，关注的是因果关系的一个实现，没有独立体的概念，面向过程统是以因果关系为核心。一个小因果关系构成一个小的步骤，小的步骤之间因为<strong>因果关系</strong>构成一个小的模块。模块之间又因为因果关系构成一个系统。只要有一个因果关系发生了断裂，整个软件就废了。采用面向过程开发的系统，都应该关注的是<strong>过程</strong></p>
</li>
<li><p>优点</p>
<ul>
<li>对于业务逻辑比较简单的程序，可以达到快速开发，前期投入成本低。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>采用面向过程开发的开发方式很难解决非常复杂的业务逻辑，另外面向过程的方式导致软件元素之间的<strong>耦合度</strong>非常高，只要其中一环出问题，整个系统受到影响，导致最终的软件扩展力差。另外，由于没有独立体的概念，所以无法达到组件复用。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>面向对象：</strong></p>
<ul>
<li><p>面向对象的关注点在对象上，面向对象就相当于，我不关心这个对象底层到底是怎么实现的，我只关心这个对象能给我带来什么。你给我个打火机，我不关心这个打火机是怎么实现的，我只要知道这个打火机按这个钮就能打火。</p>
</li>
<li><p>关注的是一个独立的组件、独立的个体，而这个独立的个体主要分析的是你这个独立的个体到底可以给我带来什么、做什么。</p>
</li>
<li><p>像现实世界，分割成不同的单元，每个单元都是独立的对象，然后让对象之间协作起来形成一个系统</p>
</li>
<li><p>优点</p>
<ul>
<li>独立体耦合度低，扩展力强。更容易解决现实世界当中更复杂的业务逻辑。组件复用性强</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>前期投入的成本较高，需要进行独立体的抽取，大量的系统设计</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>想象一个人抽烟的场景，想到了有个哥们，拿着一根香烟，然后又想到他手里拿了个打火机。大脑里想象的是什么，想象到了几个独立个体，想象到了人，想象到了抽烟场合，想象到了打火机想象到了香烟。把这几个对象放到这，组合起来这个场景就形成了</p>
<blockquote>
<p>面向过程主要关注的是实现的具体过程，因果关系。</p>
<p>面向对象：主要关注的是对象「<strong>独立的个体</strong>」，能完成哪些功能。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9、Java类的定义</title>
    <url>/2022/01/02/9%E3%80%81Java%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<ol>
<li><p>语法结构：</p>
<ul>
<li>[修饰符列表] class 类名 {}&#96;</li>
<li>类体里面可以有：<ul>
<li>属性</li>
<li>方法</li>
</ul>
</li>
</ul>
</li>
<li><p>学生类，描述所有学生对象的共同特征：</p>
<ul>
<li>学生对象有哪些状态信息：<ul>
<li>学号</li>
<li>名字</li>
<li>性别</li>
<li>年龄</li>
<li>住址</li>
<li>…</li>
</ul>
</li>
<li>学生对象有哪些动作信息：<ul>
<li>吃饭</li>
<li>睡觉</li>
<li>学习</li>
<li>玩</li>
<li>唱歌</li>
<li>跳舞</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li><p>属性通常是采用一个变量的方式来完成定义的。</p>
<ul>
<li>int no;</li>
<li>int age;</li>
<li>String name;</li>
<li>String address;</li>
<li>boolean sex;</li>
</ul>
</li>
<li><p>在类体当中，方法体之外定义的变量被称为<strong>“成员变量”</strong></p>
<ul>
<li>成员变量没有赋值时，系统会赋默认值：一切向0看齐。</li>
</ul>
</li>
<li><p>方法描述的是对象的动作信息</p>
</li>
<li><p>属性描述的是对象的状态信息</p>
</li>
<li><p>Java语言中，所有的class都是引用类型。</p>
</li>
</ol>
<hr>
<p><code>Student</code>是一个类，代表了所有学生对象。是一个学生模板。</p>
<p>以下程序表述的是一个对象的属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker - 学习笔记</title>
    <url>/2022/04/03/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>docker 的出现开启了一个新的时代：容器化时代</p>
<p>市面上有很多开发语言，如：Java、C++、JavaScript，如果你要运行，你可能拿到的是一个 <code>.jar</code> <code>.exe</code> <code>.sh</code> 文件甚至你需要自己编译源码。没有一个统一的标准进行管理。</p>
<p>而 Docker 却可以将这些应用 build 成一个镜像，你只要是一个 Docker 镜像，那么 Docker 就可以直接给你跑起来。不仅如此， 这些镜像还很容易分享，例如将某些镜像放到指定的地方，别人就可以找到这个镜像下载和运行，所以 Docker 的推出还统一了标准。</p>
<h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><p>在 Docker 之前，非常流行一种“虚拟化技术”，这种技术其实就是在一台机器中安装多个虚拟机，我们部署的应用都在这些安装的虚拟机中。如果有应用出现问题，比如内存泄露，顶多把他自个的机子内存占满，不会影响到别的应用。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203311724774.png" alt="虚拟化技术"></p>
<p>虚拟化技术有一下痛点：</p>
<ol>
<li>基础镜像GB级别</li>
<li>创建使用比较复杂</li>
<li>启动速度慢</li>
<li>移植与分享不方便</li>
</ol>
<p>优点是隔离性很强</p>
<h2 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h2><p><img src="https://qiniu-note-image.ctong.top/note/images/202203311906410.png" alt="容器化技术"></p>
<ol>
<li>基础镜像MB级别</li>
<li>创建简单</li>
<li>隔离性强</li>
<li>启动速度秒级</li>
<li>移植与分享方便</li>
</ol>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://qiniu-note-image.ctong.top/note/images/202203312031389.png" alt="架构图"></p>
<ul>
<li><p>Docker_Host</p>
<p>如果需要使用 Docker，那么需要在使用的机器上安装 Docker。安装了 Docker 的机器称为 Docker 主机。</p>
</li>
<li><p>Docker Daemon</p>
<p>安装了 Docker 后，主机启动那么后台就会启动一个 Docker 的进程 <code>Docker Daemon</code></p>
</li>
<li><p>Client<br>如果需要操作 Docker，那么需要使用命令行，这个命令行被称为Docker 客户端</p>
</li>
<li><p>Images</p>
<p>镜像，一个带环境打包好的程序，可以直接启动运行</p>
</li>
<li><p>Registry<br>镜像仓库，官方的镜像仓库是 Docker Hub</p>
</li>
<li><p>Containers</p>
<p>容器，由镜像启动起来正在运行中的程序</p>
</li>
</ul>
<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>卸载旧版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure>

<p>设置 Docker yum 源所在的位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">   https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>安装成功后将 docker 设置为开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# systemctl enable docker --now</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>

<p>国内使用默认的镜像仓库可能会很慢，我们可以替换成阿里云的地址，<code>registry-mirrors</code> 用你自己的就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://gnsz5r5r.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a><strong>下载镜像</strong></h3><p>可以到中央镜像仓库  <code>https://hub.docker.com/</code> 找你需要的镜像。</p>
<p>第一步首先找到你需要的镜像然后点击进去</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203312149988.png" alt="搜索"></p>
<p>右边会有一个下载命令，我们可以直接使用这个命令来下载这个容器，这命令默认是下载的最新版本。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203312150831.png" alt="下载命令"></p>
<p>可以点 <strong>tags</strong> 来找你需要的版本</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203312151865.png" alt="切换tags"></p>
<p>找到需要的版本后，可以使用 <code>docker pull &lt;image&gt;:&lt;tag&gt;</code> 命令下载，在 Docker 中，版本名还被称为标签</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx:1.21.6-perl</span><br></pre></td></tr></table></figure>

<h3 id="查看已下载的镜像"><a href="#查看已下载的镜像" class="headerlink" title="查看已下载的镜像"></a><strong>查看已下载的镜像</strong></h3><p>可以使用 <code>docker images</code> 命令查看已下载的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    605c77e624dd   3 months ago   141MB</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a><strong>删除镜像</strong></h3><p>可以使用 <code>docker rmi &lt;image&gt;:&lt;tag&gt;</code> 命令移除镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker rmi nginx</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">Untagged: nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Deleted: sha256:605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85</span><br><span class="line">Deleted: sha256:b625d8e29573fa369e799ca7c5df8b7a902126d2b7cbeb390af59e4b9e1210c5</span><br><span class="line">Deleted: sha256:7850d382fb05e393e211067c5ca0aada2111fcbe550a90fed04d1c634bd31a14</span><br><span class="line">Deleted: sha256:02b80ac2055edd757a996c3d554e6a8906fd3521e14d1227440afd5163a5f1c4</span><br><span class="line">Deleted: sha256:b92aa5824592ecb46e6d169f8e694a99150ccef01a2aabea7b9c02356cdabe7c</span><br><span class="line">Deleted: sha256:780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5</span><br><span class="line">Deleted: sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f</span><br></pre></td></tr></table></figure>

<p>再检查镜像列表，就可以看到已经被移除了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure>

<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a><strong>启动容器</strong></h3><p>在下载了一个镜像后，可以使用 <code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code> 启动指定镜像</p>
<p>例如启动一个 nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=nginx -d --restart=always nginx:latest</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--name</code> 启动别名</li>
<li><code>-d</code> 后台启动</li>
<li><code>--restart</code> 容器是否开机自启，默认是 <code>no</code> ，如果需要设置为开启自启，可以设置为 <code>always</code></li>
</ul>
<h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a><strong>查看正在运行的容器</strong></h3><p>如果需要查看正在运行的容器，可以使用 <code>docker ps</code> 进行查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">0546ab754a92   nginx:latest   &quot;/docker-entrypoint.…&quot;   29 seconds ago   Up 29 seconds   80/tcp    nginx</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h3><p>删除一个已经停止的容器，通过这个命令 <code>docker rm &lt;container_id | name&gt;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm nginx</span><br></pre></td></tr></table></figure>

<h3 id="停止一个正在运行的容器"><a href="#停止一个正在运行的容器" class="headerlink" title="停止一个正在运行的容器"></a><strong>停止一个正在运行的容器</strong></h3><p><code>docker stop &lt;container_Id | name&gt;</code> 命令可以停止一个正在运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure>

<h3 id="启动已停止运行的容器"><a href="#启动已停止运行的容器" class="headerlink" title="启动已停止运行的容器"></a><strong>启动已停止运行的容器</strong></h3><p>使用 <code>docker start &lt;container_Id | name&gt;</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start nginx</span><br></pre></td></tr></table></figure>

<h3 id="修改已启动容器的设置项"><a href="#修改已启动容器的设置项" class="headerlink" title="修改已启动容器的设置项"></a><strong>修改已启动容器的设置项</strong></h3><p><code>docker update [OPTIONS] CONTAINER [CONTAINER...] </code>,例如将一个容器修改为开启自启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update nginx --restart=always</span><br></pre></td></tr></table></figure>

<h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a><strong>端口映射</strong></h3><p>docker 容器其实是一个小的Linux，里面的nginx暴露了一个端口为80，但是它不是在我们主机上暴露的，所以我们无法通过 ip 去访问这个nginx。需要在 docker 做一层端口映射，将主机的某个端口映射到 docker 容器中的指定端口上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=nginx -d -p 88:80 nginx</span><br></pre></td></tr></table></figure>

<p> 启动后检查 <code>PORTS</code> 是不是成功的 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES</span><br><span class="line">8e6d1342b9e8   nginx     &quot;/docker-entrypoint.…&quot;   51 seconds ago   Up 50 seconds   0.0.0.0:88-&gt;80/tcp, :::88-&gt;80/tcp   nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010843412.png" alt="公网访问Nginx"></p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a><strong>进入容器</strong></h3><p>如果需要修改容器的配置或者什么东西，由于 Docker 的资源隔离是非常高的，所以不能直接修改，需要进入这个容器的控制台，类似 ssh 远程连接某个服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it nginx /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker exec -it nginx /bin/bash</span><br><span class="line">root@8e6d1342b9e8:/#</span><br></pre></td></tr></table></figure>

<p>进到容器后，可以找到例如nginx的部署目录并修改内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@8e6d1342b9e8:/# cd /usr/share/nginx/html</span><br><span class="line">root@8e6d1342b9e8:/usr/share/nginx/html# echo &quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot; &gt; index.html</span><br></pre></td></tr></table></figure>

<p>修改后刷新浏览器访问</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010900085.png" alt="修改index.html"></p>
<p>改完后直接使用 <code>exit</code> 退出即可</p>
<h3 id="提交改变"><a href="#提交改变" class="headerlink" title="提交改变"></a><strong>提交改变</strong></h3><p>可以将自己已经修改好的镜像提交，例如配置nginx容器，配置了很多次配好了，如果移到新的服务器上，还需要重新配置。那么可以使用 <code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code> 命令将当前容器重新生成为一个新的镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker commit -a &quot;Clover You&quot; -m &quot;修改index.html&quot; nginx clover-nginx:v0.0.1</span><br><span class="line">sha256:3c5ae6aa7604e19944106c35299f2b317ae454a4a34bbf0a6875aad7aabcc296</span><br></pre></td></tr></table></figure>

<p>可以再检查一下已下载的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker images</span><br><span class="line">REPOSITORY     TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">clover-nginx   v0.0.1    3c5ae6aa7604   27 seconds ago   141MB</span><br><span class="line">nginx          latest    605c77e624dd   3 months ago     141MB</span><br></pre></td></tr></table></figure>

<p>测试一下，将之前在运行的nginx删掉，直接运行我们刚刚 commit 的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 88:80 --name=clover-nginx clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<p>再访问，它保留了我们上次修改容器的结果</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010917406.png" alt="commit 镜像启动结果"></p>
<h3 id="镜像传输"><a href="#镜像传输" class="headerlink" title="镜像传输"></a><strong>镜像传输</strong></h3><p>当我们做好一个镜像后，如果我们需要给别人分享，有两种办法，一种是物理传输，还有一种是推送至远程仓库。</p>
<p>可以先使用 <code>docker save [OPTIONS] IMAGE [IMAGE...]</code> 命令将镜像压缩</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker save -o clover-nginx.tar  clover-nginx:v0.0.1</span><br><span class="line">[root@i-ul0sb6hn ~]# ls</span><br><span class="line">clover-nginx.tar</span><br></pre></td></tr></table></figure>

<p>之后直接将 <code>clover-nginx.tar</code> 分享出去就行了</p>
<p>再通过 <code>docker load [OPTIONS]</code> 命令加载这个镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker load -i ./clover-nginx.tar</span><br><span class="line">Loaded image: clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<p>检查镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker images</span><br><span class="line">REPOSITORY     TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">clover-nginx   v0.0.1    3c5ae6aa7604   19 minutes ago   141MB</span><br></pre></td></tr></table></figure>

<hr>
<p>推送到远程仓库，先创建一个镜像仓库</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010939283.png" alt="创建仓库"></p>
<p>填好仓库信息后点【create】就好</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010941163.png" alt="创建"></p>
<p>给我们本地镜像加个标签 <code>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag clover-nginx:v0.0.1 cloveryou/clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<p>最后通过 <code>docker push</code> 命令将镜像推送</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push cloveryou/clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<p>以上操作是需要登录的，如果没有登录需要使用 <code>docker login</code> 登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker login -u &lt;user name&gt; -p &lt;password&gt;</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<p>登录成功后再重新推送</p>
<p>推送成功刷新仓库就可以看到了</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010951531.png" alt="推送结果"></p>
<p>如果是公开的仓库，也可以通过搜索搜到</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204010952767.png" alt="搜索结果"></p>
<p>最后需要用就直接下载就好啦</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull cloveryou/clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="挂载数据到外部"><a href="#挂载数据到外部" class="headerlink" title="挂载数据到外部"></a><strong>挂载数据到外部</strong></h3><p>像我们之前修改nginx，是需要进入到容器里修改，其实可以将容器中的某个文件夹挂载到主机的某个位置。<code>docker run --name=xxx -d -v [target path]:[source path]:[缺省，ro容器内只读，rw容器内可读写]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=clover-nginx -d -p 88:80 -v /data/html:/usr/share/nginx/html:ro clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-v</code> 将容器中某个目录挂在到主机上，如果挂载的是一个文件，那么这个文件在主机上必须存在</li>
</ul>
<p>启动后我们只要在主机的 <code>/data/html</code></p>
<h3 id="检查容器日志"><a href="#检查容器日志" class="headerlink" title="检查容器日志"></a><strong>检查容器日志</strong></h3><p><code>docker logs &lt;container&gt;</code></p>
<h3 id="复制容器文件到主机"><a href="#复制容器文件到主机" class="headerlink" title="复制容器文件到主机"></a>复制容器文件到主机</h3><p><code>docker cp &lt;container&gt;:&lt;source path&gt; &lt;target path&gt;</code></p>
<p>例如将nginx中的文件复制出来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 52924565fcfc:/etc/nginx /data/nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn data]# ls</span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash"> nginx</span></span><br></pre></td></tr></table></figure>

<p>然后将nginx的配置文件挂载到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=clover-nginx -d -p 88:80 \</span><br><span class="line">-v /usr/share/html:/data/html:ro \</span><br><span class="line">-v /etc/nginx:/data/nginx:ro \</span><br><span class="line">cloveryou/clover-nginx:v0.0.1</span><br></pre></td></tr></table></figure>

<h2 id="将现有应用打包成-Docker-镜像"><a href="#将现有应用打包成-Docker-镜像" class="headerlink" title="将现有应用打包成 Docker 镜像"></a>将现有应用打包成 Docker 镜像</h2><p>以 SpringBoot 为例，先将我们的项目打包成 <code>.jar</code> 包。然后编写一个 <code>Dockerfile</code> 将这个 <code>.jar</code> 打包成 Docker 镜像。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-slim</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=CloverYou</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/**.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>由于 Docker 镜像都是一个很小的 Linux 系统，并没有我们的运行环境，所以需要指定安装jdk环境 <code>openjdk:8-jdk-slim</code>。</p>
<p>然后将项目打包结果复制到 Linux 的某个位置，<code>ENTRYPOINT</code> 用于 Docker 启动时执行的命令，也可以使用 <code>CMD</code>。让 Docker 启动时执行 <code>java -jar /app.jar</code> 启动我们的项目。</p>
<p>Dockerfile 文件编写好后，需要到一个有 Docker 环境的机子上执行。</p>
<p>执行 <code>docker build [OPTIONS] &lt;工作路径&gt;</code> 命令打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t spring-boot-hello-world:v1.0.0 .</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果出现以下错误，那是因为 Dockerfile 不能放在 <code>/</code> 目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error checking context: &#x27;file (&#x27;/proc/1500/fd/7&#x27;) not found or excluded by .dockerignore&#x27;.</span><br></pre></td></tr></table></figure>

<p>打包完成后查看镜像，就可以看到我们打包的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker images</span><br><span class="line">REPOSITORY                TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">spring-boot-hello-world   v1.0.0       a9c63c4b9ad4   6 seconds ago   313MB</span><br></pre></td></tr></table></figure>

<p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:8080 --name=helloworld spring-boot-hello-world:v1.0.0</span><br></pre></td></tr></table></figure>

<p>检查是否启动成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@i-ul0sb6hn ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                CREATED         STATUS         PORTS                                   NAMES</span><br><span class="line">7f62352ef378   spring-boot-hello-world:v1.0.0   &quot;java -jar /app.jar&quot;   3 seconds ago   Up 3 seconds   0.0.0.0:80-&gt;8080/tcp, :::80-&gt;8080/tcp   helloworld</span><br></pre></td></tr></table></figure>

<p>然后访问我们的服务就可以了</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202204011533435.png" alt="执行结果"></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch-学习笔记</title>
    <url>/2021/12/21/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Index（索引）"><a href="#Index（索引）" class="headerlink" title="Index（索引）"></a>Index（索引）</h3><p>保存一条数据到 ElasticSearch 中叫做索引一条数据</p>
<h3 id="Type（类型）"><a href="#Type（类型）" class="headerlink" title="Type（类型）"></a>Type（类型）</h3><p>在 <strong>Index</strong> 中，可以定义一个或多个类型，它类似于 MySQL 中的 Table。每一种类型的数据都放在一起。</p>
<h3 id="Document（文档）"><a href="#Document（文档）" class="headerlink" title="Document（文档）"></a>Document（文档）</h3><p>保存在某个索引下某种类型中的一条数据（Document），在 ES 中，每一个数据都叫文档。 文档是 JSON 格式的，Document 就像是 MySQL 中的某个 Table 里面保存的内容。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-12-15%2016.34.31.png" alt="截屏2021-12-15 16.34.31"></p>
<h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><h2 id="Docker-安装ES、Kibana"><a href="#Docker-安装ES、Kibana" class="headerlink" title="Docker 安装ES、Kibana"></a>Docker 安装ES、Kibana</h2><h3 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.4.2   es搜索引擎</span><br><span class="line">docker pull kibana:7.4.2   可视化检索数据</span><br></pre></td></tr></table></figure>



<h3 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h3><p>在本地创建 config 文件夹，用于存放 ES 配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ~/code/elasticsearch/config</span><br></pre></td></tr></table></figure>

<p>创建 data 文件夹，用于存放 ES 数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ~/code/elasticsearch/data</span><br></pre></td></tr></table></figure>

<p>使用 docker 启动 ES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v ~/code/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v ~/code/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v  ~/code/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.4.2 </span><br></pre></td></tr></table></figure>

<p>在浏览器上访问 <code>http://localhost:9200/</code> ，如果显示以下内容，则代表安装&#x2F;启动成功</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-12-19%2010.32.26.png" alt="截屏2021-12-19 10.32.26"></p>
<h3 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h3><p>在 docker 中安装了 Kibana 之后，使用 <code>docker run</code> 启动它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.21.133:9200 -p 5601:5601 \</span><br><span class="line">-d kibana:7.4.2</span><br></pre></td></tr></table></figure>

<p>稍等一会后在浏览器中输入 <code>http://127.0.0.1:5601</code> 访问 Kibana。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-12-19%2010.53.12.png" alt="截屏2021-12-19 10.53.12"></p>
<h2 id="初步检索"><a href="#初步检索" class="headerlink" title="初步检索"></a>初步检索</h2><h3 id="cat"><a href="#cat" class="headerlink" title="_cat"></a>_cat</h3><p>查看所有节点</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">get /_cat/nodes</span><br></pre></td></tr></table></figure>

<p>查看 es 健康状况</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">get /_cat/health</span><br></pre></td></tr></table></figure>

<p>查看主节点</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">get /_cat/master</span><br></pre></td></tr></table></figure>

<p>查看所有索引</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">get /_cat/indices</span><br></pre></td></tr></table></figure>



<h3 id="索引一个文档"><a href="#索引一个文档" class="headerlink" title="索引一个文档"></a>索引一个文档</h3><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p>保存一条数据，该方式需要指定一个id。保存在那个索引那中的的哪个类型下，指定使用一个唯一标识。同样的请求若发送多次，那么被 ES 视为更新操作</p>
<p>在 <strong>customer</strong> 索引下的 <strong>external</strong> 类型中保存一条 “id” 为 <strong>1</strong> 的数据</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">put customer/external/1</span><br><span class="line">&#123;&quot;name&quot;: &quot;Clover You&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>发送以上请求成功后得到返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;costomer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extenal&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在返回数据中，所有带 “**_**” 的都称为元数据，例如 “_index”</p>
<ul>
<li><code>_index</code> 当前插入的这条数据在哪个索引下</li>
<li><code>_type</code> 当前插入的数据在哪个类型下</li>
<li><code>_id</code> 这条数据保存的id</li>
<li><code>_version</code> 当前数据的版本号</li>
<li><code>result</code> 当前操作结果<ul>
<li><code>created</code> 表示新建数据</li>
<li><code>updated</code> 表示修改数据</li>
<li><code>noop</code> 无任何操作</li>
</ul>
</li>
<li><code>_shards</code> 分片</li>
<li></li>
</ul>
<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>POST 的方式和 PUT差不多，只不过 POST 可以不指定id。如果不指定id，那么就会自动生成一个id。如果指定id那么就会修改这个id的数据，并新增版本号。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">post customer/external/1</span><br><span class="line">&#123;&quot;name&quot;: &quot;Clover You&quot;&#125;</span><br></pre></td></tr></table></figure>





<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>使用 GET 请求查询文档</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">get customer/external/1</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;costomer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extenal&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clover You&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>_index</code> 查询的文档在哪个索引下</li>
<li><code>_type</code> 查询的文档在哪个类型下</li>
<li><code>_id</code> 查询的文档的唯一id</li>
<li><code>_version</code> 文档的版本号</li>
<li><code>_seq_no</code> 并发控制字段，每次更新都会 +1，用来做乐观锁</li>
<li><code>_primary_term</code>  与 <code>_seq_no</code> 一样，主分片重新分配，如重启，就会变化</li>
</ul>
<blockquote>
<p>如果需要做乐观锁，需要带上 <code>_seq_no</code> 和 <code>_primary_term </code>参数:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">put customer/external/1?if_seq_no=0&amp;if_primary_term=1</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p> 除了使用以上描述的 POST 与 PUT 的方式更新文档外，还可以使用专门的接口进行更新。该操作会拿新旧文档元数据进行比较，如果没有任何更改，那么就不更新。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">post costomer/extenal/1/_update</span><br><span class="line">&#123;</span><br><span class="line">	&quot;doc&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;new name&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>发送 DELETE 请求指定索引、类型与唯一标识即可删除指定文档</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">delete costomer/extenal/1</span><br></pre></td></tr></table></figure>



<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>ES 没有提供删除类型的接口，但它提供了删除索引的接口</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">delete costomer</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><p>ES 提供了一个批量操作接口 <code>index/type/_bulk</code> ，这个接口支持新增修改删除等操作。它需要发送一个 POST 请求，并且数据格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clover&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clover You&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>该接口的数据需要两行为一组，第一行<code>&#123;&quot;动作，如：新增修改删除&quot;: &#123;&quot;_id&quot;: 文档唯一标识&#125;&#125;</code>，第二行是需要操作的数据，<code>&#123;&quot;name&quot;: &quot;Clover You&quot;&#125;</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST /costomer/extenal/_bulk</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 10&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Clover&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 11&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Clover You&quot;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;costomer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;extenal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">201</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;costomer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;extenal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">201</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>took</code> 完成一共花费了多少毫秒</li>
<li><code>errors</code> 是否有错误</li>
<li><code>items</code> 每个子级都对应了每个操作，他们都是独立的，任何操作出错都不会影响到其它操作。</li>
</ul>
<h4 id="对整个ES进行批量操作"><a href="#对整个ES进行批量操作" class="headerlink" title="对整个ES进行批量操作"></a>对整个ES进行批量操作</h4><p>除了 <code>index/type/_bulk</code> 接口外，还有一个 <code>_bulk</code> 接口可以对整个ES进行操作</p>
<p>它的操作与 <code>index/type/_bulk</code> 的操作没有很大区别</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">post /_bulk</span><br><span class="line">&#123;&quot;index&quot;, &#123;&quot;_index&quot;: &quot;costomer&quot;, &quot;_type&quot;: &quot;extenal&quot;, &quot;_id&quot;: &quot;123&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;clover&quot;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_index</code> 指定操作的索引</li>
<li><code>_type</code> 指定操作的类型</li>
<li><code>_id</code> 文档唯一标识</li>
</ul>
<h2 id="进阶检索"><a href="#进阶检索" class="headerlink" title="进阶检索"></a>进阶检索</h2><p><a href="https://github.com/elastic/elasticsearch/blob/v7.4.2/docs/src/test/resources/accounts.json">测试数据</a></p>
<h3 id="SearchAPI"><a href="#SearchAPI" class="headerlink" title="SearchAPI"></a>SearchAPI</h3><p>ES 支持两种基本方式进行检索</p>
<ul>
<li><p>一个是通过使用 REST request URI 发送搜索参数</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search?q=*&amp;sort=account_number:asc</span><br></pre></td></tr></table></figure>


</li>
<li><p>另一种是通过使用 REST request body 来发送它们</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;&quot;account_number&quot;: &quot;asc&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h3><p>ElasticSearch 提供了一个可以执行查询的 JSON 风格的 DSL（domain-specific language领域特定语言）。它被称为Query DSL</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  QUERY_NAME<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ARGUMENT<span class="punctuation">:</span> VALUE<span class="punctuation">,</span></span><br><span class="line">    ARGUMENT<span class="punctuation">:</span> VALUE</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 如果针对的是某个字段，那么他的语法：</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  QUERY_NAME<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    FIELD_NAME<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      ARGUMENT<span class="punctuation">:</span> VALUE<span class="punctuation">,</span></span><br><span class="line">      ARGUMENT<span class="punctuation">:</span> VALUE</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="match-全文检索"><a href="#match-全文检索" class="headerlink" title="match 全文检索"></a>match 全文检索</h4><p>全文检索按照评分进行排序，会使用到排索引对检索条件进行分词匹配</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;mill lane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">9.507477</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">9.507477</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="match-phrase-短语匹配"><a href="#match-phrase-短语匹配" class="headerlink" title="match_phrase 短语匹配"></a>match_phrase 短语匹配</h4><p>将需要匹配的值当成一个整体单词进行检索（不进行分词）和 MySQL 中的 <code>like</code> 一致</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;Mill Lane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">9.507477</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">9.507477</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="multi-match-多字段匹配"><a href="#multi-match-多字段匹配" class="headerlink" title="multi_match 多字段匹配"></a>multi_match 多字段匹配</h4><p>可以对多个字段使用到排索引进行检索</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;mill urie&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;address&quot;, &quot;city&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.505949</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.505949</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;472&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;288 Mill Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Movico&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="bool-复合查询"><a href="#bool-复合查询" class="headerlink" title="bool 复合查询"></a>bool 复合查询</h4><p>如果需要使用更复杂的查询，可以使用 <code>bool</code> 查询，它可以帮我们构造更加复杂的查询。他可以合并多个查询条件</p>
<ul>
<li><code>must_not</code> 必须不是指定条件</li>
<li><code>must</code> 必须满足指定条件</li>
<li><code>should</code> 尽量满足指定条件</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;Street&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;gender&quot;: &quot;f&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">385</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.661185</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;13&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.661185</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;789 Madison Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;32&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.661185</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;702 Quentin Street&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;87&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.95395315</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;446 Halleck Street&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;107&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.95395315</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;694 Jefferson Street&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="term-检索"><a href="#term-检索" class="headerlink" title="term 检索"></a>term 检索</h4><p>在检索精确字段时，官方推荐使用 <code>term</code> 检索，如果不是精确字段，不推荐使用 <code>term</code> 进行检索，例如字符串可能不是精确字段。因为 ES 在保存文档的时候使用了分词的问题</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="aggregations（执行聚合）"><a href="#aggregations（执行聚合）" class="headerlink" title="aggregations（执行聚合）"></a>aggregations（执行聚合）</h3><p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于 <strong>SQL GROUP BY</strong> 和 SQL 聚合函数。在 ES 中，你有执行搜索返回 <strong>hits</strong>（命中结果）并同时返回聚合结果。把一个响应中的所有 <strong>hits</strong> 分割开的能力。这是非常强大且有效的，你可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个）返回结果，使用一次简洁和简化的 <strong>API</strong> 来避免网络往返。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;&lt;aggregation_name&gt;&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;&lt;aggregation_type&gt;&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &lt;aggregation_body&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">,</span><span class="attr">&quot;meta&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="punctuation">[</span>&lt;meta_data_body&gt;<span class="punctuation">]</span> <span class="punctuation">&#125;</span> <span class="punctuation">]</span>?</span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">,</span><span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">[</span>&lt;sub_aggregation&gt;<span class="punctuation">]</span>+ <span class="punctuation">&#125;</span> <span class="punctuation">]</span>?</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">[</span><span class="punctuation">,</span><span class="attr">&quot;&lt;aggregation_name_2&gt;&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> ... <span class="punctuation">&#125;</span> <span class="punctuation">]</span>*</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>例如搜索address中包含mill的所有人的年龄分布以及平均年龄</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;mill&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;ageAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ageAvg&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">34.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>按照年龄聚合，并且请求这些年龄段的这些人的平均工资</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;ageAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;size&quot;: 100</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;ageAvg&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">61</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28312.918032786885</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">25269.583333333332</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">59</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">23194.813559322032</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">23951.346153846152</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">22136.69230769231</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">22174.71153846154</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">24731.07843137255</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28273.882352941175</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">33</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">25093.94</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">49</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26809.95918367347</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">47</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">22841.106382978724</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26981.434782608696</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27183.17777777778</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27741.227272727272</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27314.214285714286</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28519.04761904762</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27445.214285714286</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27022.261904761905</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">21471.871794871793</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26187.17948717949</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">29483.14285714286</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查出所有年龄分布，并且这些年龄段中  M  的平均薪资和  F  的平均薪资以及这个年龄 段的总体平均薪资</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">	  # 年龄分布情况</span><br><span class="line">    &quot;ageAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;size&quot;: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">      	# 每个年龄的性别分布情况</span><br><span class="line">        &quot;genderAgg&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;gender.keyword&quot;,</span><br><span class="line">            &quot;size&quot;: 2</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">          	# 每个性别的平均工资</span><br><span class="line">            &quot;balanceAvg&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        # 每个年龄段的平均工资</span><br><span class="line">        &quot;ageBalanceAvg&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">879</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">61</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;genderAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">29565.628571428573</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26626.576923076922</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageBalanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28312.918032786885</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;genderAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26348.684210526317</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">23405.68181818182</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageBalanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">25269.583333333332</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="Mapping（映射）"><a href="#Mapping（映射）" class="headerlink" title="Mapping（映射）"></a>Mapping（映射）</h3><p>映射是用来定义文档是如何被进行处理的，也就是说它是如何被检索和索引的，例如我们可以自定义：</p>
<ul>
<li>哪些 string 类型的字段应该被当成全文检索的字段</li>
<li>哪个属性包含数字、日期或地理位置坐标</li>
<li>日期的格式化信息</li>
<li>可以使用自定义规则来控制动态字段的映射</li>
</ul>
<blockquote>
<ul>
<li>关系型数据库中两个数据表是独立的，即使它们里面有相同名称的列也不影响使用，但在 ES 中不是这样的。ES 是基于 Lucene 开发的搜索引擎，而 ES 中不同 type 下名称相同的 filed 最终在 Lucene 中的处理方式是一样的。<ul>
<li>两个不同 type 下的两个 user_name，在 ES 同一个索引下其实被认为是同一个 filed，你必须在两个不同的 type 中定义相同的 filed 映射。否则，不同 type 中的相同字段名称就会在处理中出现冲突的情况，导致 Lucene 处理效率下降。</li>
</ul>
</li>
<li>ElasticSearch 7.x<ul>
<li>URL 中的 type 参数为可选。比如：索引一个文档不再要求文档类型。</li>
</ul>
</li>
<li>ElasticSearch 8.x<ul>
<li>不再支持 URL 中的 type 参数</li>
</ul>
</li>
<li>解决：将索引从多类型迁移到单类型，每种类型文档一个独立索引</li>
</ul>
</blockquote>
<h4 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h4><p>可以在创建索引时创建映射规则</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;: &#123;&quot;type&quot;: &quot;integer&quot;&#125;,</span><br><span class="line">      &quot;email&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;name&quot;: &#123;&quot;type&quot;: &quot;text&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="添加新字段映射"><a href="#添加新字段映射" class="headerlink" title="添加新字段映射"></a>添加新字段映射</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT my_index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;prope rties&quot;: &#123;</span><br><span class="line">    &quot;employee-id&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;long&quot;,</span><br><span class="line">      &quot;index&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>index</code> 指定该字段是否参与检索，默认为 <code>true</code></li>
</ul>
<h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><blockquote>
<p>对于已存在的映射，是不能被修改的</p>
</blockquote>
<p>若需要将旧索引中的数据迁移到指定索引中，可以使用 <code>_reindex</code> API进行操作，先创建对应的索引：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT newindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;account_number&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;balance&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;keyword&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            &quot;ignore_above&quot;: 256</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;email&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;employer&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;keyword&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            &quot;ignore_above&quot;: 256</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;firstname&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;keyword&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            &quot;ignore_above&quot;: 256</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;gender&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;lastname&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;keyword&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            &quot;ignore_above&quot;: 256</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;state&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;keyword&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            &quot;ignore_above&quot;: 256</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后发送指定请求将数据迁移</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;bank&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;account&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;newindex&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>source</code> 源数据<ul>
<li><code>index</code> 源数据所在的索引</li>
<li><code>type</code> 源数据所在的类型，如果没有可不填</li>
</ul>
</li>
<li><code>dest</code> 目标数据<ul>
<li><code>index</code> 目标索引</li>
<li><code>type</code> 迁移到目标索引的指定类型下</li>
</ul>
</li>
</ul>
<h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p>一个 tokenizer（分词器）接收一个字符流，将之分割为独立的 tokens（词元，通常是独立的单词），然后输出 tokens 流。它遇到空白字符时就分割文本，他会将文本 <strong>“Quick brown fox!”</strong> 分割为  **[Quick, brown, fox!]**。该 <strong>tokenizer</strong> 还负责记录各个 <strong>term（词条）</strong>的顺序或 <strong>position</strong> 位置（用于 <strong>phrase</strong> 短语和 <strong>word proximity</strong> 词近邻查询），以及 <strong>term</strong> 所代表的原始 <strong>word（单词）</strong>的 <strong>start（起始）</strong>和 <strong>end（结束）</strong>的 <strong>character offsets（字符偏移量， 用于高亮显示搜索内容）</strong>。ES 提供了很多内置的分词器，可以用来构建 <strong>custom analyzers（自定义分词器）</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hello&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;world&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="ik分词器"><a href="#ik分词器" class="headerlink" title="ik分词器"></a>ik分词器</h4><p>到<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">GitHub</a>中安装对应版本的ik分词器并解压到 <code>plugins</code> 目录，最后重启 ES即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart esid</span><br></pre></td></tr></table></figure>

<p><strong>ik</strong> 提供了两种分词器，分别是<code>ik_smart</code> 、<code>ik_max_word</code></p>
<p>使用 <strong>ik</strong> 分词器中的 <code>ik_smart</code>，可以对指定文本进行智能分词</p>
<blockquote>
<p><code>ik_smart</code> 效果</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;日出于东却落于西,相识人海却散于席&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;日&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;出于&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;东&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;却&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;落于&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;西&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;相识&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人海&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;却&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;散&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;于&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;席&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>ik_max_word</code> 效果</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;日出于东却落于西,相识人海却散于席&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;日出&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;出于&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;东&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;却&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;落于&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;西&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;相识&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人海&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;却&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;散&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;于&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;席&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="自定义扩展分词库"><a href="#自定义扩展分词库" class="headerlink" title="自定义扩展分词库"></a>自定义扩展分词库</h4><p>在 <strong>ik</strong> 分词器配置中，修改<code>elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://192.168.21.133/es/fenci.txt<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把 <code>http://192.168.21.133/es/fenci.txt</code> 改成你自己词库的位置，格式如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">电商</span><br><span class="line">乔碧萝</span><br><span class="line">乔碧萝殿下</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用 <code>nginx</code> 来部署你的词库</p>
</blockquote>
<p>修改后需要重启 <strong>ElasticSearch</strong> <code>docker restart container_id</code></p>
<p>看效果：</p>
<blockquote>
<p>添加词库前</p>
</blockquote>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-12-20%2016.21.09.png" alt="添加词库前"></p>
<blockquote>
<p>添加词库后</p>
</blockquote>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-12-20%2016.18.20.png" alt="修改词库后"></p>
<h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h2><p>使用官方提供的高阶依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还需要把 SpringBoot 默认导入的 ES 版本修改，只需要将版本号对应你需要导入的版本就好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置 ES</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliMallElasticSearchConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">    COMMON_OPTIONS = builder.build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">      RestClient.builder(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="IndexRequest"><a href="#IndexRequest" class="headerlink" title="IndexRequest"></a>IndexRequest</h4><p><code>IndexRequest</code> 用于索引一条文档，如果索引不存在则创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient esClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">indexTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">  request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  user.setUserName(<span class="string">&quot;clover&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">19</span>);</span><br><span class="line">  request.source(<span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(user), XContentType.JSON);</span><br><span class="line">  <span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> esClient.index(request, GuliMallElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">  log.info(<span class="string">&quot;index: &#123;&#125;&quot;</span>, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>IndexRequest</code> </p>
<p>他有以下三个构造，分别是指定索引、指定索引和类型、指定索引、类型和唯一标识，在 <strong>7.x</strong> 中最常用的是第一个构造，可以使用 <code>(new IndexRequest(&quot;xxx&quot;)).id(&quot;xxx&quot;)</code> 来指定唯一标识。</p>
<ol>
<li><code>public IndexRequest(String index)</code></li>
<li><code>public IndexRequest(String index, String type)</code></li>
<li><code>public IndexRequest(String index, String type, String id)</code></li>
</ol>
<p>可通过 <code>source</code> 方法传递参数，这个方法有非常多的重载，但最常用的是这两个</p>
<ol>
<li><code>public IndexRequest source(Map&lt;String, ?&gt; source)</code> 可以传递一个 <strong>Map</strong> ，非常方便</li>
<li><code>public IndexRequest source(String source, XContentType xContentType)</code> 将 <code>xContentType</code> <strong>指定为 <code>JSON</code></strong> 后可传一个 <code>JSON</code> 字符串。</li>
</ol>
</li>
</ul>
<p>请求构造好后使用 <code>RestHighLevelClient</code> 中对应的api将请求发送出去。</p>
<h3 id="复杂检索"><a href="#复杂检索" class="headerlink" title="复杂检索"></a>复杂检索</h3><p>排按照年齡聚合，并且请求这些年龄段的这些人的平均薪资</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;ageAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;size&quot;: 100</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;balanceAvg&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;复杂检索&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">searchRequestTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="comment">// 创建一个检索请求</span></span><br><span class="line">  <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">  <span class="comment">// 指定索引</span></span><br><span class="line">  request.indices(<span class="string">&quot;bank&quot;</span>);</span><br><span class="line">  <span class="comment">// 创建检索条件</span></span><br><span class="line">  <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">  searchSourceBuilder.size(<span class="number">100</span>);</span><br><span class="line">  <span class="comment">// &quot;query&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//     &quot;match_all&quot;: &#123;&#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">  <span class="comment">// &quot;query&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//     &quot;match&quot;: &#123;&quot;address&quot;, &quot;mill&quot;&#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//        searchSourceBuilder.query(QueryBuilders.matchQuery(&quot;address&quot;, &quot;mill&quot;));</span></span><br><span class="line">  <span class="comment">// 聚合</span></span><br><span class="line">  <span class="comment">//&quot;aggs&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//  &quot;ageAgg&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//    &quot;terms&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//      &quot;field&quot;: &quot;age&quot;,</span></span><br><span class="line">  <span class="comment">//      &quot;size&quot;: 100</span></span><br><span class="line">  <span class="comment">//    &#125;</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  searchSourceBuilder.aggregation(AggregationBuilders.terms(<span class="string">&quot;ageAgg&quot;</span>).field(<span class="string">&quot;age&quot;</span>).size(<span class="number">100</span>)</span><br><span class="line">                                  <span class="comment">//&quot;aggs&quot;: &#123;</span></span><br><span class="line">                                  <span class="comment">//  &quot;ageAgg&quot;: &#123;</span></span><br><span class="line">                                  <span class="comment">//    &quot;terms&quot;: &#123;</span></span><br><span class="line">                                  <span class="comment">//      &quot;field&quot;: &quot;age&quot;,</span></span><br><span class="line">                                  <span class="comment">//      &quot;size&quot;: 100</span></span><br><span class="line">                                  <span class="comment">//    &#125;,</span></span><br><span class="line">                                  <span class="comment">//    &quot;aggs&quot;: &#123;</span></span><br><span class="line">                                  <span class="comment">//      &quot;ageAvg&quot;: &#123;</span></span><br><span class="line">                                  <span class="comment">//        &quot;avg&quot;: &#123;</span></span><br><span class="line">                                  <span class="comment">//          &quot;field&quot;: &quot;balance&quot;</span></span><br><span class="line">                                  <span class="comment">//        &#125;</span></span><br><span class="line">                                  <span class="comment">//      &#125;</span></span><br><span class="line">                                  <span class="comment">//    &#125;</span></span><br><span class="line">                                  <span class="comment">//  &#125;</span></span><br><span class="line">                                  <span class="comment">//&#125;</span></span><br><span class="line">                                  .subAggregation(AggregationBuilders.avg(<span class="string">&quot;balanceAvg&quot;</span>).field(<span class="string">&quot;balance&quot;</span>))</span><br><span class="line">                                 );</span><br><span class="line">  <span class="comment">// 指定DSL</span></span><br><span class="line">  request.source(searchSourceBuilder);</span><br><span class="line">  <span class="comment">// 执行检索</span></span><br><span class="line">  <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> esClient.search(request, GuliMallElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign远程调用丢失请求头问题</title>
    <url>/2022/02/25/Feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%A2%E5%A4%B1%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在业务中，需要使用A、B两个模块，这些模块使用了SpringSession共享Session数据。在B模块中的业务需要用户登录后才能操作。当A调用B的业务时，在B模块中获取不到用户的Session信息，导致B模块判定该请求用户没有登录导致A模块拿不到所需数据。问题是A模块可以拿到该用户的登录信息并且，已经使用了SpringSession进行共享Session数据。</p>
<h2 id="找出问题原因"><a href="#找出问题原因" class="headerlink" title="找出问题原因"></a>找出问题原因</h2><p>使用Feign发送远程调用</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252024388.png" alt="发送远程请求"></p>
<p>当请求进到B服务时被其登录验证拦截器拦截，试图去Session中拿登录信息时，结果为 <code>null</code>（已确定登录）</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252024925.png" alt="B服务检查登录拦截器"></p>
<p>我们都知道，session的原理是需要通过 cookie 中的某个值(jesessionid)来确定一个Session对象，在B模块中拿不到用户数据是因为无法通过指定cookie来获取这个到Session对象。</p>
<p>为了解决这个问题，需要Debug一下Feign的流程。</p>
<h2 id="Feign-流程"><a href="#Feign-流程" class="headerlink" title="Feign 流程"></a>Feign 流程</h2><p>查询发送请求，来到远程调用代码打断点，setup into 进去检查</p>
<p>![1](&#x2F;Users&#x2F;clover&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2022-02-25 下午8.27.51.png)</p>
<p>在判断不是<code>equals、hashCode、toString</code>等方法时，执行 <code>invoke</code>方法进行远程调用，setup into进入</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252030829.png" alt="进入invoke方法"></p>
<p>在<code>invoke</code>方法中，首先去创建一个<strong>新</strong>的请求模板，这个模板包含了我们的请求头等请求信息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252032189.png" alt="创建request请求模板"></p>
<p>并没有其它特殊处理就直接调用 <code>Client</code> 发送请求了<br><img src="https://qiniu-note-image.ctong.top/note/images/202202252037539.png" alt="请求发送"></p>
<p>从 feign 的流程看出，它是直接给我门创建一个新的请求，并没有给我们封装浏览器给A服务发送请求时携带的请求头等信息。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在debug过程中，发现 <code>executeAndDecode</code> 方法中在调用 <code>Client</code> 发送请求时有一个 <code>this.targetRequest(template);</code> 操作，它返回一个 <code>Request</code> ，<code>Client</code> 发送请求时代的就是这个request对象。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252043801.png" alt="Request"></p>
<p>在 <code>targetRequest</code> 方法中发现，他会拿到一个什么拦截器 <code>requestInterceptors</code>，然后便利调用它的 <code>apply</code> 方法并把它创建的请求模板传过去 <code>RequestTemplate</code> ，而这个 <code>RequestInterceptors</code> 是在容器中拿的，所以我们只需要在容器中添加一个 <code>RequestInterceptors</code> 组件即可。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252045067.png" alt="targetRequest内部"></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignFillContent</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">        <span class="comment">// 同步cookie</span></span><br><span class="line">        requestTemplate.header(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么问题来了，我们应该如何拿到Cookie？其实这个问题也很简单，我们可以搞一个拦截器，然后把<code>HttpServletRequest</code>保存在 <code>ThreadLocal</code> 中即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;HttpServletRequest&gt; THREAD_LOCAL_REQUEST = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                           HttpServletResponse response,</span></span><br><span class="line"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    THREAD_LOCAL_REQUEST.set(request);</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    ...</span><br><span class="line">      THREAD_LOCAL_REQUEST.remove();</span><br><span class="line">    HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>SpringBoot</code> 也有这种工具提供，不需要我们额外写多余的类 <code>RequestContextHolder</code>，这个类的原理也是使用 <code>ThreadLocal</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignFillContent</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求上下文</span></span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步cookie</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">myCookies</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Cookie&quot;</span>);</span><br><span class="line">    requestTemplate.header(<span class="string">&quot;Cookie&quot;</span>, myCookies);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下，B服务成功拿到用户登录信息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252116894.png" alt="测试"></p>
<h2 id="异步环境下问题重现"><a href="#异步环境下问题重现" class="headerlink" title="异步环境下问题重现"></a>异步环境下问题重现</h2><p>在单线程环境下没毛病，但在多线程，例如 <code>CompletableFuture</code> 下还是会出现问题，这次问题是我请求拦截器抛出空指针异常。</p>
<p>这个问题是因为 <code>ThreadLocal</code> 底层时Map，键使用的是当前线程对象，所以在单线程环境下没问题，一使用异步就出现问题。因为异步后是一个新的线程，已经不再是我们原来处理请求的那个线程了，所以通过当前线程对象是拿不到ThreadLocal中的数据的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取购物项</span></span><br><span class="line">CompletableFuture&lt;Void&gt; cartItemFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">  <span class="type">R</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartFeignService.getCurrentUserCartItem();</span><br><span class="line">  ...</span><br><span class="line">&#125;, executor);</span><br></pre></td></tr></table></figure>

<h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>这个问题也很简单，就是共享 <code>ThreadLocal</code>也就是将指定 ThreadLocal 复制到指定线程的 ThreadLocal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> OrderConfirmVo <span class="title function_">confirmOrder</span><span class="params">()</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">myReqContext</span> <span class="operator">=</span> RequestContextHolder.currentRequestAttributes();</span><br><span class="line">  <span class="comment">// 查询会员所有收货地址</span></span><br><span class="line">  CompletableFuture&lt;Void&gt; memberFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 复制一份ThreadLocal</span></span><br><span class="line">    RequestContextHolder.setRequestAttributes(myReqContext);</span><br><span class="line">    <span class="type">R</span> <span class="variable">memberReceiveAddress</span> <span class="operator">=</span> memberFeignService.getMemberReceiveAddress(mrv.getId());</span><br><span class="line">    ...</span><br><span class="line">  &#125;, executor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取购物项</span></span><br><span class="line">  CompletableFuture&lt;Void&gt; cartItemFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 复制一份ThreadLocal</span></span><br><span class="line">    RequestContextHolder.setRequestAttributes(myReqContext);</span><br><span class="line">    <span class="type">R</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartFeignService.getCurrentUserCartItem();</span><br><span class="line">    ...</span><br><span class="line">  &#125;, executor);</span><br><span class="line"></span><br><span class="line">  CompletableFuture.allOf(memberFuture, cartItemFuture).join();</span><br><span class="line">  <span class="keyword">return</span> vo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202202252142071.png" alt="结果"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>随笔</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Http网络协议包简单学习</title>
    <url>/2022/01/02/Http%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8C%85%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Http网络协议包"><a href="#Http网络协议包" class="headerlink" title="Http网络协议包"></a>Http网络协议包</h1><ol>
<li><p>在网络中传递信息都是以<strong>二进制</strong>形式存在的。</p>
</li>
<li><p>接收方（浏览器、服务器）在接收到信息后，要做第一件事就是将二进制数据进行编译，例如文字、图片、视频、命令等</p>
</li>
<li><p>传递的信息数据量往往都比较巨大，因此导致接收方很难在一组连续的二进制中得到对应数据，例如<br>浏览器发送一个请求：<a href="http://xxx/xxx">http://xxx/xxx</a></p>
<p>这个请求信息以二进制发送，例如：01010100101010101010100110101011010111100</p>
<p>Http服务器很难从这组二进制数据中得到相关信息</p>
</li>
<li><p>网络协议包是一组有规律的二进制数据，在这组数据中存在了固定空间，每一个空间里main专门存放特定的信息，这样接收放在收到网络协议包之后就可以到固定的空间得到对应信息，网络协议包的出现极大程度降低了接收方对接收到的二进制的编译难度。<br>[0000（ip地址） 0000（端口号） 0000（资源文件名） 0000]</p>
</li>
</ol>
<h1 id="常见网络协议"><a href="#常见网络协议" class="headerlink" title="常见网络协议"></a>常见网络协议</h1><ol>
<li>FTP网络协议包</li>
<li>Http网络协议包</li>
<li>Https网络协议包</li>
</ol>
<h2 id="Http网络协议包-1"><a href="#Http网络协议包-1" class="headerlink" title="Http网络协议包"></a>Http网络协议包</h2><p>在基于B&#x2F;S结构下互联网通信过程中，所有在网络中传递信息都是保存在Http网络协议包中</p>
<p>Http也分为两类</p>
<ol>
<li>Http请求协议包<br>在浏览器准备发送请求时，负责创建一个Http请求协议包，浏览器会将请求信息以二进制的形式保存在Http请求协议包的个个空间。由浏览器负责将Http请求协议包推送到制定服务器端计算机。（这个过程被称为：浏览器发送请求）</li>
<li>Http响应协议包<br>Http服务器在定位到被访问的资源文件之后，负责创建一个Http响应协议包，Http服务器会将定位到的文件内容或文件命令以二进制的形式写入到Http响应协议包各个空间中。最后由Http服务器负责将Http响应协议包推送回发起请求的浏览器上。</li>
</ol>
<h3 id="Http请求协议包内部空间"><a href="#Http请求协议包内部空间" class="headerlink" title="Http请求协议包内部空间"></a>Http请求协议包内部空间</h3><ol>
<li>按照自上而下划分，分为4层空间</li>
<li>空间划分：<ol>
<li>请求行：<br>在请求行中主要存储2个属性，一个是url，第二个是method<ul>
<li>url 为请求地址，例如(<a href="http://www.baidu.com/index.html">http://www.baidu.com/index.html</a>)</li>
<li>method 为请求方式，可能是POST，也可能是GET</li>
</ul>
</li>
<li>请求头<br>当请求方式为GET的时候，请求头存放了请求参数信息</li>
<li>空白行<br>在这一层中没有任何内容，这一层主要起到隔离的作用，隔离请求头与请求体</li>
<li>请求体<br>如果以POST方式发送请求，它则要求浏览器将参数存放在请求体当中。</li>
</ol>
</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271107807.png" alt="截屏20201129 10.56.22.png"></p>
<h3 id="Http响应协议包内部空间"><a href="#Http响应协议包内部空间" class="headerlink" title="Http响应协议包内部空间"></a>Http响应协议包内部空间</h3><ol>
<li>按照自上而下划分，分为4层空间</li>
<li>空间划分：<ol>
<li>状态行：<br>主要存储Http状态吗</li>
<li>响应头<br>在响应头中有一个重要属性：content-type，<ul>
<li>content-type 指定浏览器采用对应编译器对响应体二进制数据进行解析。</li>
</ul>
</li>
<li>空白行<br>在这一层中没有任何内容，这一层主要起到隔离的作用</li>
<li>响应体<br>这里存放的是可能被访问的静态资源文件的内容，也可能是被访问的静态资源文件命令。还可能是被访问的动态资源文件的运行结果。这些内容都是被以二进制的形式存放</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC学习笔记</title>
    <url>/2022/01/02/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么"></a>JDBC是什么</h1><p>JDBC全称（Java DataBase Connectivity）</p>
<p>JDBC是SUN公司制定的一套接口（interface）在 ** java.sql.* ** 包下，接口都有调用者和实现者。面向接口调用、面向接口写实现类，这都属于面向接口编程。面向接口编程是为了降低程序的耦合度，提高程序的拓展力。多态机制就是非常典型的：面向接口编程。（不要面向具体编程）</p>
<p>那么为什么SUN要去制定这么一套JDBC接口呢？因为每个数据库的底层实现都不一样，每一个数据库产品都有自己独特的海鲜原理。如果没有这套接口，那么我们连接数据库时意味着需要多些几套连接代码。</p>
<h1 id="JDBC开发前的准备工作"><a href="#JDBC开发前的准备工作" class="headerlink" title="JDBC开发前的准备工作"></a>JDBC开发前的准备工作</h1><p>若想使用JDBC，需要先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath当中</p>
<p>我将它放在了<code>/Library/Java/Extensions/jdbc</code>文件夹中</p>
<p>确定位置之后配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">╰&gt;&gt;&gt; open -e ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>配置环境变量，前面必须以<code>.;</code>开始，不然以后包全部找不着了~~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CLASSPATH=.:/Library/Java/Extensions/jdbc/mysql-connector-java-8.0.21/mysql-connector-java-8.0.21.jar </span><br></pre></td></tr></table></figure>

<p>保存之后刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">╰&gt;&gt;&gt; source ~/.zshrc</span><br></pre></td></tr></table></figure>







<h1 id="JDBC-编程六步"><a href="#JDBC-编程六步" class="headerlink" title="JDBC 编程六步"></a>JDBC 编程六步</h1><h3 id="第一步-注册驱动"><a href="#第一步-注册驱动" class="headerlink" title="第一步 注册驱动"></a>第一步 注册驱动</h3><p>告诉java程序，即将连接什么数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Driver</span> <span class="variable">mysqlDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(mysqlDriver);</span><br></pre></td></tr></table></figure>



<h3 id="第二步-获取连接"><a href="#第二步-获取连接" class="headerlink" title="第二步 获取连接"></a>第二步 获取连接</h3><p>JVM的进程和数据库进程之间的通道打开了，这属于进程之间的通信，重量级的，使用完之后一定要关闭。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/upyou_database&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pass);</span><br></pre></td></tr></table></figure>

<ul>
<li>url：统一资源定位符（网络中某个资源的绝对路径）<br>URL包括：协议、IP、PORT、资源名</li>
</ul>
<h3 id="第三步-获取数据库操作对象（专门执行sql语句的对象）"><a href="#第三步-获取数据库操作对象（专门执行sql语句的对象）" class="headerlink" title="第三步 获取数据库操作对象（专门执行sql语句的对象）"></a>第三步 获取数据库操作对象（专门执行sql语句的对象）</h3><p>专门执行sql语句的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>

<p>以下代码专门执行DML语句，返回值是“影响数据库中的记录条数”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure>





<h3 id="第四步-执行SQL语句"><a href="#第四步-执行SQL语句" class="headerlink" title="第四步 执行SQL语句"></a>第四步 执行SQL语句</h3><p>执行SQL语句主要执行DQL、DML等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Strign</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO DEPT(DEPTNO, DNAME, LOC) VALUES(413, &#x27;UpYouDEPT&#x27;, &#x27;CHICAGO&#x27;);&quot;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="第五步-处理查询结果集"><a href="#第五步-处理查询结果集" class="headerlink" title="第五步 处理查询结果集"></a>第五步 处理查询结果集</h3><p>只有当第四步执行的是select语句的时候，才有这第五步处理查询结果集。</p>
<h3 id="第六步-释放资源"><a href="#第六步-释放资源" class="headerlink" title="第六步 释放资源"></a>第六步 释放资源</h3><p>使用完资源之后一定要关闭资源，java和数据库属于进程间的通信，开启之后一定要关闭。并且要遵循从小到大依次关闭，分别对其try…catch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>



<h1 id="JDBC-执行删除与更新"><a href="#JDBC-执行删除与更新" class="headerlink" title="JDBC 执行删除与更新"></a>JDBC 执行删除与更新</h1><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LearnJdbc</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 注册驱动</span></span><br><span class="line">      <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">      DriverManager.registerDriver(driver);</span><br><span class="line">      <span class="comment">// 连接数据库</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/upyou_database&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">      conn = DriverManager.getConnection(url, user, pass); </span><br><span class="line">      <span class="comment">// 获取数据库操作对象</span></span><br><span class="line">      stmt = conn.createStatement(); </span><br><span class="line">      <span class="comment">// 执行DQL语句</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from dept where deptno = 413&quot;</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 释放资源</span></span><br><span class="line">      <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LearnJdbc</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 注册驱动</span></span><br><span class="line">      <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">      DriverManager.registerDriver(driver);</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/upyou_database&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">      <span class="comment">// 获取数据库连接</span></span><br><span class="line">      conn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">      <span class="comment">// 获取数据库操作对象</span></span><br><span class="line">      stmt = conn.createStatement();</span><br><span class="line">      <span class="comment">// 执行DQL语句</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update dept set dname = &#x27;UpYou那并不存在的妹妹！&#x27;, deptno = 1 where deptno = 301&quot;</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h1 id="类加载的方式注册驱动"><a href="#类加载的方式注册驱动" class="headerlink" title="类加载的方式注册驱动"></a>类加载的方式注册驱动</h1><h3 id="第一种注册方式"><a href="#第一种注册方式" class="headerlink" title="第一种注册方式"></a>第一种注册方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver());</span><br></pre></td></tr></table></figure>



<h3 id="第二种注册方式"><a href="#第二种注册方式" class="headerlink" title="第二种注册方式"></a>第二种注册方式</h3><p>在mysql的jdbc驱动中已尽帮我们实现了驱动的注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Register ourselves with the DriverManager</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.sql.DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只需要让这个类实现类加载就好，这种方式是常用的，因为参数是一个字符串，字符串可以写到xxx.properties文件中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.froName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>



<h1 id="处理查询结果集"><a href="#处理查询结果集" class="headerlink" title="处理查询结果集"></a>处理查询结果集</h1><p>executeQuery(String sql); 返回一个ResultSet对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">result</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure>

<p>ResultSet的用法类似于Map集合的迭代器，next();方法变动迭代器指针位置，有数据返回true，没有数据返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">rn</span> <span class="operator">=</span> result.next();<span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="getString"><a href="#getString" class="headerlink" title="getString"></a>getString</h3><p>getString方法的特点是：不管数据库中的数据类型是什么，都以String的形式取出。其中参数可以是列的下标，也可以是列名，在jdbc中，下标是从1开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rn) &#123;</span><br><span class="line">  System.out.println(result.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>SMITH</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rn) &#123;</span><br><span class="line">  System.out.println(result.getString(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>– <code>SMITH</code></p>
<blockquote>
<p>列名不是表中的列名，而是查询结果集的列名。</p>
</blockquote>
<h1 id="解决SQL注入问题"><a href="#解决SQL注入问题" class="headerlink" title="解决SQL注入问题"></a>解决SQL注入问题</h1><h3 id="导致SQL注入的根本原因是什么？"><a href="#导致SQL注入的根本原因是什么？" class="headerlink" title="导致SQL注入的根本原因是什么？"></a>导致SQL注入的根本原因是什么？</h3><p>用户输入的信息中含有SQL语句的关键字，并且这些关键字参与了SQL语句编译的过程。导致SQL语句的原意被扭曲，进而达到SQL注入</p>
<h3 id="解决SQL注入"><a href="#解决SQL注入" class="headerlink" title="解决SQL注入"></a>解决SQL注入</h3><p>只要用户的输入信息不参与SQL语句的编译过程，问题就解决了。即使用户输入的信息含有SQL语句的关键字，但是没有参与编译所以不起作用。</p>
<p>要想用户信息不参与SQL语句的编译，那么必须使用：<code>java.sql.PreparedStatement</code>，而不再是原来的：<code>java.sql.Statement</code>,PreparedStatement接口继承了<code>java.sql.Statement</code>接口。</p>
<p>PreparedStatement是属于与编译的数据库操作对象。他的原理是：预先对SQL语句框架进行预编译，然后再给SQL语句传“值”。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>PreparedStatement的使用方式与Statement的使用方式不变，只是将SQL语句中的“值”替换成**”?”**这是一个占位符，这不是一个有效值。值需要通过set的方式进行设置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">ResultSet rs</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 注册驱动</span></span><br><span class="line">    <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">    DriverManager.registerDriver(driver);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/upyou_database&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取数据库连接</span></span><br><span class="line">    conn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">    <span class="comment">// 获取预编译的数据库操作对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select empno, ename from emp where empno = ? and ename = ?&quot;</span>;</span><br><span class="line">    ps = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">// 执行DQL语句</span></span><br><span class="line">    ps.setInt(<span class="number">1</span>, <span class="number">7369</span>);</span><br><span class="line">    ps.setString(<span class="number">2</span>, <span class="string">&quot;SMITH&quot;</span>);</span><br><span class="line">    rs = ps.executeQuery();</span><br><span class="line">    <span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">      System.out.println(rs.getString(<span class="string">&quot;empno&quot;</span>));</span><br><span class="line">      System.out.println(rs.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        rs.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        ps.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        conn.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>– <code>7369</code><br>–  <code>SMITH</code></p>
<h1 id="PreparedStatement对比Statement"><a href="#PreparedStatement对比Statement" class="headerlink" title="PreparedStatement对比Statement"></a>PreparedStatement对比Statement</h1><ul>
<li>Statement 存在SQL注入问题PreparedStatement解决了SQL注入问题。</li>
<li>Statement 编译一次执行一次，PreparedStatement编译一次执行N次。PreparedStatement效率较高一些。</li>
<li>PreparedStatement会在编译阶段做类型的安全检查。</li>
</ul>
<p>综上所述，PreparedStatement使用较多，只要极少数情况下需要使用Statement：</p>
<ul>
<li>业务方面要求必须要支持SQL注入</li>
<li>Statement支持SQL注入，凡是业务方面要求是需要进行SQL语句拼接的，必须使用Statement</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ol>
<li>JDBC中的事务是自动提交的。什么是自动提交？<br>自动提交是子要执行任意一条DML语句，则自动提交一次。这是JDBC默认的事务行为。但是在实际的业务当中，通常都是N条DML语句共同联合才能完成的，必须保证他们这些DML语句在同一个事务中同时成功或同时失败。</li>
</ol>
<h3 id="禁止自动提交"><a href="#禁止自动提交" class="headerlink" title="禁止自动提交"></a>禁止自动提交</h3><p>void setAutoCommit(boolean autoCommit); 设置JDBC的自动事物提交，当autoCommit参数为true时表示启用自动提交模式，为false表示禁用自动提交模式。这也叫做开启事务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>



<h3 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h3><p>禁用事务的自动提交之后，我们需要手动将事务提交。当程序执行成功后调用commit方法将事务提交上去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.commit();</span><br></pre></td></tr></table></figure>



<h3 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h3><p>如果程序执行出错，那么你需要将事务回滚而不是进行提交</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">  <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">    conn.rollback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><p>如果在一个普通SQL语句后面加上一个<code>for update</code>，这个就是行级锁。表示在这条语句的执行过程中，<code>job = &#39;MANAGER&#39;</code>的这些记录被锁住了，别的事物没有办法对这些记录进行修改。这也被称为悲观锁。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>事务必须排队执行，数据被锁住了，不允许并发。</p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 四大函数式接口</title>
    <url>/2022/01/31/Java-%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="Java-四大函数式接口"><a href="#Java-四大函数式接口" class="headerlink" title="Java 四大函数式接口"></a>Java 四大函数式接口</h1><table>
<thead>
<tr>
<th>接口名</th>
<th>参数类型</th>
<th>返回类型</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer&lt;T&gt;<br />消费型接口</td>
<td>T</td>
<td>void</td>
<td>对类型为T的对象应用操作，包含方法：<code>void accept(T t)</code></td>
</tr>
<tr>
<td>Supplier&lt;T&gt;<br />供给型接口</td>
<td>无</td>
<td>T</td>
<td>返回类型为T的对象，包含方法：<code>T get()</code></td>
</tr>
<tr>
<td>Function&lt;T, R&gt;<br />函数型接口</td>
<td>T</td>
<td>R</td>
<td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象，包含方法：<code>R apply(T t)</code></td>
</tr>
<tr>
<td>Predicate&lt;T&gt;<br />断定型接口</td>
<td>T</td>
<td>boolean</td>
<td>确定类型为T的对象是否满足约束，并返回 boolean 值。包含方法 <code>boolean test(T t)</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 解决Enum.valueOf找不到枚举出现的异常</title>
    <url>/2022/01/02/Java-%E8%A7%A3%E5%86%B3Enum.valueOf%E6%89%BE%E4%B8%8D%E5%88%B0%E6%9E%9A%E4%B8%BE%E5%87%BA%E7%8E%B0%E7%9A%84%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>由于<code>Enum.valueOf</code>匹配不到枚举时会出现异常，这个可以用<code>try...catch</code>来解决，但是这样会导致代码往臃肿的道路上越走越远。<br>本文与其说是解决<strong>Enum.valueOf找不到枚举出现的异常</strong>还不如说是换了解决方案：<br>现在有这么一个枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型操作接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TypeEnum</span> &#123;</span><br><span class="line">  Boolean <span class="title function_">ret</span><span class="params">()</span>; <span class="comment">// 表示是某个类型时返回结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ImageEnumImpl</span> <span class="keyword">implements</span> <span class="title class_">TypeEnum</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * jpeg类型的图片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  JPEG &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">ret</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * jpg类型的图片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  JPG &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">ret</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * gif类型的图片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  GIF &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">ret</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * bmp类型的图片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  BMP &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">ret</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * png类型的图片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  PNG &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">ret</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>服务端需要通过枚举来判断支持上传的文件类型，可以使用<code>Enum.valueOf</code>来判断，而且很香</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ImageEnumImpl.valueOf(exhibitionName).ret())&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>但是如果枚举类中并不存在这个类型就会抛出一个异常，导致无法用<code>if</code>的方式来判断，可以使用以下代码来操作，当枚举不存在时返回<code>null</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ImageEnumImpl <span class="title function_">getIfPresent</span><span class="params">(String name)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> Enums.getIfPresent(ImageEnumImpl.class, name).orNull();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这个方法，这样代码就好看多了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (getIfPresent(exhibitionName) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.error(<span class="number">400</span>, <span class="string">&quot;请上传正确的图片文件，如：jpg、png、bmp、gif！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 判断0非空问题</title>
    <url>/2022/01/02/JavaScript-%E5%88%A4%E6%96%AD0%E9%9D%9E%E7%A9%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>用uniapp做商城购物车时有个需求：类似饿了么中的选商品规格功能，只不过我们需求是多选，我是这么做的：<br>用一个对象记录选中的’规格’，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSet</span>: &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>点击规格时，将当前被点击项v-for的index得到，判断<code>dataSet</code>是否有这个index，有代表删除，没有就代表需要添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(index) &#123;</span><br><span class="line">  <span class="keyword">if</span>(dataSet[index]) delect dataSet[index];</span><br><span class="line">  <span class="keyword">else</span> dataSet[index] = index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非常完美，但测试时却无法删除索引为0的数据。<br>原因是Number类型的0等于false<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271117895.png" alt="image.png"></p>
<p>只要将0索引转为字符串即可</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271117211.png" alt="截屏20200917 16.30.01.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(index) &#123;</span><br><span class="line">	index = index + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(dataSet[index]) delect dataSet[index];</span><br><span class="line">  <span class="keyword">else</span> dataSet[index] = index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>当Number类型的0和空字符串’’判断时，结果为<code>true</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271117275.png" alt="截屏20200917 16.32.08.png"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>TypeScript</tag>
        <tag>js</tag>
        <tag>ts</tag>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JUC - 学习笔记</title>
    <url>/2022/01/23/Java-JUC---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="什么是-JUC"><a href="#什么是-JUC" class="headerlink" title="什么是 JUC"></a>什么是 JUC</h2><p>在 JAVA 中，线程部分是一个重点，JUC 是 <code>java.util.concurrent</code> 工具包的简称，他是一个处理线程的工具包（JDK1.5推出）</p>
<h2 id="进程和线程的概念"><a href="#进程和线程的概念" class="headerlink" title="进程和线程的概念"></a>进程和线程的概念</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在当代面向线程设计的计算机结构中，进程是线程的容器，程序是指令、数据以其组织形式的描述，进程是程序的实体。</p>
<p>线程（Thread）是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程可以并行执行不同的任务。</p>
<blockquote>
<ul>
<li>进程：指在系统中正在运行的一个应用程序，程序一旦运行那么它就是一个进程。它是资源分配的最小单位。</li>
<li>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。它是程序执行的最小单位。轻量级的进程依附于某一个进程上，共享这个进程所攫取到的内存资源</li>
</ul>
</blockquote>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>新建状态 &#x3D;&#x3D;&gt; 准备状态 &#x3D;&#x3D;&gt; 运行状态 &#x3D;&#x3D;&gt; 阻塞状态 &#x3D;&#x3D;&gt; 死亡状态</p>
<h3 id="wait-和-sleep"><a href="#wait-和-sleep" class="headerlink" title="wait 和 sleep"></a>wait 和 sleep</h3><ol>
<li>sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能够调用</li>
<li>sleep 不会释放锁，它也不需要占用锁。wait 会释放锁，但调用它的前提是当前线程占有锁（即代码需要在 <code>synchronized</code> 中）</li>
<li>他们都可以被 <code>interrupted</code> 方法中断</li>
</ol>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><h4 id="串行模式"><a href="#串行模式" class="headerlink" title="串行模式"></a>串行模式</h4><p>串行表示所有任务都按先后顺序进行。</p>
<blockquote>
<p> 串行意味着必须先装完一车货才能运送这车货，只有送到了，才能卸下这车货，并且只有完成了这整个步骤，才能再次进行。「串行是一次只能领取一个任务，并执行这个任务。」</p>
</blockquote>
<h4 id="并行模式"><a href="#并行模式" class="headerlink" title="并行模式"></a>并行模式</h4><p>并行意味着可以同时取得多个任务，并同时去执行所取得的这些任务。并行模式相当于一条长长的队列被划分成了多条短的队列，所以并行缩短了任务队列的长度，并行的效率从代码层次上强依赖于多进程&#x2F;多线程代码，从硬件的角度上则依赖多核CPU</p>
<h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>并发（concurrent）指的是多个进程可以同时运行的现象，更细化的是多进程可以同时运行或者多指令可以同时运行。并发是一种现象，它描述的是多线程同时运行的现象。但实际上，对于单核CPU来说，同一时刻只能运行一个线程。所以，这里的<strong>“同时运行”</strong>表示的不是真的可以同一时刻有多个线程运行，这是并行的概念，而是提供一种功能让用户看起来可以多个线程同时运行起来，但实际上这些程序中的进程不是一直霸占CPU的，而是执行一会停一会。</p>
<p>要解决大并发问题，通常是将一个大任务分解成多个小任务。由于操作系统对进程的调度是随机的，所以切分成多个小任务后，会任意执行一个小任务。这会出现一些现象：</p>
<ul>
<li>可能出现一个任务执行了多次，还没开始下个任务的情况。这种情况一般会采用队列或类似的数据结构来存放各个任务的成果。</li>
<li>可能出现还没准备好第一步就开始执行第二步的问题。这种情况一般采用多路复用或异步的方式，比如只有准备好生产了事件通知才执行某个任务。</li>
<li>可以多进程&#x2F;多线程的方式并行执行这些小任务，也可以单进程&#x2F;单线程执行这些小任务，这时可能要配合多路复用才能达到较高的效率。</li>
</ul>
<blockquote>
<p>并发：线程频繁切换，给人一种同时执行的错觉</p>
<p>并行：多个线程可以同时运行</p>
</blockquote>
<h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><p>监视器（Monitor），我们常见的“锁”其实就是监视器，他是一种同步机制，能够保证在同一时间只有一个线程能够访问被保护的数据或代码。管程对象会对临界区进行加锁，在进入的时候进行加锁，在退出时解锁。执行线程操作时，首先要持有管程对象后才能执行方法。当在方法执行过程中，因为当前线程持有这个管程对象，所以别的线程就不能获取同一个管程对象。当你方法执行完成之后，最终才释放拿到的管程对象，别的线程才能再拿到这个管程对象</p>
<h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ul>
<li><p>在平时使用线程的时候， 使用的基本都是用户线程。以下结果为：<code>false</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">tn</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isDaemon</span> <span class="operator">=</span> Thread.currentThread().isDaemon();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前线程的名称：&quot;</span> + tn + <span class="string">&quot;:是守护线程:&quot;</span> + isDaemon);</span><br><span class="line">    &#125;);</span><br><span class="line">    t.run();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主线程结束后，如果用户线程还在执行，那么jvm还存活。</p>
</blockquote>
</li>
<li><p>守护线程是用在后台中的一种特殊的线程（垃圾回收）</p>
<blockquote>
<p>主线程结束后，如果没有用户线程，那么jvm结束</p>
</blockquote>
</li>
</ul>
<h2 id="Lock-接口"><a href="#Lock-接口" class="headerlink" title="Lock 接口"></a>Lock 接口</h2><p>已实现的类：</p>
<ul>
<li><code>java.util.concurrent.locks.ReentrantLock</code> 可重入锁</li>
<li><code>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</code> 可读锁</li>
<li><code>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</code> 可写锁</li>
</ul>
<p>Lock 实现提供了比使用 <code>synchronized</code> 方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的 <strong><code>Condition</code></strong> 对象</p>
<ul>
<li>Lock 不是 Java 语言内置的，synchronized 是 Java 语言的关键字，因此是内置特性。Lock 是一个类，通过这个类可以实现同步访问。</li>
<li>Locke 和 synchronized 有一点非常大的不同，采用 synchronized 不需要用户手动去释放锁，当 synchronized 方法或代码块执行完成之后，系统会自动让线程释放对锁的占用。而 Lock 则必须要手动去释放锁，如果没有主动释放锁，那么就有可能出现死锁现象。</li>
</ul>
<blockquote>
<p>使用 Lock 锁会话费更少的时间来调度线程，性能更好并具有更好的拓展性，所以我们应优先考虑使用 Lock 锁</p>
</blockquote>
<h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><p><code>synchronized</code> 是 Java 中的关键字，是一种同步锁，它修饰的对象有以下几种：</p>
<ol>
<li><p>修饰一个代码块，被修饰的代码块称为同步代码块，其作用的范围是大括号括起来的代码，作用的对象是调用这个代码块的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰一个静态方法，其作用的范围是整个静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰一个类，其作用范围是被修饰的这整个类，也就是说被修饰的类中，所有的方法都是同步的。</p>
</li>
</ol>
<h3 id="可重入锁-ReentrantLock"><a href="#可重入锁-ReentrantLock" class="headerlink" title="可重入锁 ReentrantLock"></a>可重入锁 ReentrantLock</h3><blockquote>
<p>什么是 “可重入”，可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁，其他线程失效。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  rl.lock();</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  rl.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><code>new Thread().start()</code> 执行后并不是立刻启动线程，而是进入就绪状态等待操作系统&#x2F;CPU的底层调度通知。</p>
</blockquote>
<h2 id="生产者和消费者模式"><a href="#生产者和消费者模式" class="headerlink" title="生产者和消费者模式"></a>生产者和消费者模式</h2><p>现在两个线程，可以操作初始为零的一个变量， 实现一个线程对该变量加1，一个线程对该变量减1，实现交替，来10轮，变量初始值为零。</p>
<p>思路：</p>
<ul>
<li>加法：判断一个变量是否为0，如果该变量为0，那么让该变量加1，如果为1，那么当前线程无期限睡眠，等待消费线程通知。</li>
<li>减法：判断一个变量是否为1，如果该变量为1，那么让该变量减1后通知生产线程，如果为0，那么当前线程无期限睡眠，等待生产线程通知。</li>
</ul>
<blockquote>
<p>这需要使用 <code>wait</code> 睡眠，因为它会放弃当前线程占有的锁。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadWaitNotify</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AirConditioner</span> <span class="variable">airConditioner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirConditioner</span>();</span><br><span class="line">      <span class="comment">// 消费线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    airConditioner.decrement();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      <span class="comment">// 生产线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    airConditioner.increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirConditioner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + number);</span><br><span class="line">        <span class="comment">// 生产好了，通知消费</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + number);</span><br><span class="line">        <span class="comment">// 消费完了，通知生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防止虚假唤醒"><a href="#防止虚假唤醒" class="headerlink" title="防止虚假唤醒"></a>防止虚假唤醒</h3><p>在以上程序中存在虚假唤醒的严重问题，如果存在多个生产或消费线程，例如：A、B是生产者线程C、D是消费者线程，当A拿到执行权时，此时发现需要生产，进行生产后唤醒所有线程进行消费，这些线程中包括了一个此时不该唤醒的生产者线程B。而此时并没有人进行消费，所以B在执行了 <code>wait()</code> 后沉睡（因为它需要等待消费），并<strong>放弃了已占有的锁</strong>，此时一个消费者拿到了执行权进行消费后再唤醒所有线程，让其进行生产，而此时拿到执行权的又是A，A进行生产后唤醒所有线程。此时被B拿到了执行权，B又<strong>继续上一次</strong> <code>wait()</code> 沉睡的位置往下执行，对正确结果进行加1，因为 <code>if</code> 执行之后就往下执行了，这就造成了虚假唤醒的问题。</p>
<p>如果是使用 <code>while</code> ，当B又<strong>继续上一次</strong> <code>wait()</code> 沉睡的位置往下执行时，<code>while</code> <strong>会重新判断当前结果是否为 <code>true</code></strong> （因为循环体执行完后会再次判断下一次是否需要循环），如果是 <code>true</code> 那么继续执行循环体中的内容，如果不正确才往下执行。</p>
<p>所以使用 <code>while</code> 改造一下判断即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AirConditioner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + number);</span><br><span class="line">        <span class="comment">// 生产好了，通知消费</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + number);</span><br><span class="line">        <span class="comment">// 消费完了，通知生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ReentrantLock-实现"><a href="#ReentrantLock-实现" class="headerlink" title="ReentrantLock 实现"></a>ReentrantLock 实现</h3><p>逻辑不变，只是加锁方式变了，使用 <code>Lock</code> 中的可重入锁进行实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadWaitNotify</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AirConditioner</span> <span class="variable">airConditioner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirConditioner</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    airConditioner.decrement();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    airConditioner.increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    airConditioner.decrement();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    airConditioner.increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirConditioner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">               condition.await();</span><br><span class="line">           &#125;</span><br><span class="line">           number++;</span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + number);</span><br><span class="line">           <span class="comment">// 生产好了，通知消费</span></span><br><span class="line">           condition.signalAll();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + number);</span><br><span class="line">            <span class="comment">// 消费完了，通知生产</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>*在多线程交互中，要防止多线程的虚假唤醒。</p>
</blockquote>
<h2 id="List不安全"><a href="#List不安全" class="headerlink" title="List不安全"></a>List不安全</h2><p>单线程执行以下代码，结果正常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            list.add(str);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[673be649]</span><br><span class="line">[673be649, 87b8596a]</span><br><span class="line">[673be649, 87b8596a, 97b5d7cf]</span><br></pre></td></tr></table></figure>

<p>现在使用多线程对这个 List 操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出发现数据错乱了，如果线程数过多，甚至还发生 <code>ConcurrenModificationException</code> 异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[null, 9f999a5c, 2e938025]</span><br><span class="line">[null, 9f999a5c, 2e938025]</span><br><span class="line">[null, 9f999a5c, 2e938025]</span><br></pre></td></tr></table></figure>

<p>这是因为 <code>ArrayList</code> 是线程不安全的。而导致的原因是，有一个线程在写的时候，还没写完就有一个线程突然把对象抢走修改掉了，此时这个 <code>ArrayList</code> 可能就坏了。相当于你拿笔在纸上写，还没写完突然有人把纸抢走，那你的笔是不是可能会把纸<strong>划</strong>坏？</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>要解决这个问题除了加锁，还可以使用 <code>Vector</code> 集合来代替 <code>ArrayList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[95374cd5]</span><br><span class="line">[95374cd5, 2b7d7c02, a0e85ef2]</span><br><span class="line">[95374cd5, 2b7d7c02]</span><br></pre></td></tr></table></figure>

<p>但是通过锁的方式来处理，性能会比较低，如果在乎稳定性不太在乎性能，那么可以选择 <code>Vector</code>  ，因为他是线程安全的</p>
<h4 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h4><p><code>Collections</code> 工具类中，又一个静态方法<code>synchronizedList()</code> 可以将一个线程不安全的 <code>List</code> 转为线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1bdf1ac9, 39e8acc8, cdbd2100]</span><br><span class="line">[1bdf1ac9, 39e8acc8, cdbd2100]</span><br><span class="line">[1bdf1ac9, 39e8acc8, cdbd2100]</span><br></pre></td></tr></table></figure>

<p><code>Collections</code> 不仅有可以将线程不安全的 List 转为线程安全的 <code>List</code> ，他还提供相应的方法 <code>synchronizedSet()、synchronizedMap</code>将线程不安全的 <code>Set、Map</code> 转为线程安全的。</p>
<h4 id="JUC-CopyOnWriteArrayList"><a href="#JUC-CopyOnWriteArrayList" class="headerlink" title="JUC CopyOnWriteArrayList"></a>JUC CopyOnWriteArrayList</h4><p>既要保证写时数据的一致性，也要保证读的时候多个人来读，那么就可以使用 JUC 提供的 <code>CopyOnWriteArrayList</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[f15d5d7c, ecdf8157, ff947b0d]</span><br><span class="line">[f15d5d7c, ecdf8157, ff947b0d]</span><br><span class="line">[f15d5d7c, ecdf8157, ff947b0d]</span><br></pre></td></tr></table></figure>

<p>他的底层是使用的 <code>ReentrantLock</code> 锁实现（jdk1.8）的， <code>CopyOnWriteArrayList</code> 即写时复制的容器，也是读写分离思想的一种变种。在往一个容器添加元素的时候，不直接往当前容器 <code>Object[]</code> 中添加，而是先将当前容器 <code>Object[]</code> 进行拷贝，复制出一个新的容器 <code>Object[] newElements</code> ，然后往新的容器中添加元素，添加完后再将原容器的引用指向新的容器 <code>setArray(newElements)</code>。这样做对的好处是可以对 <code>CopyOnWrite</code> 容器进行并发读而不需要加锁，因为当前容器不会添加任何元素，所以 CopyOnWrite 容器也是一种<strong>读写分离</strong>的思想。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Object[] elements = getArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">    Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">    newElements[len] = e;</span><br><span class="line">    setArray(newElements);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Set不安全"><a href="#Set不安全" class="headerlink" title="Set不安全"></a>Set不安全</h2><p><code>HashSet</code> 和 <code>ArrayList</code> 一样都是线程不安全的，在多线程操作下可能会出现数据不一致甚至抛出 <code>ConcurrentModificationException</code>异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[8320c0e3, 668c6a05]</span><br><span class="line">[8320c0e3, 668c6a05]</span><br><span class="line">[8320c0e3, 668c6a05]</span><br></pre></td></tr></table></figure>

<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Collections-工具类-1"><a href="#Collections-工具类-1" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h4><p>可以使用 <code>Collections</code> 提供的 <code>synchronizedSet()</code> 将一个线程不安全的 <code>Set</code> 转为线程安全的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; list = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3d8c21f0, 6280c2c9, 2912b50d]</span><br><span class="line">[3d8c21f0, 6280c2c9, 2912b50d]</span><br><span class="line">[3d8c21f0, 6280c2c9, 2912b50d]</span><br></pre></td></tr></table></figure>

<h4 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h4><p>也可以使用 JUC 提供的 <code>CopyOnWriteArraySet</code> ，他的实现方式与 <code>CopOnWriteArrayList</code> 一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                list.add(str);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map不安全"><a href="#Map不安全" class="headerlink" title="Map不安全"></a>Map不安全</h2><p><code>HashMap</code> 是线程不安全的，在多线程下同样会发生数据撕裂和 <code>ConcurrentModificationException</code> 异常的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                map.put(str, str);</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;38cf87b2=38cf87b2, f4765eb9=f4765eb9&#125;</span><br><span class="line">&#123;38cf87b2=38cf87b2, 764f0313=764f0313, f4765eb9=f4765eb9&#125;</span><br><span class="line">&#123;38cf87b2=38cf87b2, f4765eb9=f4765eb9&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Collections-工具类-2"><a href="#Collections-工具类-2" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h4><p>同样可以使用 <code>Collections</code> 提供的 <code>synchronizedMap</code> 将一个线程不安全的 Map 转为线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                map.put(str, str);</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;b11cc6c6=b11cc6c6, 69e2856c=69e2856c, 72771c76=72771c76&#125;</span><br><span class="line">&#123;b11cc6c6=b11cc6c6, 69e2856c=69e2856c, 72771c76=72771c76&#125;</span><br><span class="line">&#123;b11cc6c6=b11cc6c6, 69e2856c=69e2856c, 72771c76=72771c76&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p>使用JUC提供的 <code>ConcurrentHashMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">                map.put(str, str);</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;2e96c45b=2e96c45b, 8e1cf37c=8e1cf37c, 8509b40b=8509b40b&#125;</span><br><span class="line">&#123;2e96c45b=2e96c45b, 8e1cf37c=8e1cf37c, 8509b40b=8509b40b&#125;</span><br><span class="line">&#123;2e96c45b=2e96c45b, 8e1cf37c=8e1cf37c, 8509b40b=8509b40b&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>对比老的创建线程的方式，这种方式创建的线程可以拿到线程的执行结果。<code>Callable</code> 提供了一个 <code>get()</code> 方法，这个方法会阻塞当前线程，知道目标线程完成并返回结果为止。所以 <code>get()</code> 方法一般放在最后一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyCallableThread</span> <span class="variable">myCallableThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallableThread</span>();</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(myCallableThread);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallableThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;come in here..&quot;</span>);</span><br><span class="line">      <span class="comment">// 线程睡3秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">come in here..</span><br><span class="line">Hello world</span><br><span class="line">结束</span><br></pre></td></tr></table></figure>

<p>如果有多个线程调用同一个 <code>FutureTask</code> 对象，那么只会有一个线程调用 <code>call</code>，因为这个方法的返回结果是一样的，等执行完后，其他线程直接拿到结果缓存就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyCallableThread</span> <span class="variable">myCallableThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallableThread</span>();</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(myCallableThread);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallableThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; come in here..&quot;</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A come in here..</span><br><span class="line">Hello world</span><br><span class="line">结束</span><br></pre></td></tr></table></figure>

<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p><code>CountDownLatch</code> 是一个闭锁，它主要有两个方法，当一个或多个线程调用 <code>await</code> 方法时，这些线程会阻塞。其他线程调用 <code>countDown</code> 方法会将计数器减1(调用 countDown 方法的线程不会阻塞)，当计数器的值变为0时，被 <code>await</code> 阻塞的线程会被自动唤醒，继续执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownlatchLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(y);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">结束...</span><br></pre></td></tr></table></figure>

<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>CyclicNarrier 从字面上看，叫做循环栅栏&#x2F;循环屏障，它与<code>CountDownLatch</code> 相同，只不过 <code>CountDownLatch</code> 是将指定数值减到0结束，而 <code>CyclicBarrier</code> 是从0开始计数到指定数值出发，计数时阻塞所有调用 <code>await</code> 方法的线程。当计数完成后如果有，那么开启指定线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> BrokenBarrierException, InterruptedException &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;计数完成&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;准备计数&quot;</span>);</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                    System.out.println(<span class="string">&quot;计数减一&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">准备计数</span><br><span class="line">准备计数</span><br><span class="line">准备计数</span><br><span class="line">准备计数</span><br><span class="line">准备计数</span><br><span class="line">计数完成</span><br><span class="line">计数减一</span><br><span class="line">计数减一</span><br><span class="line">计数减一</span><br><span class="line">计数减一</span><br><span class="line">计数减一</span><br></pre></td></tr></table></figure>

<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore通常称之为信号量或信号灯，他可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源。</p>
<p>其实就是指定一个值，如果有线程调用 <code>acquire</code> 方法，那么该值减1，如果该值为0，那么其它线程将无法获取到信号量，需要等到有线程释放信号量才继续执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        semaphore.tryAcquire();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(name + <span class="string">&quot;抢到了车位&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(name+<span class="string">&quot;离开了车位&quot;</span>);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;, i + <span class="string">&quot;&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0抢到了车位</span><br><span class="line">1抢到了车位</span><br><span class="line">1离开了车位</span><br><span class="line">0离开了车位</span><br><span class="line">2抢到了车位</span><br><span class="line">3抢到了车位</span><br><span class="line">2离开了车位</span><br><span class="line">3离开了车位</span><br><span class="line">4抢到了车位</span><br><span class="line">4离开了车位</span><br></pre></td></tr></table></figure>

<ul>
<li><code>acquire</code> 当一个线程调用时，它要么通过成功获取信号量，要么一直等下去，直到有线程释放信号量或超时。</li>
<li><code>release</code> 释放一个信号量，实际上是将信号量的值加1，然后唤醒等待的线程。</li>
<li><code>tryAquire</code> 他的作用与 <code>acquire</code> 一样，只不过没获取到信号量时不会等待其他线程释放，而是直接返回一个 <code>false</code>，如果拿到信号量，那么返回 <code>true</code>。</li>
</ul>
<h2 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h2><p>读写锁（ReadWriteLock），多个 线程同时读一个资源类时没有问题，所以为了满足并发量，读取共享资源应该可以同时运行。但是如果有一个线程想去写共享资源，就不应该再有其他线程对该资源进行读或写。</p>
<p>有些操作是需要保证原子性的，如果不能保证原子性，那么会造成数据错乱的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCache</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object val)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">    System.out.println(name + <span class="string">&quot;\t 写入数据&quot;</span> + key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(key, val);</span><br><span class="line">    System.out.println(name + <span class="string">&quot;\t 写入完成&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">    System.out.println(name + <span class="string">&quot;\t 读取数据&quot;</span> + key);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    System.out.println(name + <span class="string">&quot;\t 读取完成&quot;</span> + o);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyCache</span> <span class="variable">myCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCache</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tempInt</span> <span class="operator">=</span> i;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        myCache.put(tempInt + <span class="string">&quot;&quot;</span>, tempInt);</span><br><span class="line">      &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tempInt</span> <span class="operator">=</span> i;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        myCache.get(tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A    写入数据0</span><br><span class="line">A    写入数据2</span><br><span class="line">A    写入数据1</span><br><span class="line">A    写入数据3</span><br><span class="line">A    写入数据4</span><br><span class="line">B    读取数据0</span><br><span class="line">B    读取完成null</span><br><span class="line">B    读取数据2</span><br><span class="line">B    读取完成null</span><br><span class="line">B    读取数据1</span><br><span class="line">B    读取完成null</span><br><span class="line">B    读取数据4</span><br><span class="line">B    读取完成null</span><br><span class="line">B    读取数据3</span><br><span class="line">B    读取完成null</span><br><span class="line">A    写入完成</span><br><span class="line">A    写入完成</span><br><span class="line">A    写入完成</span><br><span class="line">A    写入完成</span><br><span class="line">A    写入完成</span><br></pre></td></tr></table></figure>

<p>要保证原子操作，并且需要高性能，可以使用读写锁来操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object val)</span> &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> rwl.writeLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">           System.out.println(name + <span class="string">&quot;\t 写入数据&quot;</span> + key);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           map.put(key, val);</span><br><span class="line">           System.out.println(name + <span class="string">&quot;\t 写入完成&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> rwl.readLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;\t 读取数据&quot;</span> + key);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;\t 读取完成&quot;</span> + o);</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyCache</span> <span class="variable">myCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCache</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tempInt</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                myCache.put(tempInt + <span class="string">&quot;&quot;</span>, tempInt);</span><br><span class="line">            &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tempInt</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                myCache.get(tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A    写入数据<span class="number">0</span></span><br><span class="line">A    写入完成</span><br><span class="line">A    写入数据<span class="number">1</span></span><br><span class="line">A    写入完成</span><br><span class="line">A    写入数据<span class="number">2</span></span><br><span class="line">A    写入完成</span><br><span class="line">A    写入数据<span class="number">3</span></span><br><span class="line">A    写入完成</span><br><span class="line">A    写入数据<span class="number">4</span></span><br><span class="line">A    写入完成</span><br><span class="line">B    读取数据<span class="number">0</span></span><br><span class="line">B    读取数据<span class="number">1</span></span><br><span class="line">B    读取数据<span class="number">2</span></span><br><span class="line">B    读取数据<span class="number">3</span></span><br><span class="line">B    读取数据<span class="number">4</span></span><br><span class="line">B    读取完成<span class="number">2</span></span><br><span class="line">B    读取完成<span class="number">4</span></span><br><span class="line">B    读取完成<span class="number">3</span></span><br><span class="line">B    读取完成<span class="number">0</span></span><br><span class="line">B    读取完成<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>以上的例子可能看不出效果，看下图，当有写锁时，后面的无论是读锁还是写锁，都得等着，如果是写，那么相当于无所状态。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202201290010378.gif"></p>
<h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>当队列是空的，从队列中获取元素的操作将会被阻塞，当队列是满的，从队列中添加元素的操作将会被阻塞。</p>
<p>试图从空的队列中获取元素的线程将会被阻塞，直到其他线程往空的队列插入新的元素。</p>
<p>试图向已满的队列中添加新元素的线程将会被阻塞，直到其他线程从队列中移除一个或多个元素或者完全清空，使队列变得空闲起来并后续新增。</p>
<p>在多线程领域，所谓的阻塞，在某些情况下会挂起线程（即堵塞），一旦条件满足，被挂起的线程又会自动被唤醒。而 <code>BlockingQueue</code> 的好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切 <code>BlockingQueue</code> 都给你做好了，在 concurrent 包发布以前，在多线程环境下，我们每个人都必须去自己控制这些细节，尤其还需要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p>
<p>BlockingQueue的实现类有：</p>
<ul>
<li><code>ArrayBlockingQueue</code> 他是由数组结构组成的有界阻塞队列</li>
<li><code>LinkedBlockingQueue</code> 由链表结构组成的有界（但大小默认值为<code>integer.MAX_VALUE</code>）阻塞队列</li>
<li><code>PriorityBlockingQueue</code> 支持优先级排序的无界阻塞队列</li>
<li><code>DelayQueue</code> 是有优先级队列实现的延迟无界阻塞队列</li>
<li><code>SynchronousQueue</code> 不存储元素的阻塞队列，也即单个元素的队列</li>
<li><code>LinkedTransferQueue</code> 由链表组成的无界阻塞队列</li>
<li><code>LinkedBlockingDeque</code> 由链表组成的双向阻塞队列</li>
</ul>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202201291749094.png" alt="Collection"></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p>插入</p>
<ol>
<li><code>add(e)</code> 插入一个值到队列中，如果队列已满，那么抛出异常</li>
<li><code>offer(e)</code> 插入一个值到队列中，如果成功返回 <code>true</code>，如果队列已满则返回 <code>false</code> </li>
<li><code>put(e)</code> 插入一个值到队列中，如果队列已满，那么阻塞当前线程，直到队列空出位置后将值插入。</li>
<li><code>offer(e, time, unit)</code>插入一个值到队列中，如果队列已满，则阻塞当前线程一定时间再插入，如果成功返回 <code>true</code> ，失败则返回 <code>false</code>，可被 <code>interrupted()</code> 方法中断。</li>
</ol>
</li>
<li><p>移除</p>
<ol>
<li><code>remove()</code> 移除队列中的第一个值，如果队列为空那么异常</li>
<li><code>poll()</code> 移除队列中第一个值，成功则返回当前被移除的元素，如果队列没有元素那么返回 <code>null</code></li>
<li><code>take()</code> 移除队列中的第一个值，如果队列为空，那么阻塞当前线程直到队列插入数据。</li>
<li><code>poll(time, unit)</code> 移除队列中的第一个值，如果队列为空则阻塞当前线程一定时间后再移除，成功则返回当前被移除的元素，失败返回 <code>null</code>。阻塞过程中可被 <code>interrupted</code> 方法打断</li>
</ol>
</li>
<li><p>检查</p>
<ol>
<li><code>element()</code> 查看队列中的值，如果队列没有值，那么抛出异常</li>
<li><code>peek</code> 查看队列中的值，如果队列为空则返回<code>null</code>，特殊值</li>
</ol>
</li>
<li><p>抛出异常：<br>当阻塞队列满时，如果再往队列中 <code>add</code> 插入元素就会抛出 <code>IllegalStateException</code> 异常 。<br>当阻塞队列为空时，如果再 <code>remove</code> 移除元素会抛出 <code>NoSuchElementException</code></p>
</li>
<li><p>特殊值：<br>插入方法，成功为 <code>true</code> 失败 <code>false</code>。<br>移除方法，成功返回出队列的元素，队列里没有就返回 null</p>
</li>
<li><p>阻塞：<br>当阻塞队列满时，生产者线程继续往队列里 <code>put</code> 元素，队列会一直阻塞生产者线程直到 <code>put</code> 数据 or 响音中断退出。<br>当阻塞队列为空时，消费者线程试图从队列里 <code>take</code> 元素，队列会一直阻塞消费者线程，直到队列可用。</p>
</li>
<li><p>超时退出：<br>当阻塞队列满时，队列会阻塞生产者线程一定时间，超时限时后生产者线程会退出</p>
</li>
</ul>
<blockquote>
<p>队列先入先出</p>
</blockquote>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池做的工作是只要控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</p>
<p>他的主要特点为：线程复用，控制最大并发数，管理线程。</p>
<p>Java 中的线程池是通过 <code>Executor</code> 框架实现的，该框架中用到了<code>Executor</code>，<code>Executors</code>，<code>ExecutorService</code>，<code>ThreadPoolExecutor</code> 这几个类。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202201292219375.png" alt="MyThreadPoolDemo"></p>
<h3 id="Executors-工具类"><a href="#Executors-工具类" class="headerlink" title="Executors 工具类"></a>Executors 工具类</h3><p>线程池一般都使用 <code>Executors</code> 工具类来进行创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="comment">// 最大5个线程</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Executors.newFixedThreadPool(int)</code> 执行长期任务性能好，创建一个线程池，一个线程池有多个固定的线程。</li>
<li><code>Executors.newSingleThreadExecutor()</code> 创建一个只有一个线程的线程池</li>
<li><code>Executors.newCachedThreadPool()</code> 执行很多短期异步任务，线程池根据需要创建新的线程，但在先前构建的线程可用时将重用他们，如果没有线程可用，则创建新线程。</li>
</ul>
<h3 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h3><p>采用分治算法将一个大任务分成诺干个小任务，之后再将这些若干个小任务并行计算，最终再汇总这些任务的结果。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202201310429115.png" alt="分治算法"></p>
<p>下列例子：给定一个区间进行计算，如果计算量大于临界值，那么采用分治算法将任务切分成若干个小任务分配给其它线程并行计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ForkJoinDemoMyTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_VALUE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> begin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForkJoinDemoMyTask</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.begin = begin;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((end - begin) &gt; ADJUST_VALUE) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt; end; i++) &#123;</span><br><span class="line">                result = result + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (end + begin) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">ForkJoinDemoMyTask</span> <span class="variable">myTask1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemoMyTask</span>(begin, middle);</span><br><span class="line">            <span class="type">ForkJoinDemoMyTask</span> <span class="variable">myTask2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemoMyTask</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            ForkJoinTask&lt;Integer&gt; fork = myTask1.fork();</span><br><span class="line">            ForkJoinTask&lt;Integer&gt; fork1 = myTask2.fork();</span><br><span class="line">            result = fork.join() + fork1.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">ForkJoinDemoMyTask</span> <span class="variable">myTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemoMyTask</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Integer&gt; submit = forkJoinPool.submit(myTask);</span><br><span class="line">        System.out.println(submit.get());</span><br><span class="line"></span><br><span class="line">        forkJoinPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4950</span><br></pre></td></tr></table></figure>



<h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>使用 <code>Executors</code> 工具类初始化一个具有固定线程的线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="comment">// 最大5个线程</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>execute</code> 方法将执行任务分配给线程池中的线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                executorService.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用 <code>shutdown</code> 方法关闭线程池后，再次调用将会抛出 <code>RejectedExecutionException</code> 异常</p>
<h4 id="线程池的7大参数"><a href="#线程池的7大参数" class="headerlink" title="线程池的7大参数"></a>线程池的7大参数</h4><ol>
<li><p><code>corePoolSize</code>: 线程池中的常驻核心线程数</p>
</li>
<li><p><code>maxinumPoolSize</code>: 线程池中能够容纳同时执行的最大线程数，此值必须大于等于1</p>
</li>
<li><p><code>keepAliveTime</code>: 多余的空闲线程存活时间当前池中线程数量超过<code>corePoolSize</code> 时，当前空闲时间达到 <code>keepAliveTime</code> 时，多余线程会被销毁直到剩下 <code>corePoolSize</code> 个线程为止</p>
</li>
<li><p><code>unit</code>：<code>keepAliveTime</code> 的单位</p>
</li>
<li><p><code>workQueue</code> 任务队列，被提交但尚未被执行的任务</p>
</li>
<li><p><code>threadFactory</code>：表示生成线程池中工作线程的线程工厂，用于创建线程</p>
</li>
<li><p><code>handler</code>：拒绝策略，表示当前队列满了，并且工作线程大于等于线程池的最大线程数（<code>maxinumPoolSize</code>）时如何拒绝请求执行的 runnable 的策略</p>
</li>
</ol>
<h3 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h3><ol>
<li>在创建了 线程后，开始等待请求</li>
<li>当调用<code>executor()</code> 方法添加一个请求任务时，线程池会做出相应的判断：<ol>
<li>如果正在运行的线程数小于 <code>corePoolSize</code> ，那么马上创建线程来运行这个任务。</li>
<li>如果正在运行的线程数量大于或等于 <code>corePoolSize</code> ，那么将这个任务放入队列。</li>
<li>如果这个时候队列满了且正在运行的线程数量还小于 <code>maximumPoolSize</code> 那么还是要创建非核心线程立刻运行这个任务。</li>
<li>如果队列满了且正在运行的线程数量大于或等于 <code>maximumPoolSize</code> ，那么线程池会启动饱和拒绝策略来执行。</li>
</ol>
</li>
<li>当一个线程完成任务时，他会从队列中取下一个任务来执行。</li>
<li>当一个线程无事可做超过一定时间（<code>keepAliveTime</code>）时，线程会判断：如果当前运行的线程数大于 <code>corePoolSize</code> ，那么这个线程就会被停掉。所以线程池的所有任务完成后，它最终会收缩到 <code>corePoolSize</code> 的大小。</li>
</ol>
<blockquote>
<p>在实际开发中，严禁使用 <code>Executors</code> 来创建线程池，因为 <code>Executors</code> 中创建的<code>newFixedThreadPool(int)</code> 、<code>newCachedThreadPool</code> 中的 <code>maximumPoolSize</code> 参数为 <code>Integer.MAX_VALUE</code> ，该参数会导致 OOM 风险。</p>
</blockquote>
<h3 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h3><p>在线程池中的等待队列已经满了，并且线程池中的最大线程也已经达到了，无法继续为新的任务提供服务的时候就需要拒绝策略机制合理的处理这个问题。所有内置策略都实现了 <code>RejectedExecutionHandle</code> 接口。</p>
<h4 id="AbortPolicy"><a href="#AbortPolicy" class="headerlink" title="AbortPolicy"></a>AbortPolicy</h4><p>该策略是一个默认策略，在线程池无法处理任务时，将抛出一个 <code>RejectedExecutioException</code> 异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">10L</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3l</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.util.concurrent.RejectedExecutionException: Task top.ctong.lock.MyThreadPoolDemo$$Lambda$1/381259350@3feba861 rejected from java.util.concurrent.ThreadPoolExecutor@5b480cf9[Running, pool size = 5, active threads = 5, queued tasks = 3, completed tasks = 0]</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-4</span><br><span class="line">pool-1-thread-5</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-1</span><br></pre></td></tr></table></figure>

<h4 id="CallerRunsPolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h4><p>“调用者运行”是一种调节机制，该策略即不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</p>
<p>也就是哪个线程调用的线程池就把任务交给那个调用者去运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">10L</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3l</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">pool-1-thread-4</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-5</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-1</span><br><span class="line">main</span><br><span class="line">pool-1-thread-5</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-4</span><br></pre></td></tr></table></figure>

<h4 id="DiscardPolicy"><a href="#DiscardPolicy" class="headerlink" title="DiscardPolicy"></a>DiscardPolicy</h4><p>该策略会丢弃无法处理的任务，不予任何处理也不抛出异常，如果允许任务丢失，这是或许最好的一种策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">10L</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3l</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool-1-thread-4</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-5</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-4</span><br><span class="line">pool-1-thread-5</span><br></pre></td></tr></table></figure>



<h4 id="DiscardOldestPolicy"><a href="#DiscardOldestPolicy" class="headerlink" title="DiscardOldestPolicy"></a>DiscardOldestPolicy</h4><p>抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">10L</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> i;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3l</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + y);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool-1-thread-4::6</span><br><span class="line">pool-1-thread-2::1</span><br><span class="line">pool-1-thread-3::5</span><br><span class="line">pool-1-thread-1::0</span><br><span class="line">pool-1-thread-5::7</span><br><span class="line">pool-1-thread-2::8</span><br><span class="line">pool-1-thread-3::9</span><br><span class="line">pool-1-thread-4::4</span><br></pre></td></tr></table></figure>

<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li><p>如果业务是要求CPU密集型就以CPU核心数多1到2，也即（CPU核数 + 1）</p>
</li>
<li><p>IO密集型使用CPU核数除阻塞系数。</p>
<ul>
<li>阻塞系数：线程花在系统IO上的时间与CPU密集任务所耗的时间比值</li>
</ul>
</li>
</ul>
<h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p><code>CompletableFuture</code> 结合 <code>Future</code> 类的优点，提供了非常强大的拓展功能，可以帮我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果， 并提供了转换和组合 <code>CompletableFuture</code> 的方法。</p>
<ul>
<li><code>CompletableFuture.runAsync(Runnable r)</code> 该方法没有返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有返回值&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(future.get());</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CompletableFuture.supplyAsync(Supplier s)</code> 该方法可以返回一个指定值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;返回&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(stringCompletableFuture.get());</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回</span><br></pre></td></tr></table></figure>

<p>还可以监听 Future 任务的执行状态</p>
<p>监听执行成功，参数 <code>t</code> 是执行成功后的返回结果，是如果有异常，那么 <code>u</code> 参数就是异常信息，否则为 <code>null</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringCompletableFuture.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;t::&quot;</span> + t);</span><br><span class="line">  System.out.println(<span class="string">&quot;u::&quot;</span> + u);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>监听执行失败，例如 Future 有个除零错误，<code>e</code> 参数是错误信息，错误后将异步方法的返回值作为结果返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringCompletableFuture.exceptionally((e) -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;e::&quot;</span> + e);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;错误&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用DES算法加密处理</title>
    <url>/2022/01/02/Java%E4%BD%BF%E7%94%A8DES%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>定义所需要用到的变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENCRYPTION_KEY</span> <span class="operator">=</span> <span class="string">&quot;HI, I&#x27;M UPYOU.&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHARSET_NAME</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM_NAME</span> <span class="operator">=</span> <span class="string">&quot;DES&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Key key;</span><br></pre></td></tr></table></figure>

<p>将<code>ENCRYPTION_KEY</code>作为一个加密密钥，将<code>ENCRYPTION_KEY</code>转成<code>Key</code>类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 生成 ALGORITHM_NAME 算法对象</span></span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">edsAlgorithmInstance</span> <span class="operator">=</span> KeyGenerator.getInstance(ALGORITHM_NAME);</span><br><span class="line">        <span class="comment">// 使用SHA1安全策略</span></span><br><span class="line">        <span class="type">SecureRandom</span> <span class="variable">sha1PRNG</span> <span class="operator">=</span> SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置密钥 ENCRYPTION_KEY</span></span><br><span class="line">        sha1PRNG.setSeed(ENCRYPTION_KEY.getBytes());</span><br><span class="line">        <span class="comment">// 初始化KeyGenerator对象</span></span><br><span class="line">        edsAlgorithmInstance.init(sha1PRNG);</span><br><span class="line">        <span class="comment">//生成 key</span></span><br><span class="line">        key = edsAlgorithmInstance.generateKey();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建对字符串加密方法 <code>encrypetString</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptString</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>encrypetString</code>方法中操作</strong></p>
<p>需要使用<code>BASE64Encoder</code>将加密后的结果转成 <code>String</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BASE64Encoder</span> <span class="variable">base64Encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br></pre></td></tr></table></figure>

<p>得到待加密字符串基于<code>CHARSET_NAME</code>编码的<code>byte[]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = str.getBytes(CHARSET_NAME);</span><br></pre></td></tr></table></figure>

<p>创建基于<code>ALGORITHM_NAME</code>的加密算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM_NAME);</span><br></pre></td></tr></table></figure>

<p>初始化加密设置,使用无三参初始化方式。<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271118040.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cipher.init(Cipher.ENCRYPT_MODE, key);</span><br></pre></td></tr></table></figure>

<p>将密码进行加密，此处返回的是加密后的<code>byte[]</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] doFinal = cipher.doFinal(bytes);</span><br></pre></td></tr></table></figure>

<p>使用 <code>BASE64Encoder</code> 将加密结果转成 <code>String</code> 后返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> base64Encoder.encode(doFinal);</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptString</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    <span class="comment">//基于BASE64编码，接收byte[]并转换成String</span></span><br><span class="line">    <span class="type">BASE64Encoder</span> <span class="variable">base64Encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 按UTF8编码</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes(CHARSET_NAME);</span><br><span class="line">        <span class="comment">// 获取加密对象</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM_NAME);</span><br><span class="line">        <span class="comment">// 初始化密码信息</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="type">byte</span>[] doFinal = cipher.doFinal(bytes);</span><br><span class="line">        <span class="comment">// byte[]to encode好的String并返回</span></span><br><span class="line">        <span class="keyword">return</span> base64Encoder.encode(doFinal);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit5 单元测试 - 学习笔记</title>
    <url>/2022/01/02/Junit5-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在SpringBoot2.2.0+开始引入Junit5 作为单元测试默认库</p>
<blockquote>
<p>JUnit5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</p>
</blockquote>
<p><strong>JUnit Plaform</strong> 是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其它测试引擎也都可以接入。</p>
<p><strong>JUnit Jupiter</strong> 提供了JUnit5 的新的编程模型，时JUnit5 新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p>
<p><strong>JUnit Vintage</strong> 为老版本提供了兼容。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271054568.png" alt="截屏2021-07-11 21.38.27"></p>
<p>在创建SpringBoot项目的时候，会自动引入junit 5并帮我们自动配好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctong.learnspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LearnSpringBootApplicationTests</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在SpringBoot2.4中，移除了Junit Vintage，也就是说我们无法兼容3、4的版本，如果需要继续兼容需要手动加入Junit Vintage依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在SpringBoot整合Junit后，</p>
<ul>
<li>编写测试方法时需要使用<code>@Test</code>标注，需要使用<strong>Junit5</strong>版本的注解</li>
<li>Junit类具有Spring的功能，例如<code>@Autowired</code>、<code>@Transactional</code></li>
</ul>
<h2 id="Junit5-常用注解"><a href="#Junit5-常用注解" class="headerlink" title="Junit5 常用注解"></a>Junit5 常用注解</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/">JUnit5官方文档</a></p>
<blockquote>
<p>JUnit5 的注解和Junit4的注解有所变化</p>
</blockquote>
<ul>
<li><code>@Test</code>表示方法是测试方法，但是与Junit4的<code>@Test</code>不同，他的职责非常单一，不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li>
<li><code>@ParameterizedTest</code>  表示方法是参数化测试</li>
<li><code>@DisplayName</code> 为测试类或测试方法设置展示名称</li>
<li><code>@BeforeEach</code> 在每个单元测试之前执行</li>
<li><code>@AfterEach</code> 在每个单元测试之后执行</li>
<li><code>@BeforeAll</code> 在所有单元测试开始之前执行</li>
<li><code>@AfterAll</code> 在所有单元测试结束之后执行</li>
<li><code>@Tag</code> 给单元测试进行分类，类似JUnit4中的<code>@Categories</code></li>
<li><code>Disabled</code> 表示当前测试方法不执行，类似JUnit4中的<code>@Ignore</code> </li>
<li><code>@RepeatedTest</code> 重复执行当前测试方法</li>
</ul>
<h2 id="断言-（assertions）"><a href="#断言-（assertions）" class="headerlink" title="断言 （assertions）"></a>断言 （assertions）</h2><p> 断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是<strong>org.junit.jupiter.api.Assertions</strong>的静态方法。Junit5内置的断言可以分成如下几个类别：</p>
<blockquote>
<p>检查业务逻辑返回的数据是否合理。</p>
</blockquote>
<h3 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h3><p>用来对单个值进行简单的验证</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型</td>
</tr>
<tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同的对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断给定的布尔值是否为true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断给定的布尔值是否为false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象引用是否为null</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象引用是否不为null</td>
</tr>
</tbody></table>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;测试简单断言&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSimpleAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> cal(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">  Assertions.assertEquals(<span class="number">3</span>, result, <span class="string">&quot;期望的测试结果为3， 但最终结果是：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.opentest4j.AssertionFailedError: 期望的测试结果为<span class="number">3</span>， 但最终结果是：<span class="number">4</span> ==&gt; </span><br><span class="line">Expected :<span class="number">3</span></span><br><span class="line">Actual   :<span class="number">4</span></span><br></pre></td></tr></table></figure>



<h3 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h3><p><code>assertArrayEquals</code>方法用来判断两个对象或原始类型的数组是否相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;数组断言&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testArrayAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">  Assertions.assertArrayEquals(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.opentest4j.AssertionFailedError: array contents differ at index [<span class="number">0</span>], expected: &lt;<span class="number">1</span>&gt; but was: &lt;<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure>





<h3 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h3><p><code>assertAll</code>方法接受多个<code>org.junit.jupiter.api.function.Executable</code>函数式借口的实例作为要验证的断言，可以通过lambada表达式很容易的提供这些断言</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;组合断言&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAssertAll</span><span class="params">()</span> &#123;</span><br><span class="line">  Assertions.assertAll(<span class="string">&quot;test&quot;</span>,</span><br><span class="line">                       () -&gt; Assertions.assertTrue(<span class="literal">true</span>),</span><br><span class="line">                       () -&gt; Assertions.assertEquals(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h3><p>在Junit4时期，想要测试方法的异常情况时， 需要用<code>@Rule</code>注解的Eexpected Exception变量还是比较麻烦的。而JUnit5提供了一种新的断言方式<code>Assertions.assertThrows()</code>配合函数式编程就可以进行使用。(业务逻辑不抛出异常断言就失败…)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;异常断言&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testException</span><span class="params">()</span> &#123;</span><br><span class="line">  Assertions.assertThrows(ArithmeticException.class, ()-&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">  &#125;, <span class="string">&quot;因为太过正常导致与他们格格不入~~~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h3><p><code>@Timeout</code> 当前测试方法运行如果超过了指定的时间测试将会不通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testTimeout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  log.info(<span class="string">&quot;执行了test timeout方法...&quot;</span>);</span><br><span class="line">  Thread.sleep(<span class="number">600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.concurrent.TimeoutException: testTimeout() timed out after <span class="number">500</span> milliseconds</span><br></pre></td></tr></table></figure>



<h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>能够使一个单元测试快速失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;快速失败&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testFail</span><span class="params">()</span> &#123;</span><br><span class="line">  Assertions.fail(<span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="前置条件（assumptions）"><a href="#前置条件（assumptions）" class="headerlink" title="前置条件（assumptions）"></a>前置条件（assumptions）</h2><p>JUnit5中的潜质条件（assumptions【假设】）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败，而不满足的前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当前提不满足时，就没有继续执行的必要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;assumptions 前置条件&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAssumptions</span><span class="params">()</span> &#123;</span><br><span class="line">  Assumptions.assumeTrue(<span class="literal">false</span>, <span class="string">&quot;结果不为true&quot;</span>);</span><br><span class="line">  log.info(<span class="string">&quot;前置条件方法体执行...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h3><p>JUnit5可以通过Java中的内部类和<code>@Nested</code>注解实现嵌套测试，从而可以更好的把相关方法组织在一起。在内部类中可以使用<code>@BeforeEach</code>和<code>@AfterEach</code>注解，而且嵌套的层次没有限制。</p>
<blockquote>
<p>嵌套测试的情况下，外层的Test不能驱动内层的Before(After)Each&#x2F;All之类的方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;嵌套测试&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestingAStack</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8946641935343845060L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TestingAStack</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">isInstantiatedWithNew</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nested</span></span><br><span class="line">  <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">WhenNew</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createNewStack</span><span class="params">()</span> &#123;</span><br><span class="line">      stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">      assertTrue(stack.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">      assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">      assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AfterPushing</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">anElement</span> <span class="operator">=</span> <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@BeforeEach</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">pushAnElement</span><span class="params">()</span> &#123;</span><br><span class="line">        stack.push(anElement);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">isNotEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        assertFalse(stack.isEmpty());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">returnElementWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(anElement, stack.pop());</span><br><span class="line">        assertTrue(stack.isEmpty());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">returnElementWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(anElement, stack.peek());</span><br><span class="line">        assertFalse(stack.isEmpty());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><p>参数化测试是JUnit5很重要的一个特性，它使得用不同的参数多次运行测试成为了可能，也为我门的单元测试带来许多便利。</p>
<p>利用<code>@ValueSource</code>等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>
<p><code>@ValueSource</code> 为参数化测试指定入参来源，支持八大基础类以及String类型，Class类型</p>
<p><code>@NullSource</code>表示为参数测试提供一个null的入惨</p>
<p><code>@EnumSource</code> 表示为参数化测试提供一个枚举入参</p>
<p><code>@CsvFileSource</code> 表示读取指定CSV文件内容作为参数化测试入参</p>
<p><code>@MethodSource</code> 表示读取指定方法的返回值作为参数化测试入参「返回方法需要是一个流」</p>
<blockquote>
<p>参数化测试之所以强大是因为它可以支持外部的各类入参，如：CSV、YML、JSON文件甚至方法的返回值也可以作为入参。只需要去实现Arguments Provider接口，任何外部文件都可以作为他的入参。</p>
</blockquote>
<h3 id="ValueSource"><a href="#ValueSource" class="headerlink" title="ValueSource"></a>ValueSource</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(ints = &#123;1, 2, 3, 4, 5&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testParameterized</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;当前i的值是: &#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="MethodSource"><a href="#MethodSource" class="headerlink" title="MethodSource"></a>MethodSource</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;方法参数化测试&quot;)</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;stringProvider&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testStreamParameterized</span><span class="params">(String str)</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;方法参数化测试的值：&#123;&#125;&quot;</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">stringProvider</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>Junit</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven学习笔记</title>
    <url>/2022/01/02/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Maven-学习笔记"><a href="#Maven-学习笔记" class="headerlink" title="Maven 学习笔记"></a>Maven 学习笔记</h1><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><ol>
<li><p>Maven是一款服务于java平台的自动化构建工具。</p>
<ul>
<li><p>构建</p>
<ol>
<li>概念：以“java源文件”、“框架配置文件”、“JSP”、“HTML”、“图片”等资源为原材料，去“生产”一个可以运行的项目的过程。（构建就是以我们编写的Java代码、框架的配置文件、国际化等其他资源文件、JSP页面和图片等静态资源文件作为“原材料”去“生产”出一个可以运行的项目的过程。）<ul>
<li>编译</li>
<li>部署</li>
<li>搭建</li>
</ul>
</li>
<li>编译：java源文件 — 编译 —&gt; Class字节码文件，交给JVM去执行</li>
<li>部署：一个BS项目最终运行的并不是动态Web工程本身，而是这个动态Web工程编译的结果。（当我们需要通过浏览器访问Java程序时，就必须将包含Java程序的Web工程编译的结果拿到服务器上的指定目录下，并启动服务器，这个“拿”的过程我们就叫部署。）</li>
</ol>
</li>
</ul>
</li>
<li><p>构建过程中的各个环节</p>
<ol>
<li><p>清理<br>将以前编译得到的旧的class字节码文件删除，为下一次编译做准备</p>
</li>
<li><p>编译<br>将java源程序编译为class字节码文件</p>
</li>
<li><p>测试<br>自动测试，自动调用junit程序</p>
</li>
<li><p>报告<br>测试程序执行的结果</p>
</li>
<li><p>打包<br>动态web工程大的是war包，java工程打jar包</p>
</li>
<li><p>安装<br>Maven特定的概念：将打包得到的文件复制到仓库中的指定位置</p>
</li>
<li><p>部署</p>
<p>将动态web工程生成的war包复制到Servlet容器的指定目录下，使其可以运行</p>
</li>
</ol>
</li>
</ol>
<h2 id="Maven的核心概念"><a href="#Maven的核心概念" class="headerlink" title="Maven的核心概念"></a>Maven的核心概念</h2><ol>
<li><p>约定的目录结构</p>
</li>
<li><p>POM</p>
<ol>
<li>Project Object Model项目对象模型</li>
<li>pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行设置。他的重要程度相当于web.xml对于动态Web工程的重要性。</li>
</ol>
</li>
<li><p>坐标</p>
<ol>
<li>数学中的坐标：<ul>
<li>在平面上使用X和Y两个向量可以唯一的定位平面中的任何一个点，</li>
<li>在空间中使用X、Y、Z三个向量可以唯一的定位空间中任何一个点</li>
</ul>
</li>
<li>Maven的坐标<br>使用下面三个向量在仓库中定位一个唯一Maven工程<ol>
<li>groupId<br>公司或组织域名倒叙加项目名</li>
<li>artifactId<br>模块名称</li>
<li>version<br>版本</li>
</ol>
</li>
<li>Maven工程的坐标跟仓库中路径对应关系</li>
</ol>
</li>
<li><p>依赖</p>
<ol>
<li><p>Maven解析依赖信息时，会到本地仓库中查找被依赖的jar包。对于我们自己开发的Maven工程，使用install命令安装后就可以进入仓库。</p>
</li>
<li><p>依赖的范围<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271055057.png" alt="maven依赖范围"></p>
<ul>
<li><p>compile</p>
<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：参与</li>
</ol>
</li>
<li><p>test</p>
<ol>
<li>对主程序是否有效：无效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
</ol>
</li>
<li><p>provided</p>
<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>是否参与部署：不参与</li>
</ol>
<p>典型的例子就是<code>servlet-api.jar</code>因为Web容器（例如Tomcat）已经提供了，如果你部署时也有这个包可能会有问题，测试、开发的时候是没有Web容器的，所以需要依赖这个包运行。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271055062.png" alt="maven运行"></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>仓库</p>
<ol>
<li><p>Maven仓库分有两种</p>
<ol>
<li><p>本前地仓库，当电脑上部署的仓库目录，为当前电脑上所有Maven工程服务</p>
</li>
<li><p>远程仓库，远程仓库又称为这么几类</p>
<ul>
<li><p>私服<br>搭建在局域网环境中，为局域网范围内的所有Maven工程服务</p>
</li>
<li><p>中央仓库</p>
<p>架设在Internet上，为全世界所有Maven工程服务</p>
</li>
<li><p>中央仓库的镜像<br>为了分担中央仓库的流量，提升用户访问速度</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>仓库中保存的内容</p>
<p>仓库中保存的都是Maven工程</p>
<ol>
<li>Maven自身所需要的插件</li>
<li>第三方框架或工具的jar包</li>
<li>我们自己开发的Maven工程</li>
</ol>
</li>
</ol>
</li>
<li><p>生命周期&#x2F;插件&#x2F;目标</p>
<ol>
<li><p>各个构建环节执行的顺序。不能打乱顺序，必须按照既定的正确的顺序来执行。</p>
</li>
<li><p>Maven的核心程序中定义了生命周期，生命周期中各个阶段的具体任务是由插件来完成的</p>
</li>
<li><p>Maven有三套互相独立的生命周期：</p>
<ol>
<li><p>Clean Lifecycle 正在进行真正的构建之前进行一些清理工作。<br>Clean生命周期一共包含了三个阶段：</p>
<ul>
<li>pre-clean 执行一些需要在clean之前完成的工作。</li>
<li>clean 移除所有上次构建生成的文件</li>
<li>post-clean 执行一些需要在clean之后立刻完成的工作。</li>
</ul>
</li>
<li><p>Default Liecycle 构建的核心部分，编译，测试，打包，安装，部署等等。<br>Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中，这里只解释一些比较重要和常用的阶段</p>
<ul>
<li>process-resources 复制并处理资源文件呢，准备打包</li>
<li>compile 编译项目的源代码</li>
<li>process-test-resources 复制并处理资源文件至目标测试目录</li>
<li>test-compile 编译测试源代码</li>
<li>test 使用合适的单元测试框架运行测试，这些测试代码不会被打包或部署。</li>
<li>package 接受编译好的代码，打包成可发布的格式，如：JAR</li>
</ul>
</li>
<li><p>Site Lifecycle 生成项目报告，站点，发布站点。</p>
<ul>
<li>pre-site 执行一些需要在生成站点文档之前完成的工作。</li>
<li>site 生成项目名的站点文档</li>
<li>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备。</li>
<li>site-deoloy 将生成的站点文档部署到特定的服务器上</li>
</ul>
<p>常用的是site阶段和site-deploy阶段，用以生成和发布Maven站点</p>
</li>
</ol>
</li>
<li><p>Maven核心程序为了更好的实现自动化构建，按照这样的特点执行生命周期中的各个阶段：<br>不论现在呀执行生命周期中的哪一个阶段，都是从这个生命周期最初始的位置开始执行</p>
</li>
</ol>
</li>
<li><p>继承</p>
</li>
<li><p>集合</p>
</li>
</ol>
<h2 id="第一个Maven工程"><a href="#第一个Maven工程" class="headerlink" title="第一个Maven工程"></a>第一个Maven工程</h2><ol>
<li><p>创建约定的目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure>

<ol>
<li>根目录：工程名</li>
<li>src目录：源码</li>
<li>pom.xml文件：Maven工程的核心配置文件</li>
<li>main目录：存放主程序</li>
<li>test目录：存放测试程序</li>
<li>java目录：存放java的源文件</li>
<li>resources目录：存放框架或其它工具的配置文件</li>
</ol>
</li>
<li><p>为什么要遵守约定的目录结构呢？</p>
<ul>
<li>Maven要负责我们项目的自动化构建，以编译为例，Maven要想自动进行编译，那么它必须要知道java源文件保存在哪里。</li>
<li>如果我们自己自定义的东西想要让框架或工具知道，有两种办法<ol>
<li>以配置的方式明确告诉框架</li>
<li>遵守框架内不已经存在的约定</li>
</ol>
</li>
</ul>
<blockquote>
<p>约定 &gt; 配置 &gt; 编码</p>
</blockquote>
</li>
</ol>
<h2 id="常用Maven命令"><a href="#常用Maven命令" class="headerlink" title="常用Maven命令"></a>常用Maven命令</h2><blockquote>
<p>执行构建过程相关的Maven命令，必须进入pom.xml文件所在的目录。</p>
<p>编译、测试、打包、部署….</p>
</blockquote>
<ol>
<li>mvn clean<br>清理</li>
<li>mvn complie<br>编译主程序</li>
<li>mvn test-compile<br>编译测试程序</li>
<li>mvn test<br>执行测试</li>
<li>mvn package<br>执行打包</li>
<li>mvn install<br>安装当前Maven工程</li>
<li>mvn site<br>生成站点文档</li>
</ol>
<h2 id="关于联网问题"><a href="#关于联网问题" class="headerlink" title="关于联网问题"></a>关于联网问题</h2><ol>
<li>Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成，而插件本身并不包含在Maven的核心程序中。</li>
<li>当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。</li>
<li>本地仓库的默认位置：home&#x2F;.m2&#x2F;repository</li>
<li>Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。</li>
<li>如果此时无法连接外网，则构建失败。</li>
<li>修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<ol>
<li>找到Maven的安装目录，找到&#x2F;conf&#x2F;settings.xml</li>
<li>在settings.xml文件中找到<code>localRepository</code>标签，这个标签默认是被注释，你可以将它从注释中取出</li>
<li>将标签体内容改为你需要设置的仓库地址就可以了</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 配置结构</title>
    <url>/2022/01/02/MyBatis-%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><code>pom.xml</code> 配置文件添加以下代码，配置MyBatis运行时扫描的路径，否则可能会导致找不到 <code>Mapper</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctong.crm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>resources</code> 包下放 <code>mybatis-config.xml</code> ，这是MyBatis的配置文件，该包下再放一个 <code>jdbc.properties</code> 里面配置数据库连接的参数。</p>
<p><code>mybatis-config.xml</code>配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置一个资源配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里配置的是一个类型 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ctong.crm.domain&quot;</span>/&gt;</span></span><br><span class="line">  	</span><br><span class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 这里根据`jdbc.properties`的配置来配置连接数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里配置的是你的dao层的包名 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ctong.crm.dao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例如dao层有一个 <code>UserDao.java</code> 接口，它的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctong.crm.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * find user in the database...</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map query parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> return target user or null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">login</span><span class="params">(Map&lt;String, String&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么需要操作数据库时你还得需要一个对应的xml，它可以在任何位置（前提是mybatis能够扫描到），最好规范存放它，我将它存放到dao层，与对应的接口 <code>UserDao.java</code> 同级</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ctong.crm.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select id, loginAct, name, loginPwd, email, expireTime, lockState, deptno, allowIps, createTime, createBy, editTime, editBy</span><br><span class="line">        from tbl_user</span><br><span class="line">        where loginAct=#&#123;loginAct&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意，<code>namespace</code> 用来对应你的dao层接口，你代码调用这个dao层接口的时候MyBatis会对应的根据这个 <code>namespace</code> 来使用对应的接口，并且id跟接口中的方法名需对应…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查询区分大小写敏感问题</title>
    <url>/2022/01/02/MySQL%E6%9F%A5%E8%AF%A2%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>由于mysql是不区分大小写的，所以当你查询的时候，例如数据库里有条数据用户名为UpYou（用户名唯一），当你输入：upyou时发现也可以查询，在某些需求下这样是不允许的，可以在查询语句中加入binary关键字过滤，例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, type, createtime, comm <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="type">binary</span> username <span class="operator">=</span> <span class="string">&#x27;upyou&#x27;</span></span><br></pre></td></tr></table></figure>
<p>以下是测试查询没有加<code>binary</code>执行的查询语句</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271103340.png" alt="没加binary的java代码"></p>
<p>执行结果，可以看到返回的data为true，证明这个用户存在，我可以很确定这个用户并不存在</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271103932.png" alt="没加binary的结果"></p>
<p>这是加了binary的查询<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271103406.png" alt="加了binary的java代码"></p>
<p>执行结果<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271103456.png" alt="加了binary的查询结果"></p>
<p>再试试正确的还好不好使</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271103644.png" alt="正确结果"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis - 学习笔记</title>
    <url>/2022/01/02/MyBatis---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MyBatis-简介"><a href="#MyBatis-简介" class="headerlink" title="MyBatis 简介"></a>MyBatis 简介</h1><ul>
<li><p>原是Apache的一个开源项目iBatis，2010年6月这个项目由Apache Software Foundation迁移到Google Code，随着开发团队转投Google Code旗下。iBatis3.x正式更名为MyBatis，代码于2013年11月迁移到Github</p>
</li>
<li><p>iBatis一词来源于“internet”和“abatis”的组合。是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>
</li>
<li><p>MyBatis是支持定制化SQL、存储过程以及高级映射的优秀持久层框架</p>
</li>
<li><p>MyBatis避免了几乎所有的JDBC代码的手动设置参数以及获取结果集</p>
</li>
<li><p>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO映射成数据库中的记录</p>
</li>
</ul>
<p><a href="https://github.com/mybatis/mybatis-3/releases">Github</a></p>
<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p><a href="https://github.com/YouChuantong/mybatis_learn_demo">MyBatis Demo Github</a></p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  jdbc包  --&gt;</span></span><br><span class="line">mysql-connector-java-8.0.21.jar</span><br><span class="line"><span class="comment">&lt;!--  mybatis核心包  --&gt;</span></span><br><span class="line">mybatis-3.5.7.jar</span><br><span class="line"><span class="comment">&lt;!-- 日志框架，导入这个包之后在关键的位置可以打印日志信息，若想使用这个日志框架，需要在类路径下存在一个log4j.xml配置文件 --&gt;</span></span><br><span class="line">log4j-1.2.17.jar</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>第一个配置文件被称为mybatis的全局配置文件，指导mybatis如何正确运行。比如连接到哪个数据库。</li>
<li>第二个配置文件，用于编写每一个方法都如何向数据库发送sql语句、如何执行….可以看作接口的实现类</li>
</ol>
<h3 id="第一个配置文件"><a href="#第一个配置文件" class="headerlink" title="第一个配置文件"></a>第一个配置文件</h3><p>在<code>resources</code>文件夹下创建一个<code>jdbc.properties</code>文件，用于配置jdbc信息。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="attr">jdbc.pass</span>=<span class="string">123</span></span><br><span class="line"><span class="comment"># 驱动</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 连接地址</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<p>在<code>resources</code>文件夹下创建mybatis的配置文件<code>mybatis-config.xml</code>，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个资源配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    开启驼峰命名自动映射    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里配置的是一个类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ctong.learn.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  配置连接池  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里根据`jdbc.properties`的配置来配置连接数据库 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.pass&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里配置的是你的dao层的包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ctong.learn.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="第二个配置文件"><a href="#第二个配置文件" class="headerlink" title="第二个配置文件"></a>第二个配置文件</h3><p>假如有这么一个类<code>top.ctong.learn.domain.Employee</code>，他是数据库中的某个表的映射:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么对应的，需要为这张表创建一个dao层<code>top.ctong.learn.dao.EmployeeDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeDao</span> <span class="keyword">extends</span> <span class="title class_">GenericDao</span>&lt;Employee&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>GenericDao</code>接口只是提供了常用的crud操作。</p>
</blockquote>
<p>正常情况下需要为<code>EmployeeDao</code>创建一个实现类，但是这个实现类是通过配置的方式，让mybatis帮我们创建。在<code>resources</code>文件夹中创建这个配置文件<code>resources/mapping/EmployeeDao.xml</code>。<code>namespace</code>是用来指定接口的全类名，这样mybatis才知道它这个配置实现的是哪个接口。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;top.ctong.learn.dao.EmployeeDao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写完配置文件后mybatis还是不知道这个文件是干嘛用的，所以需要到<code>mybati-config.xml</code>配置文件中注册它。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入每一个接口的实现配置文件    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/EmployeeDao.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>写一个简单查询。</p>
<ul>
<li><code>id</code> 方法名，相当于这个配置是对某个方法的实现</li>
<li><code>resultType</code>  指定方法执行后的返回值类型，查询操作必须指定返回值类型。</li>
<li><code>#&#123;id&#125;</code>代表取出传递过来的某个参数值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  T query(Integer id);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p>
</blockquote>
<p>需要通过<code>SqlSessionFactory</code>来创建一个<code>SqlSession</code></p>
<ul>
<li><p><code>SqlSessionFactory</code> 是SqlSession工厂，负责创建SqlSession对象。</p>
</li>
<li><p><code>SqlSession</code> 代表sql会话（和数据库的一次会话）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis配置文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_CONFIG_PATH</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化SqlSessionFactory</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(MYBATIS_CONFIG_PATH);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">  <span class="comment">// 获取Dao接口实现</span></span><br><span class="line">  <span class="type">EmployeeDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeDao.class);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">  param.setId(<span class="number">8</span>);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">query</span> <span class="operator">=</span> mapper.query(param);</span><br><span class="line">  <span class="comment">//        Employee query = mapper.query(8);</span></span><br><span class="line">  System.out.println(query.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span><span class="attr">&quot;empName&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三它亲戚李四&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;lisi@qq.com&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<ol>
<li><code>mybatis-config.xml</code>是全局配置文件。指导MyBatis正确运行的一些全局设置</li>
<li><code>EmployeeDao.xml</code>是一个SQL映射文件，可以看作是对Dao层接口的一个实现描述，实际上MyBatis会根据这个文件为<code>EmployeeDao.java</code>创建一个代理对象。</li>
<li><code>SqlSessionFactory</code> 用来创建<code>SqlSession</code>对象，Factory只需要new一次就行</li>
<li><code>SqlSession</code> 相当于使用<code>connection</code>和数据库进行交互，称为“和数据库的一次会话”。既然是和数据库的<strong>一次</strong>会话，那么每次使用时就应该创建一个新的<code>SqlSession</code></li>
</ol>
<h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><p>MyBatis的配置文件包含了会深深影响MyBatis的设置和属性信息。</p>
<ul>
<li>configuration（配置）<ul>
<li>properties（属性）</li>
<li>settings（设置）</li>
<li>typeAliases（类型别名）</li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（环境配置）<ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider（数据库厂商标识）</li>
<li>mappers（映射器）</li>
</ul>
</li>
</ul>
<h2 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h2><p>引用外部配置文件，除了引入外部配置文件外，还可以在<code>properties</code>元素的子元素中进行设置</p>
<ul>
<li><code>resource</code>： 引用指定类路径下的properties文件，不需要通过<code>classpath:</code>指定</li>
<li><code>url</code>： 引用磁盘路径或网络路径中的资源文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc-config.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在MyBatis配置文件中，可以通过<code>$&#123;xx&#125;</code>的方式取出<code>properties</code>引入或定义的属性值例如:<code>$&#123;jdbc.username&#125;</code></p>
<h2 id="设置-settings"><a href="#设置-settings" class="headerlink" title="设置(settings)"></a>设置(settings)</h2><p>以下这些是MyBatis中非常重要的设置，他可以改变MyBatis运行时默认行为。</p>
<table>
<thead>
<tr>
<th align="left">设置名</th>
<th align="left">描述</th>
<th align="left">有效值</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cacheEnabled</td>
<td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">lazyLoadingEnabled</td>
<td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">aggressiveLazyLoading</td>
<td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td>
<td align="left">true | false</td>
<td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td>
</tr>
<tr>
<td align="left">multipleResultSetsEnabled</td>
<td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">useColumnLabel</td>
<td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">useGeneratedKeys</td>
<td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">autoMappingBehavior</td>
<td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td align="left">NONE, PARTIAL, FULL</td>
<td align="left">PARTIAL</td>
</tr>
<tr>
<td align="left">autoMappingUnknownColumnBehavior</td>
<td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td>
<td align="left">NONE, WARNING, FAILING</td>
<td align="left">NONE</td>
</tr>
<tr>
<td align="left">defaultExecutorType</td>
<td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>
<td align="left">SIMPLE REUSE BATCH</td>
<td align="left">SIMPLE</td>
</tr>
<tr>
<td align="left">defaultStatementTimeout</td>
<td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>
<td align="left">任意正整数</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">defaultFetchSize</td>
<td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>
<td align="left">任意正整数</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">defaultResultSetType</td>
<td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td>
<td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">safeRowBoundsEnabled</td>
<td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">safeResultHandlerEnabled</td>
<td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>
<td align="left">true | false</td>
<td align="left">True</td>
</tr>
<tr>
<td align="left">mapUnderscoreToCamelCase</td>
<td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">localCacheScope</td>
<td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>
<td align="left">SESSION | STATEMENT</td>
<td align="left">SESSION</td>
</tr>
<tr>
<td align="left">jdbcTypeForNull</td>
<td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td>
<td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>
<td align="left">OTHER</td>
</tr>
<tr>
<td align="left">lazyLoadTriggerMethods</td>
<td align="left">指定对象的哪些方法触发一次延迟加载。</td>
<td align="left">用逗号分隔的方法列表。</td>
<td align="left">equals,clone,hashCode,toString</td>
</tr>
<tr>
<td align="left">defaultScriptingLanguage</td>
<td align="left">指定动态 SQL 生成使用的默认脚本语言。</td>
<td align="left">一个类型别名或全限定类名。</td>
<td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>
</tr>
<tr>
<td align="left">defaultEnumTypeHandler</td>
<td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td>
<td align="left">一个类型别名或全限定类名。</td>
<td align="left">org.apache.ibatis.type.EnumTypeHandler</td>
</tr>
<tr>
<td align="left">callSettersOnNulls</td>
<td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">returnInstanceForEmptyRow</td>
<td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">logPrefix</td>
<td align="left">指定 MyBatis 增加到日志名称的前缀。</td>
<td align="left">任何字符串</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">logImpl</td>
<td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">proxyFactory</td>
<td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>
<td align="left">CGLIB | JAVASSIST</td>
<td align="left">JAVASSIST （MyBatis 3.3 以上）</td>
</tr>
<tr>
<td align="left">vfsImpl</td>
<td align="left">指定 VFS 的实现</td>
<td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">useActualParamName</td>
<td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">configurationFactory</td>
<td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td>
<td align="left">一个类型别名或完全限定类名。</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">shrinkWhitespacesInSql</td>
<td align="left">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">defaultSqlProviderType</td>
<td align="left">Specifies an sql provider class that holds provider method (Since 3.5.6). This class apply to the <code>type</code>(or <code>value</code>) attribute on sql provider annotation(e.g. <code>@SelectProvider</code>), when these attribute was omitted.</td>
<td align="left">A type alias or fully qualified class name</td>
<td align="left">Not set</td>
</tr>
</tbody></table>
<p>在MyBatis中，默认不会开启驼峰命名规则，例如查询时，数据库字段为<code>emp_name</code>，而映射实体为<code>empName</code>。那么这种情况下，MyBatis默认是封装不进去的，因为他们字段不对应，可以开启驼峰命名规则，以让MyBatis能正确封装我们的实体。</p>
<ul>
<li><code>name</code>：设置属性名称</li>
<li><code>value</code>：属性值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="类型别名-typeAliases"><a href="#类型别名-typeAliases" class="headerlink" title="类型别名(typeAliases)"></a>类型别名(typeAliases)</h2><p>在MyBatis中，需要通过全类名的方法去指定一个类型，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">parameterType</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果直接通过类名的方式，是无法找到这个类的，这时，可以在配置文件<code>typeAliases</code>元素中配置你每一个类型的别名，MyBatis可以通过这些别名快速定位到指定类型。</p>
<ul>
<li><code>type</code> ：类型完整类名</li>
<li><code>alias</code>：类型别名，使用时别名对大小写不敏感</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Employee&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置了类型别名之后，使用这些别名时，按住command 点击<code>Employee</code>可以快速定位到类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyBatis默认为许多常见的java类型起好了别名</p>
<table>
<thead>
<tr>
<th align="left">别名</th>
<th align="left">映射的类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">_byte</td>
<td align="left">byte</td>
</tr>
<tr>
<td align="left">_long</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">_short</td>
<td align="left">short</td>
</tr>
<tr>
<td align="left">_int</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">_integer</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">_double</td>
<td align="left">double</td>
</tr>
<tr>
<td align="left">_float</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">_boolean</td>
<td align="left">boolean</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">Byte</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">Long</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">integer</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">Double</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">Float</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">Date</td>
</tr>
<tr>
<td align="left">decimal</td>
<td align="left">BigDecimal</td>
</tr>
<tr>
<td align="left">bigdecimal</td>
<td align="left">BigDecimal</td>
</tr>
<tr>
<td align="left">object</td>
<td align="left">Object</td>
</tr>
<tr>
<td align="left">map</td>
<td align="left">Map</td>
</tr>
<tr>
<td align="left">hashmap</td>
<td align="left">HashMap</td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">List</td>
</tr>
<tr>
<td align="left">arraylist</td>
<td align="left">ArrayList</td>
</tr>
<tr>
<td align="left">collection</td>
<td align="left">Collection</td>
</tr>
<tr>
<td align="left">iterator</td>
<td align="left">Iterator</td>
</tr>
</tbody></table>
<h2 id="类型处理器-typeHandlers"><a href="#类型处理器-typeHandlers" class="headerlink" title="类型处理器(typeHandlers)"></a>类型处理器(typeHandlers)</h2><blockquote>
<p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">类型处理器</th>
<th align="left">Java 类型</th>
<th align="left">JDBC 类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>BooleanTypeHandler</code></td>
<td align="left"><code>java.lang.Boolean</code>, <code>boolean</code></td>
<td align="left">数据库兼容的 <code>BOOLEAN</code></td>
</tr>
<tr>
<td align="left"><code>ByteTypeHandler</code></td>
<td align="left"><code>java.lang.Byte</code>, <code>byte</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>BYTE</code></td>
</tr>
<tr>
<td align="left"><code>ShortTypeHandler</code></td>
<td align="left"><code>java.lang.Short</code>, <code>short</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>SMALLINT</code></td>
</tr>
<tr>
<td align="left"><code>IntegerTypeHandler</code></td>
<td align="left"><code>java.lang.Integer</code>, <code>int</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>INTEGER</code></td>
</tr>
<tr>
<td align="left"><code>LongTypeHandler</code></td>
<td align="left"><code>java.lang.Long</code>, <code>long</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>BIGINT</code></td>
</tr>
<tr>
<td align="left"><code>FloatTypeHandler</code></td>
<td align="left"><code>java.lang.Float</code>, <code>float</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>FLOAT</code></td>
</tr>
<tr>
<td align="left"><code>DoubleTypeHandler</code></td>
<td align="left"><code>java.lang.Double</code>, <code>double</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code></td>
</tr>
<tr>
<td align="left"><code>BigDecimalTypeHandler</code></td>
<td align="left"><code>java.math.BigDecimal</code></td>
<td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>DECIMAL</code></td>
</tr>
<tr>
<td align="left"><code>StringTypeHandler</code></td>
<td align="left"><code>java.lang.String</code></td>
<td align="left"><code>CHAR</code>, <code>VARCHAR</code></td>
</tr>
<tr>
<td align="left"><code>ClobReaderTypeHandler</code></td>
<td align="left"><code>java.io.Reader</code></td>
<td align="left">-</td>
</tr>
<tr>
<td align="left"><code>ClobTypeHandler</code></td>
<td align="left"><code>java.lang.String</code></td>
<td align="left"><code>CLOB</code>, <code>LONGVARCHAR</code></td>
</tr>
<tr>
<td align="left"><code>NStringTypeHandler</code></td>
<td align="left"><code>java.lang.String</code></td>
<td align="left"><code>NVARCHAR</code>, <code>NCHAR</code></td>
</tr>
<tr>
<td align="left"><code>NClobTypeHandler</code></td>
<td align="left"><code>java.lang.String</code></td>
<td align="left"><code>NCLOB</code></td>
</tr>
<tr>
<td align="left"><code>BlobInputStreamTypeHandler</code></td>
<td align="left"><code>java.io.InputStream</code></td>
<td align="left">-</td>
</tr>
<tr>
<td align="left"><code>ByteArrayTypeHandler</code></td>
<td align="left"><code>byte[]</code></td>
<td align="left">数据库兼容的字节流类型</td>
</tr>
<tr>
<td align="left"><code>BlobTypeHandler</code></td>
<td align="left"><code>byte[]</code></td>
<td align="left"><code>BLOB</code>, <code>LONGVARBINARY</code></td>
</tr>
<tr>
<td align="left"><code>DateTypeHandler</code></td>
<td align="left"><code>java.util.Date</code></td>
<td align="left"><code>TIMESTAMP</code></td>
</tr>
<tr>
<td align="left"><code>DateOnlyTypeHandler</code></td>
<td align="left"><code>java.util.Date</code></td>
<td align="left"><code>DATE</code></td>
</tr>
<tr>
<td align="left"><code>TimeOnlyTypeHandler</code></td>
<td align="left"><code>java.util.Date</code></td>
<td align="left"><code>TIME</code></td>
</tr>
<tr>
<td align="left"><code>SqlTimestampTypeHandler</code></td>
<td align="left"><code>java.sql.Timestamp</code></td>
<td align="left"><code>TIMESTAMP</code></td>
</tr>
<tr>
<td align="left"><code>SqlDateTypeHandler</code></td>
<td align="left"><code>java.sql.Date</code></td>
<td align="left"><code>DATE</code></td>
</tr>
<tr>
<td align="left"><code>SqlTimeTypeHandler</code></td>
<td align="left"><code>java.sql.Time</code></td>
<td align="left"><code>TIME</code></td>
</tr>
<tr>
<td align="left"><code>ObjectTypeHandler</code></td>
<td align="left">Any</td>
<td align="left"><code>OTHER</code> 或未指定类型</td>
</tr>
<tr>
<td align="left"><code>EnumTypeHandler</code></td>
<td align="left">Enumeration Type</td>
<td align="left">VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td>
</tr>
<tr>
<td align="left"><code>EnumOrdinalTypeHandler</code></td>
<td align="left">Enumeration Type</td>
<td align="left">任何兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code> 类型，用来存储枚举的序数值（而不是名称）。</td>
</tr>
<tr>
<td align="left"><code>SqlxmlTypeHandler</code></td>
<td align="left"><code>java.lang.String</code></td>
<td align="left"><code>SQLXML</code></td>
</tr>
<tr>
<td align="left"><code>InstantTypeHandler</code></td>
<td align="left"><code>java.time.Instant</code></td>
<td align="left"><code>TIMESTAMP</code></td>
</tr>
<tr>
<td align="left"><code>LocalDateTimeTypeHandler</code></td>
<td align="left"><code>java.time.LocalDateTime</code></td>
<td align="left"><code>TIMESTAMP</code></td>
</tr>
<tr>
<td align="left"><code>LocalDateTypeHandler</code></td>
<td align="left"><code>java.time.LocalDate</code></td>
<td align="left"><code>DATE</code></td>
</tr>
<tr>
<td align="left"><code>LocalTimeTypeHandler</code></td>
<td align="left"><code>java.time.LocalTime</code></td>
<td align="left"><code>TIME</code></td>
</tr>
<tr>
<td align="left"><code>OffsetDateTimeTypeHandler</code></td>
<td align="left"><code>java.time.OffsetDateTime</code></td>
<td align="left"><code>TIMESTAMP</code></td>
</tr>
<tr>
<td align="left"><code>OffsetTimeTypeHandler</code></td>
<td align="left"><code>java.time.OffsetTime</code></td>
<td align="left"><code>TIME</code></td>
</tr>
<tr>
<td align="left"><code>ZonedDateTimeTypeHandler</code></td>
<td align="left"><code>java.time.ZonedDateTime</code></td>
<td align="left"><code>TIMESTAMP</code></td>
</tr>
<tr>
<td align="left"><code>YearTypeHandler</code></td>
<td align="left"><code>java.time.Year</code></td>
<td align="left"><code>INTEGER</code></td>
</tr>
<tr>
<td align="left"><code>MonthTypeHandler</code></td>
<td align="left"><code>java.time.Month</code></td>
<td align="left"><code>INTEGER</code></td>
</tr>
<tr>
<td align="left"><code>YearMonthTypeHandler</code></td>
<td align="left"><code>java.time.YearMonth</code></td>
<td align="left"><code>VARCHAR</code> 或 <code>LONGVARCHAR</code></td>
</tr>
<tr>
<td align="left"><code>JapaneseDateTypeHandler</code></td>
<td align="left"><code>java.time.chrono.JapaneseDate</code></td>
<td align="left"><code>DATE</code></td>
</tr>
</tbody></table>
<p>MyBatis几乎囊括了数据库所有的类型，如果你需要自定义类型处理器，可以实现<code>org.apache.ibatis.type.TypeHandler</code>接口或者继承一个很便利的类<code>org.apache.ibatis.type.BaseTypeHandler</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTypeHandler</span> <span class="keyword">implements</span> <span class="title class_">TypeHandler</span>&lt;MyEnum&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MyEnum</span> &#123;</span><br><span class="line">    ADMIN,</span><br><span class="line">    USER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;MyEnum&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MyEnum</span> &#123;</span><br><span class="line">    ADMIN,</span><br><span class="line">    USER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h2><ul>
<li>插件时MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。<strong>插件通过动态代理机制</strong>，可以介入四大对象的任何一个方法的执行。</li>
<li><code>Execulor(update, query, flushStatements, commt, rollback, getTransaction, close, isClosed)</code>是一个执行器，用于负责执行sql语句，它是mybatis四大对象之一。</li>
<li><code>ParameterHandler(getparameterobject, setParameters)</code> 是一个参数处理器，它是mybatis四大对象之一</li>
<li><code>ResultSetHandler(handleResultSets, handleOutputParameters)</code> 是一个结果集处理器，它负责将查询出来的数据的结果集封装成你指定的JavaBean对象或者你指定的其他类型。它是四大对象之一</li>
<li><code>StatementHandler(prepare, parameterize, batch, update, query)</code> 它是一个预编译处理器，是四大对象之一</li>
</ul>
<blockquote>
<p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。</p>
</blockquote>
<h2 id="环境配置-environments"><a href="#环境配置-environments" class="headerlink" title="环境配置(environments)"></a>环境配置(environments)</h2><blockquote>
<p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，</p>
</blockquote>
<p><code>environments</code>元素定义如何配置环境和使用哪个环境。</p>
<ul>
<li><code>default</code> 默认使用哪个环境，它的值是子级的<code>id</code>值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>具体环境信息在子级<code>environment</code>中定义。它有两个子级，<code>transactionManager</code>和<code>dataSource</code>。</p>
<p>无论是哪种环境，它都需要一个事物管理器和一个数据源。</p>
<p><code>transactionManager</code>是用于配置事物管理器</p>
<ul>
<li><code>type</code> 事务类型，指使用那种事务管理器进行管理事务<ul>
<li><code>JDBC</code> – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li>
<li><code>MANAGED</code> – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p>
</blockquote>
<p><code>dataSource</code> 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>
<p>MyBatis有三种内建的数据源类型:</p>
<ol>
<li><p><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p>
<ul>
<li><p><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</p>
</li>
<li><p><code>url</code> – 这是数据库的 JDBC URL 地址。</p>
</li>
<li><p><code>username</code> – 登录数据库的用户名。</p>
</li>
<li><p><code>password</code> – 登录数据库的密码。</p>
</li>
<li><p><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</p>
</li>
<li><p><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 <code>java.sql.Connection#setNetworkTimeout()</code> 的 API 文档以获取更多信息。作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：</p>
<ul>
<li><code>driver.encoding=UTF8</code></li>
</ul>
<p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性给数据库驱动。</p>
</li>
</ul>
</li>
<li><p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p>
<p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p>
<ul>
<li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li>
<li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li>
<li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）</li>
<li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li>
<li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 <code>poolMaximumIdleConnections</code> 与 <code>poolMaximumLocalBadConnectionTolerance</code> 之和。 默认值：3（新增于 3.4.5）</li>
<li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li>
<li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置 <code>poolPingQuery</code> 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li>
<li><code>poolPingConnectionsNotUsedFor</code> – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。</li>
</ul>
</li>
<li><p><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p>
<ul>
<li><code>initial_context</code> – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li>
<li><code>data_source</code> – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：<ul>
<li><code>env.encoding=UTF8</code> 这就会在 InitialContext 实例化时往它的构造方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>如果需要自定义连接池，可以实现<code>org.apache.ibatis.datasource.DataSourceFactory</code>接口来实现或使用第三方连接池。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将自定义的连接池配置到<code>&lt;dataSource&gt;</code>中，使用全类名的方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.utils.mybatis.MyDataSource&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="数据库厂商标识-databaseIdProvider"><a href="#数据库厂商标识-databaseIdProvider" class="headerlink" title="数据库厂商标识(databaseIdProvider)"></a>数据库厂商标识(databaseIdProvider)</h2><p><code>databaseIdProvider</code>是MyBatis用来考虑数据库移植性的。每一个数据库的关键字、语法不同，可能切换数据库时，新数据库不支持旧数据库的语法而发生严重错误。</p>
<p>这种多厂商的支持是基于映射语句中的 <code>databaseId</code> 属性。 MyBatis 会加载带有匹配当前数据库 <code>databaseId</code> 属性和所有不带 <code>databaseId</code> 属性的语句。 如果同时找到带有 <code>databaseId</code> 和不带 <code>databaseId</code> 的相同语句，则后者会被舍弃。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置数据库厂商</p>
<ul>
<li><code>name</code> 指定数据库厂商名字</li>
<li><code>value</code> 给这个数据库厂商起别名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select * from t_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;sqlserver&quot;</span>&gt;</span></span><br><span class="line">  select * from t_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">  select * from t_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h2><p>当你写了一个<code>xxDao.xml</code>文件时，你需要告诉MyBatis这是一个映射文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这些配置会告诉 MyBatis 去哪里找映射文件</p>
<h1 id="SQL映射文件"><a href="#SQL映射文件" class="headerlink" title="SQL映射文件"></a>SQL映射文件</h1><blockquote>
<p>新增、修改删除都不需要设置返回值，只有查询需要设置返回值，因为除查询外，其他语句返回的都是受影响行数。</p>
</blockquote>
<p>MyBatis的SQL映射文件中能写以下列举出来的标签</p>
<ul>
<li><code>cache</code> 和缓存有关</li>
<li><code>cache-ref</code> 和缓存有关</li>
<li><code>delete</code>、<code>update</code>、<code>insert</code>、<code>select</code> 用来做增删改查</li>
<li><code>parameterMap</code> 用来做复杂参数映射，iBatis更新到MyBatis后废弃</li>
<li><code>resultMap</code> 结果映射，自定义结果集的封装规则</li>
<li><code>sql</code> 抽取可重用的sql</li>
</ul>
<h2 id="Insert-Update-Delete-元素的属性"><a href="#Insert-Update-Delete-元素的属性" class="headerlink" title="Insert, Update, Delete 元素的属性"></a>Insert, Update, Delete 元素的属性</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>id</code></td>
<td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="left"><code>parameterType</code></td>
<td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="left"><code>parameterMap</code></td>
<td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td align="left"><code>flushCache</code></td>
<td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td>
</tr>
<tr>
<td align="left"><code>timeout</code></td>
<td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="left"><code>useGeneratedKeys</code></td>
<td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td>
</tr>
<tr>
<td align="left"><code>keyProperty</code></td>
<td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>keyColumn</code></td>
<td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>databaseId</code></td>
<td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
</tbody></table>
<h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><blockquote>
<p>只演示Insert，因为其他三个标签一样。</p>
</blockquote>
<p>使用MyBatis向数据库中插入一条数据。</p>
<p>先写Dao层的<code>insert</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeDao</span> &#123; </span><br><span class="line">	<span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee dao)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写这个Dao层的<code>xml</code>配置文件</p>
<p><code>#&#123;xxx&#125;</code> 代表获取指定参数名中的值</p>
<p><code>parameterType</code> 代表传过来的参数类型，它是一个缺省属性</p>
<p>默认返回受影响行数，0表示失败1+表示新增成功1或多条数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>&gt;</span></span><br><span class="line">  insert into t_employee(emp_name, gender, email)</span><br><span class="line">  value (#&#123;empName&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于sql执行成功后，除了<code>select</code>语句，其他语句返回的全是受影响行数，如果<code>insert</code>的时候需要获取插入数据后的自增id，那么可以使用MyBatis提供的以下两个属性:</p>
<ul>
<li><code>useGeneratedKeys</code> 取出由数据库内部生成的主键</li>
<li><code>keyProperty</code> 告诉MyBatis，将刚才自增的id封装给哪个属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>  <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  insert into t_employee(emp_name, gender, email)</span><br><span class="line">  value (#&#123;empName&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意，是个传过来的参数封装,例如<code>int insertReturnKey(Employee dao);</code>，那么就给dao里边的<code>keyProperty</code>封装。</strong></p>
<h2 id="selectKey"><a href="#selectKey" class="headerlink" title="selectKey"></a>selectKey</h2><p>用于查询主键，当一个数据库不支持自增id时，可以使用<code>selectKey</code>模拟自增，当然它可能还能做更多的事。</p>
<ul>
<li><code>order</code> 指定一个运行时机，他有两个属性<ol>
<li><code>AFTER</code> 在sql语句执行之后执行<code>selectKey</code>中的sql</li>
<li><code>BEFORE</code> 在sql执行之前执行<code>selectKey</code>中的sql</li>
</ol>
</li>
</ul>
<p>如果当前做的是一个全字段插入，并且数据库并不支持自增，可以这么解决：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertReturnKey&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">    select max(id) + 1 from t_employee</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into t_employee(id, emp_name, gender, email)</span><br><span class="line">  value (#&#123;id&#125;, #&#123;empName&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="参数的各种取值"><a href="#参数的各种取值" class="headerlink" title="参数的各种取值"></a>参数的各种取值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeDao</span> <span class="keyword">extends</span> <span class="title class_">GenericDao</span>&lt;Employee&gt; &#123;</span><br><span class="line">    Employee <span class="title function_">queryByNameAndId</span><span class="params">(String empName, Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByNameAndId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  where emp_name = #&#123;empName&#125; and id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果执行以上操作就会抛出一个异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cause: org.apache.ibatis.binding.BindingException: Parameter &#x27;empName&#x27; not found. Available parameters are [arg1, arg0, param1, param2]</span><br></pre></td></tr></table></figure>

<p>在MyBatis中，存在多个参数的时候不能使用参数名获取参数指定参数值需要使用参数索引，例如<code>#&#123;arg0&#125;</code>、<code>#&#123;arg1&#125;</code>或者<code>#&#123;param1&#125;</code>、<code>#&#123;param2&#125;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByNameAndId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  where emp_name = #&#123;param1&#125; and id = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>传入当个参数</p>
<ul>
<li>基本类型<br>取值： <code>#&#123;随便写&#125;</code></li>
</ul>
</li>
<li><p>传入多个参数</p>
<p><code>#&#123;xxx&#125;</code>无效，而取值方式是通过索引进行取值。</p>
<p>原因是只要传入了多个参数，mybatis会自动将这些参数封装在一个map中，封装时使用的key就是参数的索引。</p>
<p>可以使用<code>@Param</code>注解告诉MyBatis封装时使用我自己指定的key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">queryByNameAndId</span><span class="params">(<span class="meta">@Param(&quot;empName&quot;)</span> String empName, <span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>传入Map<br>相当于告诉mybatis，你别封装了，直接使用我的map</p>
</li>
<li><p>传入pojo<br>可以使用<code>#&#123;xxx&#125;</code>取指定参数的参数值</p>
</li>
</ul>
<h2 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h2><p>实际上在mybatis中，有两种取值方式，一种是<code>#&#123;xxx&#125;</code>另一种是<code>$&#123;xxx&#125;</code>。</p>
<p>再执行以下sql时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> t_employee</span><br><span class="line"><span class="keyword">where</span> emp_name <span class="operator">=</span> $&#123;empName&#125; <span class="keyword">and</span> id <span class="operator">=</span> #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出执行语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee <span class="keyword">where</span> emp_name <span class="operator">=</span> Clover <span class="keyword">and</span> id <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure>

<p>再执行以下sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> t_employee</span><br><span class="line"><span class="keyword">where</span> emp_name <span class="operator">=</span> #&#123;empName&#125; <span class="keyword">and</span> id <span class="operator">=</span> #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>输出执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee <span class="keyword">where</span> emp_name <span class="operator">=</span> ? <span class="keyword">and</span> id <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><code>#&#123;xxx&#125;</code> 是参数预编译的方式，参数的位置都是**<code>?</code>**替代</li>
<li><code>$&#123;xxx&#125;</code> 是以字符串拼接的方式。这种方式存在sql注入问题。</li>
</ul>
<h2 id="查询返回list"><a href="#查询返回list" class="headerlink" title="查询返回list"></a>查询返回list</h2><p>如果查询所有员工，那么该结果必定是一个<code>List</code></p>
<ul>
<li><code>resultType</code> 如果返回的是一个集合，那么写的是集合里面元素的类型，而不是<code>List</code>。MyBatis会自动封装为<code>List</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from t_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有&lt;T&gt;数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;T&gt; 数据查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>





<h2 id="resultMap自定义封装规则"><a href="#resultMap自定义封装规则" class="headerlink" title="resultMap自定义封装规则"></a>resultMap自定义封装规则</h2><p>MyBatis默认的自动封装结果集</p>
<ul>
<li><p>按照列名和属性名一一对应的规则进行封装（不区分大小写）</p>
</li>
<li><p>如果不对应那么就可能封装不上，有三种解决方法</p>
<ol>
<li>在MyBatis配置中开启<code>mapUnderscoreToCamelCase</code>设置</li>
<li>给数据库字段起别名，例如：<code>select emp_name as empName from t_employee;</code></li>
<li>自定义结果集，自定义每一列数据和Javabean的映射规则。</li>
</ol>
</li>
<li><p><code>type</code>指定 这个结果集映射到哪个javaBean</p>
</li>
<li><p><code>id</code> 唯一标识，能够让别人通过它进行引用</p>
</li>
<li><p><code>extends</code> 可继承已存在的规则</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定<code>id</code>字段映射关系</p>
<ul>
<li><code>column</code> 数据库中字段名</li>
<li><code>property</code> javaBean中对应的字段名</li>
<li><code>javaType</code> 字段类型</li>
<li><code>jdbcType</code> 这个字段在数据库中的类型</li>
<li><code>typeHandler</code> 使用哪个类型处理器解析</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>映射普通字段，属性和用法与<code>&lt;id&gt;</code>一直</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Short&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用方法也很简单</p>
<ul>
<li><code>resultMap</code> 查出数据时使用自定义规则</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Salary</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4589851267399554580L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Employee emp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6915954877566070374L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="联合查询-1"><a href="#联合查询-1" class="headerlink" title="联合查询"></a>联合查询</h4><p>以上<code>Salary</code>级联查询时需要这样定义自定义规则：</p>
<ul>
<li><code>emp.email</code> 代表<code>emp</code>对象下的<code>email</code>字段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;SalaryResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.domain.Salary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;emp.id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;emp.email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;emp.empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;emp.gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;querySalaryAndEmp&quot;</span>&gt;</span></span><br><span class="line">  select t_salary.id as salary_id, t_salary.money, te.id as emp_id,</span><br><span class="line">         te.gender, te.emp_name, te.email</span><br><span class="line">  from t_salary</span><br><span class="line">       left join t_employee te on t_salary.emp_id = te.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="association"><a href="#association" class="headerlink" title="association"></a>association</h4><p><code>association</code> 用于定义一个复杂的类型关联规则，这也是MyBatis官方推荐的。<code>association</code>中定义的<code>&lt;id&gt;</code>、<code>&lt;result&gt;</code>都是对<code>association</code>的<code>property</code>指定的对象的定义，与外界无关。</p>
<ul>
<li><code>property</code> javaBean 属性名</li>
<li><code>javaType</code> 指定javaBean类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;SalaryResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.domain.Salary&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;querySalaryAndEmp&quot;</span>&gt;</span></span><br><span class="line">  select t_salary.id as salary_id, t_salary.money, te.id as emp_id,</span><br><span class="line">         te.gender, te.emp_name, te.email</span><br><span class="line">  from t_salary</span><br><span class="line">       left join t_employee te on t_salary.emp_id = te.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>association</code> 有个缺点，它无法定义集合属性<code>List&lt;Object&gt;</code>。</p>
<h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><p><code>collection</code> 可用于定义集合元素的封装</p>
<ul>
<li><code>ofType</code> 用于指定集合元素的类型</li>
<li><code>property</code>指定哪个属性是集合属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;SalaryResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.domain.Salary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;top.ctong.learn.domain.Employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;querySalaryAndEmp&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">       left join t_salary ts on t_employee.id = ts.emp_id</span><br><span class="line">  where ts.money in (select distinct salary.money from t_salary as salary);</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;List&lt;xxx&gt;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;xxx&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="select分步查询"><a href="#select分步查询" class="headerlink" title="select分步查询"></a>select分步查询</h4><p>它不是连表查询也不是联合国查询，而是通过调用另外一个sql语句进行查询，最后将查询结果封装到指定javaBean。</p>
<ul>
<li><code>select</code> 指定一个查询sql的id，MyBatis自动调用指定的sql。</li>
<li><code>column</code> 告诉MyBatis将哪一列数据传递过去。若需要传递多个参数，需要使用KV的方式：<code>&#123;key1=列名,key2=列名&#125;</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;SalaryResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;top.ctong.learn.domain.Salary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">select</span>=<span class="string">&quot;queryEmp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryEmp&quot;</span>&gt;</span></span><br><span class="line">  select * from t_employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;SalaryResultMap&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_salary</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式存在一个问题，当我们不需要查询<code>emp</code>的时候，他也会去查，这样会造成严重性能问题，资源浪费。</p>
<blockquote>
<p><code>collection</code>也可以使用分布查询</p>
</blockquote>
<h4 id="按需加载和延迟加载"><a href="#按需加载和延迟加载" class="headerlink" title="按需加载和延迟加载"></a>按需加载和延迟加载</h4><p>需要到配置文件中开启按需加载和延迟加载</p>
<ul>
<li><p><code>lazyLoadingEnabled</code>：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>aggressiveLazyLoading</code>：开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>开启这两个配置之后，<strong>select分步查询</strong>的<code>association</code>不会立马执行。当有一天你调用了<code>emp</code>相关的属性或方法之后，会自动去查这些信息。</p>
<p>当开启按需加载后，如果你不需要按需加载了，可以通过<code>association</code>的<code>fetchType</code>属性取消按需加载。</p>
<ul>
<li><code>fetchType</code>在开启按需加载时生效，它一共有两个属性<ol>
<li><code>eager</code> 立刻查询，不需要按需加载</li>
<li><code>lazy</code> 这是默认的，使<code>association</code>按需加载</li>
</ol>
</li>
</ul>
<blockquote>
<p>这里只是拿<code>association</code>做例子，<code>collection</code>也可以这么用</p>
</blockquote>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul>
<li>动态SQL时MyBatis最强大的特性之一。极大的简化我们拼装SQL的操作</li>
<li>动态SQL元素和使用JSTL或其他类似基于XML的文本处理器相似。</li>
<li>MyBatis采用功能强大的基于OGNL的表达式来简化操作。<ul>
<li><code>if</code></li>
<li><code>choose</code>、<code>when</code>、<code>otherwise</code></li>
<li><code>trim</code>、<code>where</code> 、<code>set</code></li>
<li><code>foreach</code></li>
</ul>
</li>
</ul>
<h2 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过一个dao层信息查询所有与其相关的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dao dao层信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 通过dao层查询结果集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">queryAll</span><span class="params">(T dao)</span>;</span><br></pre></td></tr></table></figure>

<p>通过条件拼接sql</p>
<ul>
<li><code>test</code> 判断条件，它支持<code>==</code>、<code>!=</code>、<code>and</code>、<code>&amp;&amp;</code> 、<code>or</code> 、<code>||</code><br>注意<code>&amp;</code>需要转译</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  where 1=1</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName!=null&quot;</span>&gt;</span></span><br><span class="line">    and emp_name=#&#123;empName&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">    and gender=#&#123;gender&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">    and email=#&#123;email&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>where 1=1</code>是为了让拼接后的sql能正确运行，因为这些条件你并不知道哪些是能用哪些不能用。如果条件这么写，那么<code>empName</code>不为null时是没问题的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName!=null&quot;</span>&gt;</span></span><br><span class="line">  emp_name=#&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">  and gender=#&#123;gender&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">  and email=#&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一但<code>empName</code>为null那么它sql拼接的结果就是这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="keyword">and</span> gender<span class="operator">=</span>xxx</span><br></pre></td></tr></table></figure>

<p>这样会出现语法错误，所以先有个默认条件<code>1=1</code>就可以了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> gender<span class="operator">=</span>xxx</span><br></pre></td></tr></table></figure>



<h2 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h2><p>在使用<code>if</code>标签时，需要通过<code>1=1</code>的方式避免语法错误，而<code>where</code>标签就是为了解决这些问题而出现。他会将你错误的语法去除(前面的语法)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName!=null&quot;</span>&gt;</span></span><br><span class="line">      and emp_name=#&#123;empName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">      and gender=#&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">      and email=#&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee <span class="keyword">WHERE</span> emp_name<span class="operator">=</span>?</span><br></pre></td></tr></table></figure>



<h2 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h2><p><code>trim</code>用来截取字符串，他有4个属性</p>
<ul>
<li><code>prefix</code> 为整体整体添加一个前缀</li>
<li><code>prefixOverrides</code> 去除整体字符串前面多余的字符串</li>
<li><code>suffix</code> 为整体字符串添加后缀</li>
<li><code>suffixOverrides</code>去除整体字符串末尾多余的字符串</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where &quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and &quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot; and&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName!=null&quot;</span>&gt;</span></span><br><span class="line">      and emp_name=#&#123;empName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">      and gender=#&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">      and email=#&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    and</span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee <span class="keyword">where</span> emp_name<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure>



<h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><p>假如有这么一个需求，通过前端传过来的id查询员工信息，而这个id是个<code>List</code>。如果通过sql语句查询的话应该是这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>像这种需求，<code>List&lt;id&gt;</code>是无法后端是不知道的，都是前端传过来的，它不一定是三个。</p>
<p>像这种需求可以使用<code>foreach</code>进行字符串拼接的方式操作。</p>
<ul>
<li><p><code>collection</code> 指定要遍历的集合</p>
</li>
<li><p><code>item</code> 当前被遍历出的数据的变量名，相当于以下代码的id：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer id : ids)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index</code> 遍历索引，相当于<code>for</code>循环的 <code>i</code> </p>
<ul>
<li>如果遍历的是一个<code>list</code>，那么<code>index</code>指定的变量就是当前索引</li>
<li>如果遍历的是一个<code>map</code>，那么<code>index</code>指定的变量就是<code>key</code></li>
</ul>
</li>
<li><p><code>open</code> 遍历开始时要拼接的字符串</p>
</li>
<li><p><code>close</code> 遍历结束后要拼接的字符串</p>
</li>
<li><p><code>separator</code> 每次遍历一次后通过指定字符串隔开</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryEmployeeByIds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select * from t_employee</span><br><span class="line">  where id in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="Choose标签"><a href="#Choose标签" class="headerlink" title="Choose标签"></a>Choose标签</h2><p>这是一个<strong>分支选择</strong>标签，功能类似于<code>switch</code>。它是需要和<code>when</code>、<code>otherwise</code>标签配合使用。</p>
<ul>
<li><code>when</code> 表示一个选项，他有一个属性<ul>
<li><code>test</code> 条件验证</li>
</ul>
</li>
<li><code>otherwise</code>表示默认值，如果<code>when</code>标签都没匹配上，那么就使用<code>otherwise</code>指定的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id列表查询指定员工，使用choose</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> emp 参数信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Employee&gt; <span class="title function_">queryEmpByIdsUseChoose</span><span class="params">(<span class="meta">@Param(&quot;emp&quot;)</span> Employee emp)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryEmpByIdsUseChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  select *</span><br><span class="line">  from t_employee</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;emp.id!=null&quot;</span>&gt;</span></span><br><span class="line">        id=#&#123;emp.id&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;emp.empName!=null&quot;</span>&gt;</span></span><br><span class="line">        emp_name=#&#123;emp.empName&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;emp.gender!=null&quot;</span>&gt;</span></span><br><span class="line">        gender=#&#123;emp.gender&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        gender=0</span><br><span class="line">      <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h2><p><code>set</code>标签是一个非常强大且实用的标签（虽然功能有点鸡肋），用来完成动态更新。以前使用sql更新时是属于全字段更新。而<code>set</code>标签可以动态更新字段。</p>
<p>当然，MyBatis提供的其他标签也能完成这些工作，但…<code>set</code>他是专业的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改指定dao层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dao 修改后的dao层信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(T dao)</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">  update t_employee</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName!=null&quot;</span>&gt;</span></span><br><span class="line">      emp_name=#&#123;empName&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">      gender =#&#123;gender&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">      email=#&#123;email&#125; ,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEBUG 08-12 20:38:08,104 ==&gt;  Preparing: update t_employee SET emp_name=? WHERE id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-12 20:38:08,138 ==&gt; Parameters: Clover You(String), 1(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-12 20:38:08,144 &lt;==    Updates: 1  (BaseJdbcLogger.java:137) </span><br></pre></td></tr></table></figure>



<h2 id="sql和include标签"><a href="#sql和include标签" class="headerlink" title="sql和include标签"></a>sql和include标签</h2><p><code>sql</code>标签需要和<code>include</code>标签配合使用。<code>sql</code>标签用来抽取可重用的<code>sql</code>代码，然后使用<code>include</code>标签将这个<code>sql</code>引入到指定位置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;queryEmpSql&quot;</span>&gt;</span></span><br><span class="line">  select id, emp_name, gender, email</span><br><span class="line">  from t_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;queryEmpSql&quot;</span>/&gt;</span></span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="OGNL"><a href="#OGNL" class="headerlink" title="OGNL"></a>OGNL</h1><p>OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。</p>
<ul>
<li><code>person.name</code> 访问对象属性</li>
<li><code>person.getName()</code> 调用方法</li>
<li><code>@java.lang.Math@PI</code> 调用静态方法</li>
<li><code>new  xxx.xxx.Person(&#39;admin&#39;).name</code> 调用构造器方法并且访问对象属性</li>
<li><code>+-*/%</code> 运算符</li>
<li><code>int not in &gt; &gt;= &lt; &lt;= == !=</code> 逻辑运算符</li>
</ul>
<blockquote>
<p>xml中特殊符号如：<code>&gt; &lt; &amp;</code>等这些都是需要使用转译字符</p>
</blockquote>
<p>访问集合伪属性</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>伪属性</th>
<th>伪属性对应的java方法</th>
</tr>
</thead>
<tbody><tr>
<td><code>List</code> <code>Set</code> <code>Map</code></td>
<td><code>size</code> <code>isEmpty</code></td>
<td><code>List</code> <code>Set</code> <code>Map.size()</code> or <code>List</code> <code>Set</code> <code>Map.isEmpty()</code></td>
</tr>
<tr>
<td><code>List</code> <code>Set</code></td>
<td><code>iterator</code></td>
<td><code>List.iterator()</code> <code>Set.iterator()</code></td>
</tr>
<tr>
<td><code>Map</code></td>
<td><code>keys</code> <code>values</code></td>
<td><code>Map.keySet()</code> <code>Map.values()</code></td>
</tr>
<tr>
<td><code>Iterator</code></td>
<td><code>next</code> <code>hasNext</code></td>
<td><code>Iterator.next()</code> <code>iterator.hasNext()</code></td>
</tr>
</tbody></table>
<p>在MyBatis中，除了传入的参数可以用来做判断外，还而外有两个属性：</p>
<ul>
<li><code>_parameter</code> 代表传过来的参数<ul>
<li>在传入了单个参数的情况下，<code>_parameter</code>就可以代表这个参数</li>
<li>如果是传了多个参数，那么<code>_parameter</code>就代表这些参数的集合<code>Map</code></li>
</ul>
</li>
<li><code>_databaseId</code> 代表当前数据库厂商</li>
</ul>
<h1 id="MyBatis缓存机制"><a href="#MyBatis缓存机制" class="headerlink" title="MyBatis缓存机制"></a>MyBatis缓存机制</h1><p> 缓存，说白了就是利用某个东西暂时存储一些数据。目的就是用来加快系统的查询速度，减少数据库压力提升用户体验。</p>
<p>在MyBatis中，使用了Map作为数据缓存池，并且使用了两种缓存方案：</p>
<ul>
<li><strong>一级缓存</strong>：可以认为是线程级别的缓存，也称为是本地缓存和SqlSession级别的缓存。在MyBatis中它是默认开启的。</li>
<li><strong>二级缓存</strong>：全局范围的缓存，除了当前线程或者说当前SqlSession能用外，其他的也可以使用。</li>
</ul>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>先搞一个查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从缓存中获取数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Employee <span class="title function_">queryInCache</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;queryEmpSql&quot;</span>&gt;</span></span><br><span class="line">  select id, emp_name, gender, email</span><br><span class="line">  from t_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryInCache&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;queryEmpSql&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">      id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryEmpSql</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">    <span class="type">EmployeeDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeDao.class);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> mapper.queryInCache(<span class="number">1</span>);</span><br><span class="line">    log.info(employee);</span><br><span class="line">    log.info(<span class="string">&quot;------------ 分割线 ------------&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee2</span> <span class="operator">=</span> mapper.queryInCache(<span class="number">1</span>);</span><br><span class="line">    log.info(employee2);</span><br><span class="line">    log.info(<span class="string">&quot;------------ 分割线: 判断是否是同一个对象 ------------&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;判断结果：&quot;</span> + (employee == employee2));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果很明显可以看到，在同一个条件下，第二次查询结果不是通过数据库查的。而且第一次查询结果和第二次查询结果的内存地址是一致的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEBUG 08-13 13:47:07,196 ==&gt;  Preparing: select id, emp_name, gender, email from t_employee WHERE id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-13 13:47:07,222 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-13 13:47:07,244 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">INFO  08-13 13:47:07,245 &#123;&quot;id&quot;:1,&quot;empName&quot;:&quot;Clover&quot;,&quot;gender&quot;:0,&quot;email&quot;:&quot;cloveryou.ctong@qq.com&quot;&#125;  (TestEmployeeDao.java:112) </span><br><span class="line">INFO  08-13 13:47:07,245 ------------ 分割线 ------------  (TestEmployeeDao.java:113) </span><br><span class="line">INFO  08-13 13:47:07,245 &#123;&quot;id&quot;:1,&quot;empName&quot;:&quot;Clover&quot;,&quot;gender&quot;:0,&quot;email&quot;:&quot;cloveryou.ctong@qq.com&quot;&#125;  (TestEmployeeDao.java:115) </span><br><span class="line">INFO  08-13 13:47:07,245 ------------ 分割线: 判断是否是同一个对象 ------------  (TestEmployeeDao.java:116) </span><br><span class="line">INFO  08-13 13:47:07,247 判断结果：true  (TestEmployeeDao.java:117) </span><br></pre></td></tr></table></figure>



<ul>
<li>只要之前查询过的数据，MyBatis就会保存在一个缓存中（Map）。下次查询时直接从缓存中拿。</li>
</ul>
<h3 id="一级缓存失效的几种情况"><a href="#一级缓存失效的几种情况" class="headerlink" title="一级缓存失效的几种情况"></a>一级缓存失效的几种情况</h3><ul>
<li><p>在不同的sql会话下缓存会失效，因为默认一级缓存是SqlSession级别的的缓存，不同的缓存他使用的是不同的一级缓存(缓存池&#x2F;Map)。每个SqlSession都有自己的一级缓存池。<br>例如你打开了两个不同的会话：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory.openSession()</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession()</span><br></pre></td></tr></table></figure>

<p>那么在这种情况下通过这两个会话进行查询，他们的结果已经不是同一个对象了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">     <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  <span class="type">EmployeeDao</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeDao.class);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">employee1</span> <span class="operator">=</span> mapper1.queryInCache(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">&quot;employee1：&quot;</span> + employee1);</span><br><span class="line">  log.info(<span class="string">&quot;------------ 分割线 ------------&quot;</span>);</span><br><span class="line">  <span class="type">EmployeeDao</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(EmployeeDao.class);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">employee2</span> <span class="operator">=</span> mapper2.queryInCache(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">&quot;employee2：&quot;</span> + employee2);</span><br><span class="line">  log.info(<span class="string">&quot;------------ 分割线: 判断是否是同一个对象 ------------&quot;</span>);</span><br><span class="line">  log.info(<span class="string">&quot;判断结果：&quot;</span> + (employee1 == employee2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEBUG 08-13 14:18:24,617 ==&gt;  Preparing: select id, emp_name, gender, email from t_employee WHERE id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-13 14:18:24,651 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-13 14:18:24,682 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">INFO  08-13 14:18:24,683 employee1：&#123;&quot;id&quot;:1,&quot;empName&quot;:&quot;Clover&quot;,&quot;gender&quot;:0,&quot;email&quot;:&quot;cloveryou.ctong@qq.com&quot;&#125;  (TestEmployeeDao.java:124) </span><br><span class="line">INFO  08-13 14:18:24,684 ------------ 分割线 ------------  (TestEmployeeDao.java:125) </span><br><span class="line">DEBUG 08-13 14:18:24,722 ==&gt;  Preparing: select id, emp_name, gender, email from t_employee WHERE id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-13 14:18:24,723 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 08-13 14:18:24,726 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">INFO  08-13 14:18:24,726 employee2：&#123;&quot;id&quot;:1,&quot;empName&quot;:&quot;Clover&quot;,&quot;gender&quot;:0,&quot;email&quot;:&quot;cloveryou.ctong@qq.com&quot;&#125;  (TestEmployeeDao.java:128) </span><br><span class="line">INFO  08-13 14:18:24,727 ------------ 分割线: 判断是否是同一个对象 ------------  (TestEmployeeDao.java:129) </span><br><span class="line">INFO  08-13 14:18:24,729 判断结果：false  (TestEmployeeDao.java:130) </span><br></pre></td></tr></table></figure>
</li>
<li><p>同一个方法，不同的参数，由于之前没查询过，所以在缓存中找不到对应数据，所以需要查询数据库。</p>
</li>
<li><p>在这个SqlSession期间执行了任何一次增删改操作，也会造成缓存失效。因为增删改操作会把缓存全部清空。因为增删改可能会对数据造成影响导致与数据库对应不上。</p>
</li>
<li><p>手动清空缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">sqlSession.clearCache();</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>org.apache.ibatis.cache.Cache</code>这是MyBatis的缓存接口。一级缓存使用的是<code>org.apache.ibatis.cache.impl.PerpetualCache</code>实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerpetualCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>每次查询前，先去一级缓存中查有没有对应的数据，如果没有那么就去数据库中查询，每个SqlSession都有自己的一级缓存。</p>
</blockquote>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><ul>
<li>二级缓存（second level cache），全局作用域缓存。</li>
<li>二级缓存默认不开启，需要手动配置</li>
<li>MyBatis提供二级缓存的接口以及实现，缓存实现要求POJO实现<code>Serializable</code>接口</li>
<li><strong>二级缓存在SqlSession关闭或提交之后才会生效</strong></li>
<li>永远不会出现一级缓存和二级缓存中有同一个数据的情况。因为在一级缓存关闭后二级缓存就有数据了，而第二次查询时，二级缓存中有这个数据，那么就不会去查一级缓存，如果二级没有此数据才会去查一级缓存，一级缓存如果也没有那么就去查数据库，数据库查完后将数据放到一级缓存。</li>
</ul>
<p>由于MyBatis默认不开启二级缓存，若需要使用二级缓存，需要到配置文件中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启二级缓存之后，还需要到你需要使用二级缓存的<strong>SQL映射文件</strong>中开启二级缓存。开启<code>cacheEnabled</code>设置后，在SQL映射文件中加入<code>&lt;cache/&gt;</code>标签即可开启二级缓存支持。</p>
<p><code>&lt;cache/&gt;</code>标签有如下属性：</p>
<ul>
<li><code>eviction</code> 缓存回收策略，默认是<code>LRU</code><ul>
<li><code>LRU</code> 最近最少使用的。移除最长时间不被使用的对象</li>
<li><code>FIFO</code> 先进先出。按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> 软引用。移除基于垃圾回收器状态和软引用规则的对象</li>
<li><code>WEAK</code> 弱引用。更积极的移除基于垃圾收集器状态和弱引用规则的对象。</li>
</ul>
</li>
<li><code>flushInterval</code> 刷新间隔，单位毫秒<ul>
<li>默认情况下没有默认值，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li>
</ul>
</li>
<li><code>size</code> 引用数目，正整数<ul>
<li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
</ul>
</li>
<li><code>readOnly</code> 只读模式，<code>true/false</code><ul>
<li><code>true</code> 表示只读缓存。会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</li>
<li><code>false</code>表示会读写缓存。会返回缓存对象的拷贝（通过序列化）。这会慢一些但是安全性更高，因此默认是<code>false</code></li>
</ul>
</li>
</ul>
<h2 id="缓存有关设置"><a href="#缓存有关设置" class="headerlink" title="缓存有关设置"></a>缓存有关设置</h2><ul>
<li>全局setting的cacheEnable：配置二级缓存的开关，一级缓存默认就是打开的</li>
<li>select标签的useCache属性：配置这个select是否使用耳机缓存。一级缓存默认开启</li>
<li>sql标签的<code>flushCache</code>属性：增删改默认<code>flushCache=&quot;true&quot;</code>。sql执行后会同时清空一级和二级缓存。查询默认<code>flushCache=&quot;false&quot;</code></li>
<li><code>sqlSession.clearCache()</code>：只是用来清除一级缓存</li>
<li>当在某一个作用域（一级缓存Session&#x2F;二级缓存Namespace）进行了CUD操作后，默认该作用域下所有select中的缓存将被<code>clear</code></li>
</ul>
<hr>
<blockquote>
<p>商业转载请联系作者获得授权，非商业转载请注明出处。<br>For commercial use, please contact the author for authorization. For non-commercial use, please indicate the source.<br>协议(License)：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0)<br>作者(Author)：Clover<br>个人博客地址(BlogURL)：<a href="http://www.ctong.top/">http://www.ctong.top</a></p>
</blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ延时队列实现定时任务</title>
    <url>/2022/03/06/RabbitMQ%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="RabbitMQ延时队列（实现定时任务）"><a href="#RabbitMQ延时队列（实现定时任务）" class="headerlink" title="RabbitMQ延时队列（实现定时任务）"></a>RabbitMQ延时队列（实现定时任务）</h1><p>比如有一个未付款订单，超过一定时间后，系统自动取消订单并释放占有的商品。</p>
<p>可以使用spring 的 schedule 定时任务轮询数据库，但是使用这种方式会极其消耗系统内存、增加数据库压力并且存在较大的时间误差</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203030930376.png" alt="时间误差"></p>
<p>以上问题可以使用 RabbitMQ 的消息TTL和死信 Exchange 结合，下单后，如果30分钟未支付就会关闭订单和解锁库存，不需要全表扫描</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203030931785.png" alt="延时队列"></p>
<h2 id="消息的TTL（Time-To-Live）"><a href="#消息的TTL（Time-To-Live）" class="headerlink" title="消息的TTL（Time To Live）"></a>消息的TTL（Time To Live）</h2><ul>
<li>消息的TTL就是消息的存活时间</li>
<li>RabbitMQ 可以对队列和消息分别设置TTL<ul>
<li>对队列设置就是队列没有消费者连接着的保留时间，也可以对每一个单独的消息做单独的设置。超过了这个时间，我们认为这个消息就死了，称之为死信。</li>
<li>如果队列设置了，消息也设置了，那么会取最小的。所以一个消息如果被路由到不同的队列中，这个消息死亡的时间有可能不一样（不同队列设置）。可以通过设置消息的 expiration 字段或者 x-message-ttl 属性来设置时间，两者都是一样的效果。</li>
</ul>
</li>
</ul>
<h2 id="Dead-Letter-Exchanges（DLX）"><a href="#Dead-Letter-Exchanges（DLX）" class="headerlink" title="Dead Letter Exchanges（DLX）"></a>Dead Letter Exchanges（DLX）</h2><ul>
<li>一个消息在满足如下条件下，会进入<strong>死信路由</strong>（路由不是队列），一个路由可以对应多个队列。<ul>
<li>一个消息被 Cnsumer 拒收了，并且 reject 方法的参数里 requeue 是false。也就是说不会被再次放在队列里，被其他消费者使用。（basic.reject&#x2F;basic.nack）requeue&#x3D;false</li>
<li>上面的消息的 TTL 到了，消息过期了</li>
<li>队列的长长度限制满了。排在前面的消息被丢弃或者仍在死信路由上</li>
</ul>
</li>
<li>Dead Letter Exchange 其实就是一种普通的 Exchange，和创建其它 exchange 没有两样。只是在某一个设置 Dead Letter Exchange 中有消息过期了，会自动触发消息的转发，发送到 Dead Letter Exchange 中去。</li>
<li>我们既可以控制消息在一段时间后变成死信，又可以控制变成死信的消息被路由到某一个指定的交换机，结合二者，就可以实现一个延时队列。</li>
</ul>
<p>可以给队列设置过期时间：</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203031507600.png" alt="延时队列实现1"></p>
<p>给每个消息设置过期时间</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203031508551.png" alt="延时队列实现2"></p>
<blockquote>
<p>死信路由不能有消费者</p>
</blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先创建好Queue、Exchange、Binding</p>
<p>使用SpringBoot容器进行创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmqpMqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/3 3:20 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">orderDelayQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">      	<span class="comment">// 过期后发到哪个交换机/死信路由</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;order-event-exchange&quot;</span>);</span><br><span class="line">       <span class="comment">// 过期后转发到指定死信路由时使用的路由键</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;order.release.order&quot;</span>);</span><br><span class="line">       <span class="comment">// 每个消息的过期时间毫秒为单位</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">60000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(</span><br><span class="line">            <span class="string">&quot;order.delay.queue&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            args</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/3 3:26 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">orderReleaseOrderQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(</span><br><span class="line">            <span class="string">&quot;order.release.order.queue&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信路由</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/3 3:25 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">orderEventExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;order-event-exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时队列绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Binding</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/3 3:25 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">orderCreateOrderBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Binding</span>(</span><br><span class="line">            <span class="string">&quot;order.delay.queue&quot;</span>,</span><br><span class="line">            Binding.DestinationType.QUEUE,</span><br><span class="line">            <span class="string">&quot;order-event-exchange&quot;</span>,</span><br><span class="line">            <span class="string">&quot;order.create.order&quot;</span>,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Binding</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/3 3:25 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">orderReleaseOrderBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Binding</span>(</span><br><span class="line">            <span class="string">&quot;order.release.order.queue&quot;</span>,</span><br><span class="line">            Binding.DestinationType.QUEUE,</span><br><span class="line">            <span class="string">&quot;order-event-exchange&quot;</span>,</span><br><span class="line">            <span class="string">&quot;order.release.order&quot;</span>,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建好后监听我们的死信队列，不能监听延时队列，因为延时队列中的消息到了过期时间没人处理后就会被当作死信，按照规则发到死信路由中，再由死信路由以指定路由键发到指定队列，然后队列将消息分发给消费者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Listener</span> &#123;</span><br><span class="line">  <span class="meta">@RabbitListener(queues = &quot;order.release.order.queue&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Message message,String str, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;有订单过期啦： ====&gt;&gt;&gt; &#123;&#125;&quot;</span>,str);</span><br><span class="line">    <span class="comment">// 如果没开启手动ack则不用写这行</span></span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再创建一个控制器准备发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/amqp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testAmqp</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;order-event-exchange&quot;</span>,<span class="string">&quot;order.create.order&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;successful&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <code>OrderController.testAmqp()</code> 就可以看到结果了</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>随笔</tag>
        <tag>微服务</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>React react-redux props或state更新视图无法重新渲染问题</title>
    <url>/2022/01/02/React-react-redux-props%E6%88%96state%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E6%97%A0%E6%B3%95%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录学习React时自己是如何挖坑把自己埋了的过程：<code>children</code>以及其它<code>props</code>被修改时相关组件无法重新渲染（做了两天）</p>
<p>父组件代码：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserHome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">Props</span>, <span class="title class_">State</span>&gt; <span class="keyword">implements</span> <span class="title class_">IUserHome</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">state</span>: <span class="title class_">State</span> = initialState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">handlerClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(<span class="title function_">sendAction</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * DOM挂载完成后执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="variable language_">this</span>.<span class="property">subscribe</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">HomeBackground</span> <span class="attr">url</span>=<span class="string">&#123;BackgroundImg&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">HomeScreenHeightBox</span> <span class="attr">width</span>=<span class="string">&#123;1400&#125;</span> <span class="attr">background</span>=<span class="string">&#x27;rgba(246, 248, 249, .92)&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.props.setCount(10)</span></span><br><span class="line"><span class="language-xml">            // console.log(this.state.count)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt; 点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">HomeNavigationBar</span> <span class="attr">height</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">HomeScreenHeightBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">HomeBackground</span>&gt;</span></span> </span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = (<span class="attr">dispatch</span>: <span class="title class_">Function</span>): <span class="function"><span class="params">mapDispatchToPropsInterface</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">sendAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;send_action&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;UpYou of blog&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="params">sun</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;set_count&#x27;</span>,</span><br><span class="line">        <span class="attr">count</span>: sun</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state: StateInferface</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(state)</span></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">UserHome</span>)</span><br></pre></td></tr></table></figure>

<p>readux层</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">initialState</span>: <span class="title class_">StateInferface</span> = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;HELLO WORLD&quot;</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = (state = initialState, <span class="attr">action</span>: <span class="title class_">ActionInterface</span>): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;send_action&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; ...state &#125;, action);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;set_count&quot;</span>: </span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; ...state &#125;, &#123;  <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">10</span>&#125;);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</span><br></pre></td></tr></table></figure>
<p>现需求是点击“点我”按钮改变<code>HomeNavigationBar</code>组件<code>height</code>属性,<code>HomeNavigationBar</code>代码(这个组件实际上是将<code>height</code>再传给另一个容器组件<code>NavigationBar</code>,一下省略了中间调用代码)：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页导航栏容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HomeNavigationBar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span>&lt;<span class="title class_">Props</span>, <span class="built_in">object</span>&gt; <span class="keyword">implements</span> <span class="title class_">IHomeNavigationBar</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置默认Props</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">backColor</span>: <span class="string">&quot;#3a3f51&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> height?: <span class="built_in">number</span> = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">height</span>; <span class="comment">// 导航栏高度</span></span><br><span class="line">  <span class="keyword">private</span> backColor?: <span class="built_in">string</span> = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">backColor</span>; <span class="comment">// 背景颜色</span></span><br><span class="line">  <span class="keyword">private</span> children?: <span class="title class_">ReactNode</span> = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>; <span class="comment">// 插槽</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> homeNavigationBarStyles = &#123;</span><br><span class="line">      <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.height&#125;</span>px`</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.backColor&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;HomeNavigationBar&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;homeNavigationBarStyles&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.height&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>NavigationBar</code>中有几段代码导致无法动态改变、重新渲染组件<br><img src="http://qiniu-note-image.ctong.top//note/images/202201021532823.png" alt="image.png"><br>为了方便直接将<code>props</code>中的值给到<code>height</code>字段，来简单验证一下图中圈起部分代码的可行性：</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201021533565.png" alt="image.png"></p>
<p>上图证明无法对基础数据类型的数据进行修改，而是直接将当前变量中的内存地址替换：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0x213</span>; <span class="comment">// 例如等于3</span></span><br><span class="line">a = <span class="number">2</span>;<span class="comment">// 0x645 改变a的值，实际上改变的是内存地址</span></span><br></pre></td></tr></table></figure>
<p>所以当<code>props</code>改变时<code>height</code>数据没变化就是这个原因,需要将<code>style</code>中的<code>this.height</code>改为<code>this.props.height</code>，声明的其它变量作废…<br>由于react中state或props改变时就会触发<code>render</code>方法重新渲染DOM，可以在<code>render</code>中定义<code>height</code>等字段<code>const &#123; children, height, backColor &#125; = this.props;</code></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, height, backColor &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> homeNavigationBarStyles = &#123;</span><br><span class="line">      <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;height&#125;</span>px`</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">`<span class="subst">$&#123;backColor&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;HomeNavigationBar&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;homeNavigationBarStyles&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>RabitMQ基础-学习笔记</title>
    <url>/2022/02/25/RabitMQ%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol>
<li><p>大多应用中，可以通过消息服务中间件来提升系统异步通信、拓展解耦能力。</p>
</li>
<li><p>消息服务中两个重要概念：</p>
<ol>
<li>消息代理（message broker）</li>
<li>目的地（destination）</li>
</ol>
<p>当消息发送者发送消息后，将由消息代理接管，消息代理保证消息传递到指定目的地。</p>
</li>
<li><p>消息队列主要有两种形式的目的地</p>
<ol>
<li>队列（queue）：点对点消息通信（point-to-point）</li>
<li>主题（topic）：发布（publish）&#x2F;订阅（subscribe）消息通信</li>
</ol>
</li>
<li><p>点对点：</p>
<ul>
<li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</li>
<li>消息只有唯一的发送者和接收者，但并不是说只能有一个接收者</li>
</ul>
</li>
<li><p>发布订阅模式</p>
<ul>
<li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息</li>
</ul>
</li>
<li><p>JMS（Java Message Service）Java消息服务：</p>
<ul>
<li>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</li>
</ul>
</li>
<li><p>AMQP（Advanced Message Queuing Protocol）</p>
<ul>
<li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li>
<li>RabbitMQ是AMQP的实现</li>
</ul>
</li>
<li><p>Spring 支持</p>
<ul>
<li>spring-jms 提供了对JMS的支持</li>
<li>spring-rabbit 提供了对AMQP的支持</li>
<li>需要ConnectionFactory的实现来连接消息代理</li>
<li>提供Jms Template、Rabbit Template来发送消息</li>
<li>@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息</li>
<li>@EnableJms、@EnableRabbit开启支持</li>
</ul>
</li>
<li><p>SpringBoot自动配置</p>
<ul>
<li>JmsAutoConfiguration</li>
<li>RabbitAutoConfiguratoin</li>
</ul>
</li>
<li><p>市面的MQ产品</p>
<ul>
<li>ActiveMQ、RabbitMQ、RocketMQ、Kafka</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>JMS（Java Message Service）</th>
<th>AMQP（Advanced Message Queuing Protocol）</th>
</tr>
</thead>
<tbody><tr>
<td>定义</td>
<td>Java api</td>
<td>网络线级协议</td>
</tr>
<tr>
<td>跨语言</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>跨平台</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>支持消息类型</td>
<td>1. Peer-2-Peer<br />2. Pub&#x2F;Sub</td>
<td>1. direct exchange<br />2.fanout exchange<br />3. topic change<br />4.headers exchange<br />5.system exchange<br />后四者本质上与JMS中的Pub&#x2F;Sub模型没有太大差别，仅是在路由机制上做了更详细的划分。</td>
</tr>
<tr>
<td>支持消息类型</td>
<td>TextMessage<br />MapMessage<br />BytesMessage<br />StreamMessage<br />ObjectMessage<br />Message（只有消息头和属性）</td>
<td>byte[]<br />（在实际应用中，如果有复杂的消息，可以将消息序列化后发送）</td>
</tr>
<tr>
<td>综合评价</td>
<td>JMS定义了JAVA API层面的标准，在java系统中，多个Client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台的支持较差</td>
<td>AMQP定义了 wire-level层的协议标准，天然具有跨平台、跨语言的特性</td>
</tr>
</tbody></table>
<h2 id="RabbitMQ概念"><a href="#RabbitMQ概念" class="headerlink" title="RabbitMQ概念"></a>RabbitMQ概念</h2><p>RabbitMQ是一个由erlang开发的AMQP（Advanced Message Queue Protocol）的开源实现。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h4><p>消息（Message）是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对其它消息的优先权）、delivery-moda（指出该消息可能需要持久性存储）等。</p>
<h4 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h4><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p>
<h4 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h4><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。Exchange有4种类型：direct（默认），fanout，topic，和headers，不同类型的Exchange转发消息的策略有所区别</p>
<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列中。消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>
<h4 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h4><p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</p>
<p>Exchange和Queue的绑定可以是多对多的关系</p>
<h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>网络连接，比如一个TCP连接</p>
<h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接。AMQP命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这鞋动作都是通过信道来完成。因为对于操作系统来说建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，复用一条TCP连接。</p>
<h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p>
<h4 id="Virtual-Host"><a href="#Virtual-Host" class="headerlink" title="Virtual Host"></a>Virtual Host</h4><p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在连接时指定，RabbitMQ默认的vhost是<code>/</code></p>
<h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><p>表示消息队列服务器实体</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223471.jpg" alt="RabbitMQ工作流程"></p>
<h2 id="Docker安装RabbitMQ"><a href="#Docker安装RabbitMQ" class="headerlink" title="Docker安装RabbitMQ"></a>Docker安装RabbitMQ</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management</span><br></pre></td></tr></table></figure>

<p>4369,25672（Erlang发现&amp;集群端口）</p>
<p>5672，5671（AMQP端口）</p>
<p>15672（微博管理后台端口，账号密码默认都是：guest）</p>
<p>61613，61614（STOMP协议端口）</p>
<p>1883，8883（MQTT协议端口）</p>
<h2 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h2><ul>
<li>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型 <code>direct</code> 、 <code>fanout</code> 、 <code>topic</code> 、 <code>headers</code> 。headers 匹配 AMQP 消息的 header 而不是路由键。header 交换机和 direct 交换机完全一致，但性能差很多</li>
</ul>
<h3 id="DireactExchange"><a href="#DireactExchange" class="headerlink" title="DireactExchange"></a>DireactExchange</h3><p>如果消息中的路由键（routing-key）于 Binding 中的 binding key 一致，交换器就将消息发送到对应的队列中。路由键需要与队列名（binding key）完全一致。如果一个队列绑定到交换机的binding key 为 “dog”，那么只转发routing key为“dog”的消息。它是完全匹配、单播、点对点模式。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223513.png" alt="DireactExchange"></p>
<h3 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h3><p>每个发到 fanout 类型转换机的消息都会被分发到所有绑定的队列中。fanout 不处理路由键，只是简单的将队列绑定到交换机上。每个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。fanout 类型转发消息是最快的。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223558.png" alt="FanoutExchange"></p>
<h3 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h3><p>topic 交换机通过路由键属性和binding key模式匹配的方式进行分配消息到对应的队列中。将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。他将路由键和绑定键的字符串切分成单词，<strong>这些单词之间需要用 <code>.</code> 隔开</strong>，它也是别这两个通配符，分别是 <code>#</code> 和 <code>*</code> 符号</p>
<p><code>#</code> 表示匹配0个或多个单词</p>
<p><code>*</code> 表示匹配一个单词</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223704.png" alt="TopicExchange"></p>
<h2 id="测试Exchange"><a href="#测试Exchange" class="headerlink" title="测试Exchange"></a>测试Exchange</h2><p>测试之前先创建四个队列，分别是 <code>gulimall</code> 、 <code>gulimall.emps</code> 、 <code>gulimall.news</code> 、 <code>gulixueyuan.news</code></p>
<p>点击 Queue选项</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223728.png" alt="1"></p>
<p>设置队列信息保存即可</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223782.png" alt="2"></p>
<h3 id="DireactExchange-1"><a href="#DireactExchange-1" class="headerlink" title="DireactExchange"></a>DireactExchange</h3><p>创建一个Direct交换机</p>
<p>点击Exchange选项</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223830.png" alt="1"></p>
<p>创建 direct交换机</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223877.png" alt="2"></p>
<p>点击刚刚创建的交换机</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223928.png" alt="3"></p>
<p>新增绑定关系</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223980.png" alt="4"></p>
<p>绑定刚刚创建的所有队列</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223037.png" alt="截屏2022-02-20 下午10.03.43"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>选择交换机进行测试</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223046.png" alt="1"></p>
<p>发送测试消息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223110.png" alt="2"></p>
<p>可以看到我们指定的队列接到两条消息了</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223152.png" alt="3"></p>
<p>单机这个队列，然后获取消息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223189.png" alt="4"></p>
<ul>
<li>Ack Mode 消息处理方式<ul>
<li>Nack message requeue true 接收消息但不做确认，消息会重新加入队列</li>
<li>reject requeue false 拒绝消息，消息会被删除</li>
<li>reject requeue false 拒绝消息，消息会重新加入队列</li>
<li>Automatic ack 获取消息，应答确认，消息不重新入队，将会从队列中删除</li>
</ul>
</li>
</ul>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223281.png" alt="消息内容"></p>
<h3 id="FanoutExchange-1"><a href="#FanoutExchange-1" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h3><p>创建一个 fanout 类型的交换机</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223290.png" alt=" "></p>
<p>进入交换机绑定队列 </p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223332.png" alt="2"></p>
<p>绑定刚刚创建的所有队列</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223346.png" alt="3"></p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>当前绑定的队列消息都是空的</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223392.png" alt="1"></p>
<p>测试发送消息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223442.png" alt="2"></p>
<p>可以发现我们所有的队列都收到了这条消息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223474.png" alt="3"></p>
<p>先让任意一个队列获取这个消息并回复确认看看</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223605.png" alt="4"></p>
<p>再次查看队列状态，发现只有刚刚处理掉消息的队列删除了这个消息，其它队列还在等待处理。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223607.png" alt="5"></p>
<h3 id="TopicExchange-1"><a href="#TopicExchange-1" class="headerlink" title="TopicExchange"></a>TopicExchange</h3><p>创建Topic交换机</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223613.png" alt="1"></p>
<p>创建成功后就给他绑定队列</p>
<p>使用 <code>gulimall.#</code> 表示路由键以 <code>gulimall</code> 单词开头的都可以匹配到</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223684.png" alt="2"></p>
<p>根据以下规则绑定队列</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223705.png" alt="3"></p>
<h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>发送一个路由键是 <code>gulimall.news</code> 的消息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223800.png" alt="1"></p>
<p>全部队列都收到了，因为<code>gulimall.#</code> 表示只要是以<code>gulimall.</code>开始的任意字符都能匹配，<code>*.news</code> 表示news前面必须要有一个任意单词</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212223831.png" alt="2"></p>
<p>再发一个 <code>hello.news</code> ，绑定键能匹配上的只有 <code>gulixueyuan.news</code> 这个队列</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202211957249.png" alt="3"></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202211958867.png" alt="4"></p>
<h2 id="SpringBoot-整合RabbitMQ"><a href="#SpringBoot-整合RabbitMQ" class="headerlink" title="SpringBoot 整合RabbitMQ"></a>SpringBoot 整合RabbitMQ</h2><p>第一步肯定是要引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入这个依赖后，在 <code>RabbitAutoConfiguration</code> 中，配置了如下几个重要的Bean：</p>
<ul>
<li><code>RabbitConnectionFactoryBean</code> 连接工厂</li>
<li><code>RabbitTemplate</code> 操作组件</li>
<li><code>AmqpAdmin</code> 高级消息队列管理</li>
</ul>
<p>引入后需要配置最基础的配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">192.168.135.128 # 缺省，默认是localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672 # 缺省，默认是5671、5672</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.rabbitmq.virtual-host</span>=<span class="string">/ # 缺省，默认/</span></span><br></pre></td></tr></table></figure>

<p>如需进一步配置，可到 <code>org.springframework.boot.autoconfigure.amqp.RabbitProperties</code> 类中查看，这是 Rabbit 配置类</p>
<h3 id="如何创建-Exchange、Queue、Binding"><a href="#如何创建-Exchange、Queue、Binding" class="headerlink" title="如何创建 Exchange、Queue、Binding"></a>如何创建 Exchange、Queue、Binding</h3><p>通过 <code>AmqpAdmin</code> 高级消息队列管理组件来进行创建 Exchange、Queue、Binding。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">amqpAdmin.declareExchange(Exchange);</span><br></pre></td></tr></table></figure>

<p><code>declareExchange</code> 方法需要传一个 exchange</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212134491.png" alt="Exchange集成、实现关系图"></p>
<p>根据上图，如果我们需要创建 <code>TopicExchange</code> ，我们需要创建一个 <code>TopicExchange.class</code> 实例给到 <code>declareExchange</code> 方法</p>
<p>实例参数分别是：交换机名称、Durable是否持久化、是否自动删除、交换机参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TopicExchange</span> <span class="variable">topicExchange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(</span><br><span class="line">  <span class="string">&quot;hello.java.TopicExchange&quot;</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HashMap</span>()</span><br><span class="line">);</span><br><span class="line">amqpAdmin.declareExchange(topicExchange);</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212147783.png" alt="代码创建交换机结果图"></p>
<p>同样的，可以使用 <code>declareQueue</code> 方法创建一个队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(</span><br><span class="line">  <span class="string">&quot;hello.java.queue&quot;</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()</span><br><span class="line">);</span><br><span class="line">amqpAdmin.declareQueue(queue);</span><br></pre></td></tr></table></figure>

<p>队列创建参数分别是：队列名称、是否持久化、是否排他（只要有一个连接连上队列，其它连接就不能再连接）、是否是自动删除、队列参数</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212215743.png" alt="代码创建队列结果"></p>
<p>交换机和队列创建完毕之后，如需创建绑定关系，可以使用 <code>declareBinding</code> 方法创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Binding</span>(</span><br><span class="line">    <span class="string">&quot;hello.java.queue&quot;</span>,</span><br><span class="line">    Binding.DestinationType.QUEUE,</span><br><span class="line">    <span class="string">&quot;hello.java.TopicExchange&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hello.java.queue&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()</span><br><span class="line">);</span><br><span class="line">amqpAdmin.declareBinding(binding);</span><br></pre></td></tr></table></figure>

<p><code>Binding</code> 类有如下参数：</p>
<ul>
<li><code>destination</code> 目的地（交换机&#x2F;队列名称）</li>
<li><code>destinationType</code> 绑定类型（和什么东西进行绑定）<ul>
<li><code>EXCHANGE</code> 指明目的地是一个交换机</li>
<li><code>QUEUE</code> 指明目的地是一个队列</li>
</ul>
</li>
<li><code>exchange</code> 交换机名称</li>
<li><code>routing-key</code> 路由键</li>
<li><code>argument</code> 绑定参数 c</li>
</ul>
<p>代码参数可参考GUI操作内容：</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212229934.png" alt="代码和GUI对应关系"></p>
<p>绑定结果</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202212231468.png" alt="运行结果"></p>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>一切准备就绪后，通过 <code>RabbitTemplate</code> 来发送、接收消息</p>
<p><code>Message</code> 需要传递一个字节流来进行初始化实例</p>
<p><code>send</code> 可以将指定<code>Message</code> 实例发送到指定交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">halo</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(halo.getBytes());</span><br><span class="line">rabbitTemplate.send(<span class="string">&quot;hello.java.TopicExchange&quot;</span>, <span class="string">&quot;hello.java.queue&quot;</span>, message);</span><br></pre></td></tr></table></figure>

<p> <img src="https://qiniu-note-image.ctong.top/note/images/202202240851962.png" alt="消息发送结果"></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202240852166.png" alt="消息内容"></p>
<p>同时也可以使用 <code>convertAndSend</code> 方法将一个对象序列化为byte发送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(</span><br><span class="line">    <span class="string">&quot;hello.java.TopicExchange&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hello.java.queue&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202202240938733.png" alt="convertAndSend 发送消息"></p>
<p>可以配置一个 <code>MessageConverter</code> 将对象转为JSON格式或其它格式，前提是被序列化对象一定要实现 <code>Serializeble</code> 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加 Rabbit 消息转换器 [Jackson2JsonMessageConverter]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MessageConverter new Jackson2JsonMessageConverter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/2/24 9:30 上午</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202202240943709.png" alt="自定义序列化结果"></p>
<h3 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h3><p>若想接收 Rabbit 的消息，SpringBoot 封装了一个<code>@RabbitListener</code> 注解，可以方便我们接收消息，它可以标注在类和方法上。若需要使用这些注解，必须要开启 <code>Rabbit</code> 才能使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GulimallOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@RabbitListener</code> 监听指定队列，注意：该注解只在 Spring 容器上生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello.java.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(Message message, User user)</span> &#123;</span><br><span class="line">  <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> message.getMessageProperties();</span><br><span class="line">  log.info(<span class="string">&quot;消息头属性信息：&#123;&#125;&quot;</span>, messageProperties);</span><br><span class="line">  log.info(<span class="string">&quot;接收到消息：&#123;&#125;&quot;</span>, user);<span class="comment">// 接收到消息：User(name=Clover You)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 如果需要获取通道，可以使用 <code>com.rabbitmq.client.Channel</code> 参数，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello.java.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(Channel channel)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Queue 可以有很多人都来监听，只要收到洗消息，队列会将消息删除，而且只能有一个人收到从消息。</li>
<li>只有一个消息处理完成方法结束后才能再接收下一个消息</li>
</ul>
</blockquote>
<h2 id="RabbitMQ-消息确认机制"><a href="#RabbitMQ-消息确认机制" class="headerlink" title="RabbitMQ 消息确认机制"></a>RabbitMQ 消息确认机制</h2><ul>
<li>保证消息不丢失，可靠抵达，可以使用事务消息，性能下降250倍，为此引入确认机制。</li>
<li>publisher confirmCallback 确认模式</li>
<li>publisher returnCallback 未投递到 queue 退回模式</li>
<li>consumer ack 机制</li>
</ul>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202241452531.png" alt="消息可靠送达制流程图"></p>
<h3 id="可靠抵达"><a href="#可靠抵达" class="headerlink" title="可靠抵达"></a>可靠抵达</h3><h4 id="ConfirmCallBack"><a href="#ConfirmCallBack" class="headerlink" title="ConfirmCallBack"></a>ConfirmCallBack</h4><ul>
<li>设置 <code>spring-rabbitmq.publisher-confirm=true</code><ul>
<li>在创建 <code>connectionFactory</code> 的时候设置 PublisherConfirms(true)选项开启confirmCallback。</li>
<li>CorrelationData 用来表示当前消息唯一性。</li>
<li>消息只要倍 broker 接收到就会执行 confitmCallback，如果是 cluster(集群) 模式，需要所有 broker 接收到才会调用 confirmCallback</li>
<li>被 broker 接收到只能表示 message 已经到达服务器，并不能保证消息一定会被投递到目标 queue 里。所以需要用到 retrunCallback。</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>spring-rabbitmq.publisher-confirm=true</code> 配置在新版中被弃用，改用 <code>spring-rabbitmq.publisher-confirm-type=correlated</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Confirmation callback.</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 当前消息的唯一关联数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack 消息成功还是失败</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败原因</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;initRabbitTemplate&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ReturnCallback"><a href="#ReturnCallback" class="headerlink" title="ReturnCallback"></a>ReturnCallback</h4><ul>
<li><p>设置 <code>spring.rabbitmq.publisher-returns=true</code> </p>
</li>
<li><p>设置 <code>spring.rabbitmq.template.mandatory=true</code> </p>
<blockquote>
<p>如果消息抵达目标队列，那么首先通过异步的方式调用retrunsCallba ck</p>
</blockquote>
<ul>
<li>confrim 模式只能保证消息抵达 broker，不能保证消息准确投递到目标 queue 中。在有些业务场景下，我们需要保证消息一定要投递到目标 queue 里，此时就需要用到 return 退回模式。</li>
<li>如果未能投递到目标 queue 里那么将调用 returnCallback，可以记录下详细到投递数据，定期的巡检或者自动纠错都需要这些数据。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果消息没有抵达指定的 queue，那么就会触发这个失败回调</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> returned 消息和元数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> returned.getMessage();<span class="comment">// 投递失败的消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">replyText</span> <span class="operator">=</span> returned.getReplyText();<span class="comment">// RabbitMQ回复信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> returned.getRoutingKey();<span class="comment">// 投递时使用的路由键</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">replyCode</span> <span class="operator">=</span> returned.getReplyCode();<span class="comment">// RabbitMQ 回复的状态码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> returned.getExchange();<span class="comment">// 当时消息是发给哪个交换机的</span></span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">&quot;message: &#123;&#125;&quot;</span>, message);</span><br><span class="line">                log.info(<span class="string">&quot;replyText: &#123;&#125;&quot;</span>, replyText);</span><br><span class="line">                log.info(<span class="string">&quot;routingKey: &#123;&#125;&quot;</span>, routingKey);</span><br><span class="line">                log.info(<span class="string">&quot;replyCode: &#123;&#125;&quot;</span>, replyCode);</span><br><span class="line">                log.info(<span class="string">&quot;exchange: &#123;&#125;&quot;</span>, exchange);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==================== Returned Callback ====================</span><br><span class="line">message: (Body:&#x27;&#123;&quot;name&quot;:&quot;Clover You&quot;&#125;&#x27; MessageProperties [headers=&#123;__TypeId__=top.ctong.gulimall.order.User&#125;, contentType=application/json, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, deliveryTag=0])</span><br><span class="line">replyText: NO_ROUTE</span><br><span class="line">routingKey: hello.java.queue1</span><br><span class="line">replyCode: 312</span><br><span class="line">exchange: hello.java.TopicExchange</span><br></pre></td></tr></table></figure>

<h3 id="消费端确认"><a href="#消费端确认" class="headerlink" title="消费端确认"></a>消费端确认</h3><p>消费端确认机制可以保每个消息都能被正确的处理，此时 broker 才可以删除这个消息。</p>
<ol>
<li>默认是自动确认，只要消息接收到，客户端会自动回复确认，服务端接收到确认消息后就会自动删除这个消息。</li>
<li>如果需要设置为手动确认，配置需要添加 <code>spring.rabbitmq.listener.simple.acknowledge-mode=manual</code></li>
<li>手动确认模式，只要我们没有明确告诉MQ消息已被处理&#x2F;没有Ack，消息就一直是 Unacked 状态。即使 Consumer宕机，消息也不会丢失，会重新变为 Ready 状态。</li>
</ol>
<p>发送4个消息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202241622172.png" alt="检查消息"></p>
<p>通过断点阻塞处理方法，所以上图是 Ready&#x3D;0 ，Unacked&#x3D;4</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202241623499.png" alt="断点"></p>
<p>停掉所有断点后检查Queue，状态变为未处理：Ready&#x3D;4 ，Unacked&#x3D;0</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202241629015.png" alt="取消领取状态"></p>
<p>如果需要回复确认，需要使用 Channel 来进行回复</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello.java.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(Message message, User user, Channel channel)</span> &#123;</span><br><span class="line">  <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> message.getMessageProperties();</span><br><span class="line">  log.info(<span class="string">&quot;消息头属性信息：&#123;&#125;&quot;</span>, messageProperties);</span><br><span class="line">  log.info(<span class="string">&quot;接收到消息：&#123;&#125;&quot;</span>, user);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 第二个参数表示不批量确认</span></span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，有确认模式也有拒绝模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello.java.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(Message message, User user, Channel channel)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 拒绝消息，第三个参数是表示：true 拒绝后消息重新回到队列，false 拒绝后丢弃消息不重新加入MQ</span></span><br><span class="line">    channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Ack消息确认机制"><a href="#Ack消息确认机制" class="headerlink" title="Ack消息确认机制"></a>Ack消息确认机制</h4><ul>
<li>消费者获取到消息，成功处理，可以回复 Ack 给 Broker<ul>
<li>basic.ack 用于肯定确认；broker 将移除此消息</li>
<li>basic.nack 用于否定确认；可以指定 broker 是否丢弃此消息，可以批量</li>
<li>basic.reject 用于是否确认，同上，但不能批量</li>
</ul>
</li>
<li>默认：消息被消费者收到，就会从 broker 的 queue 中移除</li>
<li>消费者收到消息，默认会自动 ack。但是如果无法确定此消息是否被处理完成，或者成功处理，我们可以开启手动 abc 模式<ul>
<li>消息处理成功，<code>ack()</code>，接受下一个消息，此消息 broker 就会移除</li>
<li>消息处理失败，<code>nack()/reject()</code> ，将重新发送给其他人进行处理，或者容错处理后 ack</li>
<li>消息一直没有调用 <code>ack/nack</code> 方法，broker 认为此消息正在被处理，不会投递给其他人。如果此时客户端断开，消息不会被 broker 移除，会投递给别人。</li>
</ul>
</li>
</ul>
<h2 id="如何保证消息可靠性"><a href="#如何保证消息可靠性" class="headerlink" title="如何保证消息可靠性"></a>如何保证消息可靠性</h2><h3 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h3><ul>
<li>消息发送出去，由于网络原因没有抵达服务器<ul>
<li>做好容错方法（try-catch），发送消息可能会网络失败，失败后要有重试机制，可记录到数据库，采用定期扫描重发的方式。</li>
<li>做好日志记录，每个消息状态是否都被服务器收到都应该记录</li>
<li>做好定期重发，如果消息没有发送成功，定期去数据库扫描未成功的消息进行重发。</li>
</ul>
</li>
<li>消息抵达 Broker，Broker <strong>要将消息写入磁盘（持久化）才算成功</strong>。此时 Broker 尚未持久化完成，宕机。<ul>
<li>publisher 也必须加入确认回调机制，确认成功的消息，修改数据库消息状态。</li>
</ul>
</li>
<li>自动 ACK 状态下，消费者接受到消息，没来的及消费消息如何宕机<ul>
<li>一定要开启手动 ACK ，消息成功才能通知 MQ 移除消息，失败或者没来得及处理就 noACK 并重新入队。</li>
</ul>
</li>
</ul>
<h3 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h3><ul>
<li>消息消费成功，事务已经提交成功了，ack 时，机器宕机导致没有 ack 成功， Broker 的消息重新由 unack 变为 ready，并发送给其他消费者</li>
<li>消息消费失败，ack 宕机，消息由 unack 变为 ready，Broker 又重新发送<ul>
<li>消费者的业务消费接口应该设计为<strong>具备幂等性</strong>，比如扣库存有工作单的状态标志</li>
<li>使用<strong>防重表</strong> （redis&#x2F;mysql）， 发送消息每一个都有业务的唯一标识，处理过就不用再处理</li>
<li>rabbitMQ 的每一个消息都有 redelivered 字段，可以获取是否是被重新投递过来还是第一次投递过来的。</li>
</ul>
</li>
</ul>
<h3 id="消息积压"><a href="#消息积压" class="headerlink" title="消息积压"></a>消息积压</h3><ul>
<li>消费者宕机积压</li>
<li>消费者消费能力不足导致消息积压</li>
<li>发送者发送流量太大<ul>
<li>上线更多的消费者，进行正常消费</li>
<li>上线专门的队列消费服务，将消息先批量取出，记录到数据库，最后离线方式慢慢处理。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2022/01/02/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><p>MySQL最初是由“MySQL AB”公司开发的一套关系型数据库管理系统（RDBMS-Relational DataBase Management System）。</p>
<p> MySQL不仅是最流行的开源数据库，而且是业界成长最快的数据库，每天有超过7万次的下载量，其范围从大企业到专有的嵌入应用系统。</p>
<p>MySQL AB是由两个瑞典人和一个芬兰人：David AxMark、Allan Larsson 和Michael “Monty Widenius”在瑞典举办的。</p>
<p>在2008年初，Sun Microsystems收购了MySQL AB公司。在2009年，Oracle收购了Sun公司，使MySQL并入Oracle的数据库产品线。</p>
<h2 id="SQL、DB、DBMS分别是什么，他们之间的关系？"><a href="#SQL、DB、DBMS分别是什么，他们之间的关系？" class="headerlink" title="SQL、DB、DBMS分别是什么，他们之间的关系？"></a>SQL、DB、DBMS分别是什么，他们之间的关系？</h2><ul>
<li><p>DB<br>DataBase ：数据库，数据库实际上在硬盘上以文件的形式存在</p>
</li>
<li><p>DBMS<br>DataBase Management  System：数据库管理系统，常见的有：MySQL、Oracle、DB2、Sybse、SQLServer…</p>
</li>
<li><p>SQL</p>
<p>结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。SQL属于高级语言。SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行SQL。（SQL语句的编译由DBMS完成）</p>
</li>
</ul>
<p>DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。</p>
<p>DBMS &#x3D;&#x3D;(执行)&#x3D;&#x3D;&gt; SQL &#x3D;&#x3D;(操作)&#x3D;&#x3D;&gt; DB</p>
<h1 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h1><ul>
<li><p>表：table</p>
<p>是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。</p>
</li>
<li><p>一个表包括行和列</p>
<ul>
<li>行<br>被称为数据&#x2F;记录（data）</li>
<li>列<br>被称为字段（column）</li>
</ul>
</li>
<li><p>每一个字段应该包括哪些属性？<br>一个字段，应该包括：字段名、数据类型、相关的约束。</p>
</li>
</ul>
<h1 id="对SQL语句的分类"><a href="#对SQL语句的分类" class="headerlink" title="对SQL语句的分类"></a>对SQL语句的分类</h1><ul>
<li><p>DQL（数据查询语言）<br>查询语句，凡是select语句都是DQL</p>
</li>
<li><p>DML（数据操作语言）<br>insert delete update，对表当中的数据进行增删改</p>
</li>
<li><p>DDL（数据定义语言）</p>
<p>create drop alert，对表结构的增删改。</p>
</li>
<li><p>TCL（事务控制语言）<br>commit提交事务，rollback回滚事物</p>
</li>
<li><p>DCL（数据控制语言）<br>grant授权、revoke撤销权限等</p>
</li>
</ul>
<h1 id="MySQL命令"><a href="#MySQL命令" class="headerlink" title="MySQL命令"></a>MySQL命令</h1><ol>
<li><p>登录mysql数据库管理系统<br>dos命令窗口</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p[密码]</span><br></pre></td></tr></table></figure>

<p>在Mac中如果出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/tmp/mysql.sock&#x27; (2)</span><br></pre></td></tr></table></figure>

<p>可能是mysqld服务没启动，在dos命令窗口输入<code>mysqld</code>等待启动即可</p>
</li>
<li><p>查看有哪些数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ry<span class="operator">-</span>vue             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>这不是SQL语句，而是MySQL的命令</p>
</li>
<li><p>创建属于我们自己的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database upyou_database;</span><br></pre></td></tr></table></figure>

<p>这个也不是一个sql语句，还是属于MySQL的命令。</p>
<p>此时查看我们当前现有的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ry<span class="operator">-</span>vue             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> upyou_database     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>upyou_database</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use upyou_database;</span><br></pre></td></tr></table></figure>

<p>这依然不是一个sql语句，这是一个属于mysql的命令。</p>
</li>
<li><p>查看当前使用的数据库中的表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tabels</span><br></pre></td></tr></table></figure>

<p>这个也不是一个sql语句，还是属于MySQL的命令。</p>
<p>由于当前我们没有创建一个表，所以一下结果来源于mysql表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------+</span><br><span class="line">| Tables_in_mysql                              |</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">| columns_priv                                 |</span><br><span class="line">| component                                    |</span><br><span class="line">| db                                           |</span><br><span class="line">| default_roles                                |</span><br><span class="line">| engine_cost                                  |</span><br><span class="line">| func                                         |</span><br><span class="line">| general_log                                  |</span><br><span class="line">| global_grants                                |</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">34 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>为刚刚创建的数据库<code>upyou_database</code>初始化数据。</p>
<p>使用mysql的<code>source</code>命令来导入一个sql脚本，如果你有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source </span><br></pre></td></tr></table></figure>

<p><a href="http://www.bjpowernode.com/javavideo/111.html?bili">学习数据库脚本下载</a></p>
<p>导入成功后查看当前数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br><span class="line">+--------------------------+</span><br><span class="line">| Tables_in_upyou_database |</span><br><span class="line">+--------------------------+</span><br><span class="line">| DEPT                     |</span><br><span class="line">| EMP                      |</span><br><span class="line">| SALGRADE                 |</span><br><span class="line">+--------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>尝试将刚刚创建的<code>upyou_database</code>删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database upyou_database;</span><br></pre></td></tr></table></figure>

<p>查看当前数据库列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| ry-vue             |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><p>当前数据库为<code>upyou_database</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------------+</span><br><span class="line">| Tables_in_upyou_database |</span><br><span class="line">+--------------------------+</span><br><span class="line">| DEPT                     |	(部门表)</span><br><span class="line">| EMP                      |	(员工表)</span><br><span class="line">| SALGRADE                 |	(工资等级表)</span><br><span class="line">+--------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>使用<code>desc</code>命令查看表结构，DEPT是一个表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc DEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| DEPTNO | int         | NO   | PRI | NULL    |       |	(部门编号)</span><br><span class="line">| DNAME  | varchar(14) | YES  |     | NULL    |       |	(部门名称)</span><br><span class="line">| LOC    | varchar(13) | YES  |     | NULL    |       |	(部门位置)</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc EMP</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| EMPNO    | int         | NO   | PRI | NULL    |       |	（员工编号）</span><br><span class="line">| ENAME    | varchar(10) | YES  |     | NULL    |       |	（员工姓名）</span><br><span class="line">| JOB      | varchar(9)  | YES  |     | NULL    |       |	（工作岗位）</span><br><span class="line">| MGR      | int         | YES  |     | NULL    |       |	（上级领导编号）</span><br><span class="line">| HIREDATE | date        | YES  |     | NULL    |       |	（入职日期）</span><br><span class="line">| SAL      | double(7,2) | YES  |     | NULL    |       |	（月薪）</span><br><span class="line">| COMM     | double(7,2) | YES  |     | NULL    |       |	（补助）</span><br><span class="line">| DEPTNO   | int         | YES  |     | NULL    |       |	（部门编号）</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc SALGRADE</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------+------+------+-----+---------+-------+</span><br><span class="line">| GRADE | int  | YES  |     | NULL    |       |	（等级）</span><br><span class="line">| LOSAL | int  | YES  |     | NULL    |       |	（最低薪资）</span><br><span class="line">| HISAL | int  | YES  |     | NULL    |       |	（最高薪资）</span><br><span class="line">+-------+------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="查询当前使用的数据库"><a href="#查询当前使用的数据库" class="headerlink" title="查询当前使用的数据库"></a>查询当前使用的数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| database()     |</span><br><span class="line">+----------------+</span><br><span class="line">| upyou_database |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="查看MySQL本号"><a href="#查看MySQL本号" class="headerlink" title="查看MySQL本号"></a>查看MySQL本号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 8.0.22    |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure>



<h2 id="结束一条语句"><a href="#结束一条语句" class="headerlink" title="结束一条语句"></a>结束一条语句</h2><p>当想结束一条语句时使用<code>\c</code>命令，例如想结束以下语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; selece</span><br><span class="line">    -&gt; *</span><br><span class="line">    -&gt; from</span><br><span class="line">    -&gt; </span><br><span class="line">    -&gt; </span><br><span class="line">    -&gt; </span><br><span class="line">    -&gt; </span><br></pre></td></tr></table></figure>

<p>输入<code>\c</code>后回车即可结束语句。</p>
<h2 id="查看创建表的语句："><a href="#查看创建表的语句：" class="headerlink" title="查看创建表的语句："></a>查看创建表的语句：</h2><p>如果想查看某个表是用哪条语句创建的，可以使用<code>show create table 表名</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table DEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> DEPT  <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `DEPT` (</span><br><span class="line">  `DEPTNO` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `DNAME` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `LOC` <span class="type">varchar</span>(<span class="number">13</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`DEPTNO`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>



<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="SQL脚本"><a href="#SQL脚本" class="headerlink" title="SQL脚本"></a>SQL脚本</h2><p>以<code>.sql</code>结尾的文件，这样的文件被称为“sql脚本”。什么是sql脚本呢？</p>
<p>当一个文件的拓展名是<code>.sql</code>，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。</p>
<blockquote>
<p>sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</p>
</blockquote>
<h2 id="查看表格中的数据"><a href="#查看表格中的数据" class="headerlink" title="查看表格中的数据"></a>查看表格中的数据</h2><p>查询某个表中所有的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> DEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="简单的查询语句（DQL）"><a href="#简单的查询语句（DQL）" class="headerlink" title="简单的查询语句（DQL）"></a>简单的查询语句（DQL）</h2><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span>, 字段名<span class="number">3</span>, ... <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li>任何一条sql语句以分号结尾“;”。</li>
<li>sql 语句不区分大小写。</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol>
<li><p>查询员工名字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| ENAME  |</span><br><span class="line">+--------+</span><br><span class="line">| SMITH  |</span><br><span class="line">| ALLEN  |</span><br><span class="line">| WARD   |</span><br><span class="line">| JONES  |</span><br><span class="line">| MARTIN |</span><br><span class="line">| BLAKE  |</span><br><span class="line">| CLARK  |</span><br><span class="line">| SCOTT  |</span><br><span class="line">| KING   |</span><br><span class="line">| TURNER |</span><br><span class="line">| ADAMS  |</span><br><span class="line">| JAMES  |</span><br><span class="line">| FORD   |</span><br><span class="line">| MILLER |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>


</li>
<li><p>查询员工的年薪</p>
<p>数据库中记录的是月薪，年薪是需要乘12</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, (SAL <span class="operator">*</span> <span class="number">12</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ENAME  | (SAL * 12) |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  |    9600.00 |</span><br><span class="line">| ALLEN  |   19200.00 |</span><br><span class="line">| WARD   |   15000.00 |</span><br><span class="line">| JONES  |   35700.00 |</span><br><span class="line">| MARTIN |   15000.00 |</span><br><span class="line">| BLAKE  |   34200.00 |</span><br><span class="line">| CLARK  |   29400.00 |</span><br><span class="line">| SCOTT  |   36000.00 |</span><br><span class="line">| KING   |   60000.00 |</span><br><span class="line">| TURNER |   18000.00 |</span><br><span class="line">| ADAMS  |   13200.00 |</span><br><span class="line">| JAMES  |   11400.00 |</span><br><span class="line">| FORD   |   36000.00 |</span><br><span class="line">| MILLER |   15600.00 |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure>

<p>如果由于<code>SAL * 12</code>后字段名变为SAL * 12，如需重新给该字段名明，可以使用<code>as</code>关键字命名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, (SAL <span class="operator">*</span> <span class="number">12</span>) <span class="keyword">as</span> SAL <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ENAMW  | SAL      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| SMITH  |  <span class="number">9600.00</span> |</span><br><span class="line">| ALLEN  | <span class="number">19200.00</span> |</span><br><span class="line">| WARD   | <span class="number">15000.00</span> |</span><br><span class="line">| JONES  | <span class="number">35700.00</span> |</span><br><span class="line">| MARTIN | <span class="number">15000.00</span> |</span><br><span class="line">| BLAKE  | <span class="number">34200.00</span> |</span><br><span class="line">| CLARK  | <span class="number">29400.00</span> |</span><br><span class="line">| SCOTT  | <span class="number">36000.00</span> |</span><br><span class="line">| KING   | <span class="number">60000.00</span> |</span><br><span class="line">| TURNER | <span class="number">18000.00</span> |</span><br><span class="line">| ADAMS  | <span class="number">13200.00</span> |</span><br><span class="line">| JAMES  | <span class="number">11400.00</span> |</span><br><span class="line">| FORD   | <span class="number">36000.00</span> |</span><br><span class="line">| MILLER | <span class="number">15600.00</span> |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>通过以上可以看出来，在<code>sql</code>中字段可以参与数学运算。</p>
<p>如果字段想显示中文，则需要使用单引号包裹（标准sql语句中要求字符串使用单引号括起来。）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, SAL <span class="operator">*</span> <span class="number">12</span> <span class="keyword">as</span> <span class="string">&#x27;年薪&#x27;</span> <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+----------+</span><br><span class="line">| 员工名    | 年薪     |</span><br><span class="line">+-----------+----------+</span><br><span class="line">| SMITH     |  9600.00 |</span><br><span class="line">| ALLEN     | 19200.00 |</span><br><span class="line">| WARD      | 15000.00 |</span><br><span class="line">| JONES     | 35700.00 |</span><br><span class="line">| MARTIN    | 15000.00 |</span><br><span class="line">| BLAKE     | 34200.00 |</span><br><span class="line">| CLARK     | 29400.00 |</span><br><span class="line">| SCOTT     | 36000.00 |</span><br><span class="line">| KING      | 60000.00 |</span><br><span class="line">| TURNER    | 18000.00 |</span><br><span class="line">| ADAMS     | 13200.00 |</span><br><span class="line">| JAMES     | 11400.00 |</span><br><span class="line">| FORD      | 36000.00 |</span><br><span class="line">| MILLER    | 15600.00 |</span><br><span class="line">+-----------+----------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>在SQL Server、Oracle中仅支持并必须使用单引号将中文包裹，而MySQL可以使用双引号和单引号，所以以后写SQL语句不要出现双引号，如果出现双引号意味着这个SQL脚本只能在MySQL中使用。</strong></p>
<h3 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h3><p>在sql中可以使用<code>*</code>代表所有字段，如果需要查询所有字段，可以使用<code>*</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  <span class="number">7369</span> | SMITH  | CLERK     | <span class="number">7902</span> | <span class="number">1980</span>-<span class="number">12</span>-<span class="number">17</span> |  <span class="number">800.00</span> |    NULL |     <span class="number">20</span> |</span><br><span class="line">|  <span class="number">7499</span> | ALLEN  | SALESMAN  | <span class="number">7698</span> | <span class="number">1981</span>-<span class="number">02</span>-<span class="number">20</span> | <span class="number">1600.00</span> |  <span class="number">300.00</span> |     <span class="number">30</span> |</span><br><span class="line">|  <span class="number">7521</span> | WARD   | SALESMAN  | <span class="number">7698</span> | <span class="number">1981</span>-<span class="number">02</span>-<span class="number">22</span> | <span class="number">1250.00</span> |  <span class="number">500.00</span> |     <span class="number">30</span> |</span><br><span class="line">|  <span class="number">7566</span> | JONES  | MANAGER   | <span class="number">7839</span> | <span class="number">1981</span>-<span class="number">04</span>-<span class="number">02</span> | <span class="number">2975.00</span> |    NULL |     <span class="number">20</span> |</span><br><span class="line">|  <span class="number">7654</span> | MARTIN | SALESMAN  | <span class="number">7698</span> | <span class="number">1981</span>-09-<span class="number">28</span> | <span class="number">1250.00</span> | <span class="number">1400.00</span> |     <span class="number">30</span> |</span><br><span class="line">|  <span class="number">7698</span> | BLAKE  | MANAGER   | <span class="number">7839</span> | <span class="number">1981</span>-<span class="number">05</span>-<span class="number">01</span> | <span class="number">2850.00</span> |    NULL |     <span class="number">30</span> |</span><br><span class="line">|  <span class="number">7782</span> | CLARK  | MANAGER   | <span class="number">7839</span> | <span class="number">1981</span>-<span class="number">06</span>-09 | <span class="number">2450.00</span> |    NULL |     <span class="number">10</span> |</span><br><span class="line">|  <span class="number">7788</span> | SCOTT  | ANALYST   | <span class="number">7566</span> | <span class="number">1987</span>-<span class="number">04</span>-<span class="number">19</span> | <span class="number">3000.00</span> |    NULL |     <span class="number">20</span> |</span><br><span class="line">|  <span class="number">7839</span> | KING   | PRESIDENT | NULL | <span class="number">1981</span>-<span class="number">11</span>-<span class="number">17</span> | <span class="number">5000.00</span> |    NULL |     <span class="number">10</span> |</span><br><span class="line">|  <span class="number">7844</span> | TURNER | SALESMAN  | <span class="number">7698</span> | <span class="number">1981</span>-09-08 | <span class="number">1500.00</span> |    <span class="number">0.00</span> |     <span class="number">30</span> |</span><br><span class="line">|  <span class="number">7876</span> | ADAMS  | CLERK     | <span class="number">7788</span> | <span class="number">1987</span>-<span class="number">05</span>-<span class="number">23</span> | <span class="number">1100.00</span> |    NULL |     <span class="number">20</span> |</span><br><span class="line">|  <span class="number">7900</span> | JAMES  | CLERK     | <span class="number">7698</span> | <span class="number">1981</span>-<span class="number">12</span>-<span class="number">03</span> |  <span class="number">950.00</span> |    NULL |     <span class="number">30</span> |</span><br><span class="line">|  <span class="number">7902</span> | FORD   | ANALYST   | <span class="number">7566</span> | <span class="number">1981</span>-<span class="number">12</span>-<span class="number">03</span> | <span class="number">3000.00</span> |    NULL |     <span class="number">20</span> |</span><br><span class="line">|  <span class="number">7934</span> | MILLER | CLERK     | <span class="number">7782</span> | <span class="number">1982</span>-<span class="number">01</span>-<span class="number">23</span> | <span class="number">1300.00</span> |    NULL |     <span class="number">10</span> |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line"><span class="number">14</span> rows in <span class="title function_">set</span> <span class="params">(<span class="number">0.00</span> sec)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不推荐在线上项目中使用，因为这会折扣一部分效率。</p>
</blockquote>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段, 字段, ... <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<p>执行顺序：from -&gt; where -&gt; select</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
</tr>
<tr>
<td>between…and…</td>
<td>两个值之间，等同于 <code>&gt;= and &lt;=</code></td>
</tr>
<tr>
<td>is null</td>
<td>为null（is not null 不为空）</td>
</tr>
<tr>
<td>and</td>
<td>并且</td>
</tr>
<tr>
<td>or</td>
<td>或者</td>
</tr>
<tr>
<td>in</td>
<td>包含，相当于多个or（not in不在这个范围中）</td>
</tr>
<tr>
<td>not</td>
<td>not 可以取非，主要用在is或in中</td>
</tr>
<tr>
<td>like</td>
<td>like称为模糊查询，支持%或下划线匹配</td>
</tr>
</tbody></table>
<ol>
<li><p>查询工资等于5000的员工姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">=</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| ENAME |</span><br><span class="line">+-------+</span><br><span class="line">| KING  |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询SMITH的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> ENAME <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| ENAME | SAL    |</span><br><span class="line">+-------+--------+</span><br><span class="line">| SMITH | 800.00 |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出工资高于3000的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&gt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+---------+</span><br><span class="line">| ENAME | SAL     |</span><br><span class="line">+-------+---------+</span><br><span class="line">| KING  | 5000.00 |</span><br><span class="line">+-------+---------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出工资不等于3000的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&lt;&gt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | SAL     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| SMITH  |  800.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| KING   | 5000.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| JAMES  |  950.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出工资在1100和3000之间的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&gt;=</span> <span class="number">1100</span> <span class="keyword">and</span> SAL <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | SAL     |N</span><br><span class="line">+--------+---------+</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="keyword">between</span> <span class="number">1100</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h3><p>between … and …是闭区间查询语法，执行结果与<code>SAL &gt;= 1100 and SAL &lt;= 3000</code>一致。<code>between and</code>在使用的时候必须左小右大。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="keyword">between</span> <span class="number">1100</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | SAL     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure>

<p><code>between and</code> 除了用在数字方面还可以用在字符串方面。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="keyword">from</span> EMP <span class="keyword">where</span> ENAME <span class="keyword">between</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;C&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| ENAME |</span><br><span class="line">+-------+</span><br><span class="line">| ALLEN |</span><br><span class="line">| BLAKE |</span><br><span class="line">| ADAMS |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>

<p>在数据库中，有这么一条数据，但我们却没有查出来，因为<code>between and</code>在字符串中是左闭右开的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| ENAME |</span><br><span class="line">+-------+</span><br><span class="line">| CLARK |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>



<h3 id="is-null-和-is-not-null"><a href="#is-null-和-is-not-null" class="headerlink" title="is null 和 is not null"></a>is null 和 is not null</h3><p>例子</p>
<ol>
<li><p>找出哪些人津贴为null？在数据库当中<strong>NULL</strong>不是一个值，代表什么也没有，为空。空不是一个值，不能使用等号衡量，必须使用<code>is null</code> 或者<code>is not null</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, COMM <span class="keyword">from</span> EMP <span class="keyword">where</span> COMM <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------+</span><br><span class="line">| ENAME  | COMM |</span><br><span class="line">+--------+------+</span><br><span class="line">| SMITH  | NULL |</span><br><span class="line">| JONES  | NULL |</span><br><span class="line">| BLAKE  | NULL |</span><br><span class="line">| CLARK  | NULL |</span><br><span class="line">| SCOTT  | NULL |</span><br><span class="line">| KING   | NULL |</span><br><span class="line">| TURNER | 0.00 |</span><br><span class="line">| ADAMS  | NULL |</span><br><span class="line">| JAMES  | NULL |</span><br><span class="line">| FORD   | NULL |</span><br><span class="line">| MILLER | NULL |</span><br><span class="line">+--------+------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出哪些人津贴不为NULL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, COMM <span class="keyword">from</span> EMP <span class="keyword">where</span> COMM <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | COMM    |</span><br><span class="line">+--------+---------+</span><br><span class="line">| ALLEN  |  300.00 |</span><br><span class="line">| WARD   |  500.00 |</span><br><span class="line">| MARTIN | 1400.00 |</span><br><span class="line">| TURNER |    0.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出哪些人没有津贴？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, COMM <span class="keyword">from</span> EMP <span class="keyword">where</span> COMM <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> COMM <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------+</span><br><span class="line">| ENAME  | COMM |</span><br><span class="line">+--------+------+</span><br><span class="line">| SMITH  | NULL |</span><br><span class="line">| JONES  | NULL |</span><br><span class="line">| BLAKE  | NULL |</span><br><span class="line">| CLARK  | NULL |</span><br><span class="line">| SCOTT  | NULL |</span><br><span class="line">| KING   | NULL |</span><br><span class="line">| TURNER | 0.00 |</span><br><span class="line">| ADAMS  | NULL |</span><br><span class="line">| JAMES  | NULL |</span><br><span class="line">| FORD   | NULL |</span><br><span class="line">| MILLER | NULL |</span><br><span class="line">+--------+------+</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="or和and的优先级问题"><a href="#or和and的优先级问题" class="headerlink" title="or和and的优先级问题"></a>or和and的优先级问题</h3><p>找出薪资大于1000并且部门编号是20或30部门的员工。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL, DEPTNO <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">and</span> DEPTNO <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> DEPTNO <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+--------+---------+--------+</span><br><span class="line">| ENAME  | SAL     | DEPTNO |</span><br><span class="line">+--------+---------+--------+</span><br><span class="line">| ALLEN  | <span class="number">1600.00</span> |     <span class="number">30</span> |</span><br><span class="line">| WARD   | <span class="number">1250.00</span> |     <span class="number">30</span> |</span><br><span class="line">| JONES  | <span class="number">2975.00</span> |     <span class="number">20</span> |</span><br><span class="line">| MARTIN | <span class="number">1250.00</span> |     <span class="number">30</span> |</span><br><span class="line">| BLAKE  | <span class="number">2850.00</span> |     <span class="number">30</span> |</span><br><span class="line">| SCOTT  | <span class="number">3000.00</span> |     <span class="number">20</span> |</span><br><span class="line">| TURNER | <span class="number">1500.00</span> |     <span class="number">30</span> |</span><br><span class="line">| ADAMS  | <span class="number">1100.00</span> |     <span class="number">20</span> |</span><br><span class="line">| JAMES  |  <span class="number">950.00</span> |     <span class="number">30</span> |</span><br><span class="line">| FORD   | <span class="number">3000.00</span> |     <span class="number">20</span> |</span><br><span class="line">+--------+---------+--------+</span><br></pre></td></tr></table></figure>

<p>以上例子在and和or联合使用时，and的优先级比较高，and会将左右两边的条件联合使用，再判判断or，所以需要使用小括号将or语句括起来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL, DEPTNO <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">and</span> (DEPTNO <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> DEPTNO <span class="operator">=</span> <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当运算符的优先级不确定的时候，添加小括号。</p>
</blockquote>
<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>in等同于or：找出工作岗位是MANAGER和SALESMAN的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, JOB <span class="keyword">from</span> EMP <span class="keyword">where</span> JOB <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">or</span> JOB <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ENAME  | JOB      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure>

<p>在以上例子中，<code>JOB = xxx or JOB = xxx</code>这样的语句可以使用in简化</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, JOB <span class="keyword">from</span> EMP <span class="keyword">where</span> JOB <span class="keyword">in</span> (<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ENAME  | JOB      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure>



<h3 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h3><p>not in：不在这几个值当中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, JOB <span class="keyword">from</span> EMP <span class="keyword">where</span> JOB <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-----------+</span><br><span class="line">| ENAME  | JOB       |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| SMITH  | CLERK     |</span><br><span class="line">| SCOTT  | ANALYST   |</span><br><span class="line">| KING   | PRESIDENT |</span><br><span class="line">| ADAMS  | CLERK     |</span><br><span class="line">| JAMES  | CLERK     |</span><br><span class="line">| FORD   | ANALYST   |</span><br><span class="line">| MILLER | CLERK     |</span><br><span class="line">+--------+-----------+</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, JOB <span class="keyword">from</span> EMP <span class="keyword">where</span> JOB <span class="operator">!=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">and</span> JOB <span class="operator">!=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h3><p>在模糊查询当中，必须掌握两个特殊的符号，一个是“%”，一个是“_”，“%”代表的是任意多个字符，“_”代表任意1个字符。如果需要找的是已””%””或者”_”，需要使用转义字符转义。</p>
<h4 id="找出名字当中含有O的？"><a href="#找出名字当中含有O的？" class="headerlink" title="找出名字当中含有O的？"></a>找出名字当中含有O的？</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="keyword">from</span> EMP <span class="keyword">where</span> ENAME <span class="keyword">like</span> <span class="string">&#x27;%O%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| ENAME |</span><br><span class="line">+-------+</span><br><span class="line">| JONES |</span><br><span class="line">| SCOTT |</span><br><span class="line">| FORD  |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>



<h4 id="找出名字中第二个字母是A的？"><a href="#找出名字中第二个字母是A的？" class="headerlink" title="找出名字中第二个字母是A的？"></a>找出名字中第二个字母是A的？</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME <span class="keyword">from</span> EMP <span class="keyword">where</span> ENAME <span class="keyword">like</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| ENAME  |</span><br><span class="line">+--------+</span><br><span class="line">| WARD   |</span><br><span class="line">| MARTIN |</span><br><span class="line">| JAMES  |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>



<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol>
<li><p>按照工资升序排序，找出员工名和薪资。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">order</span> <span class="keyword">by</span> SAL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | SAL     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| SMITH  |  800.00 |</span><br><span class="line">| JAMES  |  950.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| KING   | 5000.00 |</span><br><span class="line">+--------+---------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>order by</code>默认就是升序排序。怎么指定升序或者降序呢？ <code>asc</code> 表示升序，<code>desc</code> 表示降序。</p>
</li>
<li><p>按照工资降序排序，找出员工名和薪资。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">order</span> <span class="keyword">by</span> SAL <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | SAL     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| KING   | 5000.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| JAMES  |  950.00 |</span><br><span class="line">| SMITH  |  800.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">order</span> <span class="keyword">by</span> SAL <span class="keyword">desc</span>, ENAME <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ENAME  | SAL     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| KING   | 5000.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| JAMES  |  950.00 |</span><br><span class="line">| SMITH  |  800.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 越来靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</p>
</blockquote>
</li>
<li><p>找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, JOB, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> JOB <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> SAL <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------+---------+</span><br><span class="line">| ENAME  | JOB      | SAL     |</span><br><span class="line">+--------+----------+---------+</span><br><span class="line">| ALLEN  | SALESMAN | 1600.00 |</span><br><span class="line">| TURNER | SALESMAN | 1500.00 |</span><br><span class="line">| WARD   | SALESMAN | 1250.00 |</span><br><span class="line">| MARTIN | SALESMAN | 1250.00 |</span><br><span class="line">+--------+----------+---------+</span><br></pre></td></tr></table></figure>



<blockquote>
<p>无论何种排序，只有在结果查询出来时才能进行排序。也就是说order by是最后执行的。</p>
</blockquote>
</li>
</ol>
<h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><h3 id="多行处理函数"><a href="#多行处理函数" class="headerlink" title="多行处理函数"></a>多行处理函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>计数</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
</tbody></table>
<blockquote>
<p>所有的分组函数都是对某一组数据进行操作</p>
</blockquote>
<ol>
<li><p>找出员工工资总和</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(SAL) <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| sum(SAL) |</span><br><span class="line">+----------+</span><br><span class="line">| 29025.00 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出最高工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| max(SAL) |</span><br><span class="line">+----------+</span><br><span class="line">|  5000.00 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出最低工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(SAL) <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| min(SAL) |</span><br><span class="line">+----------+</span><br><span class="line">|   800.00 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出平均工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(SAL) <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+</span><br><span class="line">| avg(SAL)    |</span><br><span class="line">+-------------+</span><br><span class="line">| 2073.214286 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出总人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ENAME) <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| count(ENAME) |</span><br><span class="line">+--------------+</span><br><span class="line">|           14 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>

<p>count(*)和count(具体的某个字段)的区别是：count(*)查询的是总的条数，而count(字段)查询的是某个字段不为NULL的数据条数。</p>
</li>
</ol>
<blockquote>
<p>分组函数一共5个，分组函数还有另一个名字：<strong>多行处理函数</strong>。</p>
<p>多行处理函数的特点是：输入多行，输出一行。分组函数自动忽略NULL</p>
</blockquote>
<h3 id="单行处理行数"><a href="#单行处理行数" class="headerlink" title="单行处理行数"></a>单行处理行数</h3><p>单行处理函数是：输入行，输出一行。</p>
<blockquote>
<p>只要表达式中参与运算的成员有一个是NULL，无论式子怎么列，结果都为NULL（任何数据库）</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ifnull</td>
<td>空处理函数（ifnull(可能为NULL的数据，被当做什么处理)）</td>
</tr>
</tbody></table>
<ol>
<li><p>计算每个员工的年薪</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, (SAL <span class="operator">+</span> ifnull(COMM, <span class="number">0</span>)) <span class="operator">*</span> <span class="number">12</span> <span class="keyword">as</span> yearsal <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ENAME  | yearsal  |</span><br><span class="line">+--------+----------+</span><br><span class="line">| SMITH  |  9600.00 |</span><br><span class="line">| ALLEN  | 22800.00 |</span><br><span class="line">| WARD   | 21000.00 |</span><br><span class="line">| JONES  | 35700.00 |</span><br><span class="line">| MARTIN | 31800.00 |</span><br><span class="line">| BLAKE  | 34200.00 |</span><br><span class="line">| CLARK  | 29400.00 |</span><br><span class="line">| SCOTT  | 36000.00 |</span><br><span class="line">| KING   | 60000.00 |</span><br><span class="line">| TURNER | 18000.00 |</span><br><span class="line">| ADAMS  | 13200.00 |</span><br><span class="line">| JAMES  | 11400.00 |</span><br><span class="line">| FORD   | 36000.00 |</span><br><span class="line">| MILLER | 15600.00 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出工资高于平均工资的员工？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, SAL <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&gt;</span> <span class="built_in">avg</span>(SAL);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1111 (HY000): Invalid use of group function</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SQL语句当中有一个语法规则，分组函数不可直接使用在where子句中。因为group by是在where后执行，而分组函数是在group by后执行。</p>
</blockquote>
<p><strong>下面有</strong></p>
</li>
</ol>
<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>group</td>
<td>按照某个字段或者某些字段进行分组。</td>
</tr>
<tr>
<td>having</td>
<td>对分组之后的数据进行再次过滤。</td>
</tr>
</tbody></table>
<blockquote>
<p>分组函数一般都会和group by联合使用。这也是为什么它被称为分组函数的原因。并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。当一条sql语句没有group by的话，整张表的数据会自成一组。</p>
</blockquote>
<ol>
<li><p>找出每个工作岗位的最高薪资。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> JOB, <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> JOB;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+---------+</span><br><span class="line">| JOB       | MAXSAL  |</span><br><span class="line">+-----------+---------+</span><br><span class="line">| CLERK     | 1300.00 |</span><br><span class="line">| SALESMAN  | 1600.00 |</span><br><span class="line">| MANAGER   | 2975.00 |</span><br><span class="line">| ANALYST   | 3000.00 |</span><br><span class="line">| PRESIDENT | 5000.00 |</span><br><span class="line">+-----------+---------+</span><br></pre></td></tr></table></figure>

<p>执行顺序：from -&gt; group by -&gt; select<br><strong>当一条sql语句出现group by语句时，select语句只能出现分组语句以及参与分组字段，别的都不能出现。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, JOB, <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> JOB;</span><br></pre></td></tr></table></figure>

<p>以上语句在低版本<strong>MySQL</strong>可能不会出现以上错误并可查询出结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;upyou_database.EMP.ENAME&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询每个工作岗位的平均工资。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> JOB, <span class="built_in">avg</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> JOB;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+-------------+</span><br><span class="line">| JOB       | avg(SAL)    |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| CLERK     | 1037.500000 |</span><br><span class="line">| SALESMAN  | 1400.000000 |</span><br><span class="line">| MANAGER   | 2758.333333 |</span><br><span class="line">| ANALYST   | 3000.000000 |</span><br><span class="line">| PRESIDENT | 5000.000000 |</span><br><span class="line">+-----------+-------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出不同部门不同工作岗位的最高工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DEPTNO, JOB, <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> DEPTNI, JOB;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-----------+----------+</span><br><span class="line">| DEPTNO | JOB       | max(SAL) |</span><br><span class="line">+--------+-----------+----------+</span><br><span class="line">|     20 | CLERK     |  1100.00 |</span><br><span class="line">|     30 | SALESMAN  |  1600.00 |</span><br><span class="line">|     20 | MANAGER   |  2975.00 |</span><br><span class="line">|     30 | MANAGER   |  2850.00 |</span><br><span class="line">|     10 | MANAGER   |  2450.00 |</span><br><span class="line">|     20 | ANALYST   |  3000.00 |</span><br><span class="line">|     10 | PRESIDENT |  5000.00 |</span><br><span class="line">|     30 | CLERK     |   950.00 |</span><br><span class="line">|     10 | CLERK     |  1300.00 |</span><br><span class="line">+--------+-----------+----------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出每个部门的最高薪资，要求显示薪资大于2900的数据。</p>
<ol>
<li><p>第一步，找出每个部门的最高薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> DEPTNO;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| max(SAL) |</span><br><span class="line">+----------+</span><br><span class="line">|  3000.00 |</span><br><span class="line">|  2850.00 |</span><br><span class="line">|  5000.00 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>


</li>
<li><p>找出薪资大于2900的员工信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> DEPTNO <span class="keyword">having</span> <span class="built_in">max</span>(SAL) <span class="operator">&gt;</span> <span class="number">2900</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| max(SAL) |</span><br><span class="line">+----------+</span><br><span class="line">|  3000.00 |</span><br><span class="line">|  5000.00 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<p>以上使用<code>having</code>这种方式效率较低，可以使用<code>where</code>先过滤掉低于2900的数据后再分组。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">where</span> SAL <span class="operator">&gt;</span> <span class="number">2900</span> <span class="keyword">group</span> <span class="keyword">by</span> DEPTNO;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>找出每个部门的平均薪资，要求显示薪资大于2000的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(SAL) <span class="keyword">from</span> EMP <span class="keyword">group</span> <span class="keyword">by</span> DEPTNO <span class="keyword">having</span> svg(SAL) <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h3><p>如果查询emp表的JOB字段，会出现很多没必要的重复数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> JOB <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| job       |</span><br><span class="line">+-----------+</span><br><span class="line">| CLERK     |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| MANAGER   |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| MANAGER   |</span><br><span class="line">| MANAGER   |</span><br><span class="line">| ANALYST   |</span><br><span class="line">| PRESIDENT |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| CLERK     |</span><br><span class="line">| CLERK     |</span><br><span class="line">| ANALYST   |</span><br><span class="line">| CLERK     |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure>

<p>如果不需要重复数据可以使用<code>distinct</code>关键字去除重复数据(需要去重复的字段前使用)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> JOB <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| JOB       |</span><br><span class="line">+-----------+</span><br><span class="line">| CLERK     |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| MANAGER   |</span><br><span class="line">| ANALYST   |</span><br><span class="line">| PRESIDENT |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure>

<p>以下的SQL语句是错误的，没有这种语法机制</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, <span class="keyword">distinct</span> JOB <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;distinct job from emp&#x27; at line 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>distinct字段只能出现在所有字段的最前面。distinct后面的所有字段联合起来去重。<br>select distinct JOB, ENAME from EMP;</p>
</blockquote>
<h3 id="一个完整的DQL语句怎么写以及执行顺序"><a href="#一个完整的DQL语句怎么写以及执行顺序" class="headerlink" title="一个完整的DQL语句怎么写以及执行顺序"></a>一个完整的DQL语句怎么写以及执行顺序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 					<span class="number">5</span></span><br><span class="line">	... </span><br><span class="line"><span class="keyword">from</span> 						<span class="number">1</span></span><br><span class="line">	... </span><br><span class="line"><span class="keyword">where</span> 					<span class="number">2</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 				<span class="number">3</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">having</span>					<span class="number">4</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>				<span class="number">6</span></span><br></pre></td></tr></table></figure>









<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="什么是连接查询？"><a href="#什么是连接查询？" class="headerlink" title="什么是连接查询？"></a>什么是连接查询？</h2><p>在实际开发中，大部分情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。在实际开发中，一个业务都会对应多张表，比如：学生和班级：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stuno		stuname		classno								classname</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">1					zs				1					北京大兴区亦庄经济开发区第二中学高三1班</span><br><span class="line">2					ls				1					北京大兴区亦庄经济开发区第二中学高三1班</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的<strong>冗余</strong>。</p>
<h3 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h3><ol>
<li><p>根据语法出现的年代来划分的话，包括：</p>
<ul>
<li><p>SQL92</p>
</li>
<li><p>SQL99（比较新的语法）</p>
</li>
</ul>
</li>
<li><p>根据表的连接方式来划分，包括：</p>
<ul>
<li>内连接<ul>
<li>等值连接</li>
<li>非等值连接<br><code>between and</code></li>
<li>自连接</li>
</ul>
</li>
<li>外连接<ul>
<li>左外连接</li>
<li>右外连接</li>
</ul>
</li>
<li>全连接</li>
</ul>
</li>
</ol>
<h3 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h3><p>在表的连接查询方面有一种现象被称为：笛卡尔积现象。（笛卡尔乘积现象）</p>
<ol>
<li><p>找出每一个员工的部门名称，要求显示员工名和部门名称。<br>EMP表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, DEPTNO <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| ENAME  | DEPTNO |</span><br><span class="line">+--------+--------+</span><br><span class="line">| SMITH  |     20 |</span><br><span class="line">| ALLEN  |     30 |</span><br><span class="line">| WARD   |     30 |</span><br><span class="line">| JONES  |     20 |</span><br><span class="line">| MARTIN |     30 |</span><br><span class="line">| BLAKE  |     30 |</span><br><span class="line">| CLARK  |     10 |</span><br><span class="line">| SCOTT  |     20 |</span><br><span class="line">| KING   |     10 |</span><br><span class="line">| TURNER |     30 |</span><br><span class="line">| ADAMS  |     20 |</span><br><span class="line">| JAMES  |     30 |</span><br><span class="line">| FORD   |     20 |</span><br><span class="line">| MILLER |     10 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure>

<p>DEPT表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> DEPT;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure>

<p>通过from查询多张表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ENAME, DNAME <span class="keyword">from</span> EMP, DEPT;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | ACCOUNTING |</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| SMITH  | SALES      |</span><br><span class="line">| SMITH  | OPERATIONS |</span><br><span class="line">| ALLEN  | ACCOUNTING |</span><br><span class="line">| ALLEN  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| ALLEN  | OPERATIONS |</span><br><span class="line">| WARD   | ACCOUNTING |</span><br><span class="line">| WARD   | RESEARCH   |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| WARD   | OPERATIONS |</span><br><span class="line">| JONES  | ACCOUNTING |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">|...									|</span><br><span class="line">+--------+------------+</span><br><span class="line">56 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>以上sql语句没有过滤条件，意味着EMP中的每一项都可以和DEPT匹配。</p>
<blockquote>
<p>如果两张表连接的话如果没有任何条件限制，最终的查询结果条数是两张表记录条数的乘积。这种现象被称为笛卡尔乘积现象。</p>
</blockquote>
</li>
</ol>
<h3 id="关于表的别名"><a href="#关于表的别名" class="headerlink" title="关于表的别名"></a>关于表的别名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> E.ENAME, D.DNAME <span class="keyword">from</span> EMP E, DEPT D;</span><br></pre></td></tr></table></figure>

<h4 id="表的别名有什么好处？"><a href="#表的别名有什么好处？" class="headerlink" title="表的别名有什么好处？"></a>表的别名有什么好处？</h4><ol>
<li>执行效率高。</li>
<li>可读性好</li>
</ol>
<h3 id="如何避免笛卡尔积现象？"><a href="#如何避免笛卡尔积现象？" class="headerlink" title="如何避免笛卡尔积现象？"></a>如何避免笛卡尔积现象？</h3><p>若想要避免笛卡尔积现象，当然是加条件进行过滤。</p>
<p>那么避免了笛卡尔积现象，会减少记录的匹配次数吗？不会，匹配的次数还是两张表记录条数的乘积，只不过显示的是有效记录。</p>
<ol>
<li><p>找出每一个员工的部门名称，要求显示员工名和部门名称。<br>EMP表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">		e.ename, d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">		emp e, dept d</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">		d.deptno <span class="operator">=</span> e.deptno;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>以上SQL语句为SQL92的写法，以后不用。</p>
</blockquote>
<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><h3 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h3><p>等值连接最大的特点是<strong>条件是等量关系</strong></p>
<ol>
<li><p>查询每个员工的部门名称，要求显示员工名和部门名。</p>
<h3 id="SQL92"><a href="#SQL92" class="headerlink" title="SQL92"></a>SQL92</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> E.ENAME, D.DNAME <span class="keyword">from</span> EMP E, DEPT D <span class="keyword">where</span> E.DEPTNO <span class="operator">=</span> D.DEPTNO; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ENAME  | DNAME      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="SQL99"><a href="#SQL99" class="headerlink" title="SQL99"></a>SQL99</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> E.ENAME, D.DNAME <span class="keyword">from</span> EMP E <span class="keyword">inner</span> <span class="keyword">join</span> DEPT D <span class="keyword">on</span> E.DEPTNO <span class="operator">=</span> D.DEPTNO;</span><br></pre></td></tr></table></figure>

<p><code>join</code>后面跟的是需要连接的表，<code>on</code>后面跟的是表的连接条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ENAME  | DNAME      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">	A</span><br><span class="line">inner join</span><br><span class="line">	B</span><br><span class="line">on</span><br><span class="line">	连接条件</span><br><span class="line">where</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>SQL99语法的结构更清晰一些，因为表的连接条件和后来的where条件分离了。</p>
<blockquote>
<p>inner join中的inner是可以缺省的。带着inner目的性是可读性高一些。</p>
</blockquote>
</li>
</ol>
<h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><p>非等值连接最大的特点是：连接条件中的关系是非等量关系。</p>
<ol>
<li><p>找出每个员工的工资等级，要求显示员工名、工资、工资等级。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> E.ENAME, E.SAL, S.GRADE <span class="keyword">from</span> EMP E <span class="keyword">inner</span> <span class="keyword">join</span> SALGRADE S <span class="keyword">on</span> E.SAL <span class="keyword">between</span> S.LOSAL <span class="keyword">and</span> S.HISAL;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+---------+-------+</span><br><span class="line">| ENAME  | SAL     | GRADE |</span><br><span class="line">+--------+---------+-------+</span><br><span class="line">| SMITH  |  800.00 |     1 |</span><br><span class="line">| ALLEN  | 1600.00 |     3 |</span><br><span class="line">| WARD   | 1250.00 |     2 |</span><br><span class="line">| JONES  | 2975.00 |     4 |</span><br><span class="line">| MARTIN | 1250.00 |     2 |</span><br><span class="line">| BLAKE  | 2850.00 |     4 |</span><br><span class="line">| CLARK  | 2450.00 |     4 |</span><br><span class="line">| SCOTT  | 3000.00 |     4 |</span><br><span class="line">| KING   | 5000.00 |     5 |</span><br><span class="line">| TURNER | 1500.00 |     3 |</span><br><span class="line">| ADAMS  | 1100.00 |     1 |</span><br><span class="line">| JAMES  |  950.00 |     1 |</span><br><span class="line">| FORD   | 3000.00 |     4 |</span><br><span class="line">| MILLER | 1300.00 |     2 |</span><br><span class="line">+--------+---------+-------+</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接最大的特点是：一张表看做两张表。自己连接自己。</p>
<ol>
<li><p>找出每个员工的上级领导，要求显示员工名和对应的领导名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<p>EMP A员工表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------+------+</span><br><span class="line">| EMPNO | ENAME  | MGR  |</span><br><span class="line">+-------+--------+------+</span><br><span class="line">|  7369 | SMITH  | 7902 |</span><br><span class="line">|  7499 | ALLEN  | 7698 |</span><br><span class="line">|  7521 | WARD   | 7698 |</span><br><span class="line">|  7566 | JONES  | 7839 |</span><br><span class="line">|  7654 | MARTIN | 7698 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7782 | CLARK  | 7839 |</span><br><span class="line">|  7788 | SCOTT  | 7566 |</span><br><span class="line">|  7839 | KING   | NULL |</span><br><span class="line">|  7844 | TURNER | 7698 |</span><br><span class="line">|  7876 | ADAMS  | 7788 |</span><br><span class="line">|  7900 | JAMES  | 7698 |</span><br><span class="line">|  7902 | FORD   | 7566 |</span><br><span class="line">|  7934 | MILLER | 7782 |</span><br><span class="line">+-------+--------+------+</span><br></pre></td></tr></table></figure>

<p>EMP B领导表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| EMPNO | ENAME  |</span><br><span class="line">+-------+--------+</span><br><span class="line">|  7566 | JONES  |</span><br><span class="line">|  7698 | BLAKE  |</span><br><span class="line">|  7782 | CLARK  |</span><br><span class="line">|  7788 | SCOTT  |</span><br><span class="line">|  7839 | KING   |</span><br><span class="line">|  7902 | FORD   |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.ENAME <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, B.ENAME <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span> <span class="keyword">from</span> EMP A <span class="keyword">inner</span> <span class="keyword">join</span> EMP B <span class="keyword">on</span> A.mgr <span class="operator">=</span> B.empno;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| 员工   | 领导    |</span><br><span class="line">+--------+--------+</span><br><span class="line">| SMITH  | FORD   |</span><br><span class="line">| ALLEN  | BLAKE  |</span><br><span class="line">| WARD   | BLAKE  |</span><br><span class="line">| JONES  | KING   |</span><br><span class="line">| MARTIN | BLAKE  |</span><br><span class="line">| BLAKE  | KING   |</span><br><span class="line">| CLARK  | KING   |</span><br><span class="line">| SCOTT  | JONES  |</span><br><span class="line">| TURNER | BLAKE  |</span><br><span class="line">| ADAMS  | SCOTT  |</span><br><span class="line">| JAMES  | BLAKE  |</span><br><span class="line">| FORD   | JONES  |</span><br><span class="line">| MILLER | CLARK  |</span><br><span class="line">+--------+--------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>什么是外连接，和内连接有什么区别？</p>
<ol>
<li><p>内连接<br>假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配的记录查询出来。AB两张表没有主副之分，两张表是平等的。</p>
</li>
<li><p>外连接<br>假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张是福表，主要查询主表中的数据，捎带查询副表。当副表中的数据没有和主表中的数据匹配上，附表自动模拟出NULL与之匹配。</p>
</li>
<li><p>外连接的分类</p>
<ul>
<li>左外连接（左连接）<br>左边那张表是主表</li>
<li>右外连接（右连接）<br>右边那张表是主表</li>
</ul>
<blockquote>
<p>左连接有右连接的写法，右连接也会有对应的左连接的写法。</p>
</blockquote>
</li>
</ol>
<p>外连接最重要的特点是：主表的数据无条件的全部查询出来。</p>
<ol>
<li><p>找出每个员工的上级领导（所有员工必须全部查询出来）</p>
<h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.ENAME <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>, B.ENAME <span class="keyword">as</span> <span class="string">&#x27;领导&#x27;</span> <span class="keyword">from</span> EMP A <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> EMP B <span class="keyword">on</span> A.MGR<span class="operator">=</span>B.EMPNO;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| 员工    | 领导   |</span><br><span class="line">+--------+--------+</span><br><span class="line">| SMITH  | FORD   |</span><br><span class="line">| ALLEN  | BLAKE  |</span><br><span class="line">| WARD   | BLAKE  |</span><br><span class="line">| JONES  | KING   |</span><br><span class="line">| MARTIN | BLAKE  |</span><br><span class="line">| BLAKE  | KING   |</span><br><span class="line">| CLARK  | KING   |</span><br><span class="line">| SCOTT  | JONES  |</span><br><span class="line">| KING   | NULL   |</span><br><span class="line">| TURNER | BLAKE  |</span><br><span class="line">| ADAMS  | SCOTT  |</span><br><span class="line">| JAMES  | BLAKE  |</span><br><span class="line">| FORD   | JONES  |</span><br><span class="line">| MILLER | CLARK  |</span><br><span class="line">+--------+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>left join</code>左外连接，A表是主表</p>
<h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.ENAME <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>, B.ENAME <span class="keyword">as</span> <span class="string">&#x27;领导&#x27;</span> <span class="keyword">from</span> EMP B <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> EMP A <span class="keyword">on</span> A.MGR<span class="operator">=</span>B.EMPNO;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| 员工    | 领导   |</span><br><span class="line">+--------+--------+</span><br><span class="line">| SMITH  | FORD   |</span><br><span class="line">| ALLEN  | BLAKE  |</span><br><span class="line">| WARD   | BLAKE  |</span><br><span class="line">| JONES  | KING   |</span><br><span class="line">| MARTIN | BLAKE  |</span><br><span class="line">| BLAKE  | KING   |</span><br><span class="line">| CLARK  | KING   |</span><br><span class="line">| SCOTT  | JONES  |</span><br><span class="line">| KING   | NULL   |</span><br><span class="line">| TURNER | BLAKE  |</span><br><span class="line">| ADAMS  | SCOTT  |</span><br><span class="line">| JAMES  | BLAKE  |</span><br><span class="line">| FORD   | JONES  |</span><br><span class="line">| MILLER | CLARK  |</span><br><span class="line">+--------+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>无论是left outer join还是right outer join，其中的outer是可以缺省的。</p>
</blockquote>
</li>
<li><p>找出哪个部门没有员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A.<span class="operator">*</span> <span class="keyword">from</span> DEPT A <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> EMP B <span class="keyword">on</span> A.DEPTNO<span class="operator">=</span>B.DEPTNO <span class="keyword">where</span> B.DEPTNO <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+--------+</span><br><span class="line">| DEPTNO | DNAME      | LOC    |</span><br><span class="line">+--------+------------+--------+</span><br><span class="line">|     40 | OPERATIONS | BOSTON |</span><br><span class="line">+--------+------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三张表连接查询"><a href="#三张表连接查询" class="headerlink" title="三张表连接查询"></a>三张表连接查询</h3><ol>
<li><p>找出每一个员工的部门名称以及工资等级。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, d.dname, s.grade <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+-------+</span><br><span class="line">| ename  | dname      | grade |</span><br><span class="line">+--------+------------+-------+</span><br><span class="line">| SMITH  | RESEARCH   |     1 |</span><br><span class="line">| ALLEN  | SALES      |     3 |</span><br><span class="line">| WARD   | SALES      |     2 |</span><br><span class="line">| JONES  | RESEARCH   |     4 |</span><br><span class="line">| MARTIN | SALES      |     2 |</span><br><span class="line">| BLAKE  | SALES      |     4 |</span><br><span class="line">| CLARK  | ACCOUNTING |     4 |</span><br><span class="line">| SCOTT  | RESEARCH   |     4 |</span><br><span class="line">| KING   | ACCOUNTING |     5 |</span><br><span class="line">| TURNER | SALES      |     3 |</span><br><span class="line">| ADAMS  | RESEARCH   |     1 |</span><br><span class="line">| JAMES  | SALES      |     1 |</span><br><span class="line">| FORD   | RESEARCH   |     4 |</span><br><span class="line">| MILLER | ACCOUNTING |     2 |</span><br><span class="line">+--------+------------+-------+</span><br></pre></td></tr></table></figure>


</li>
<li><p>找出每一个员工的部门名称、工资等级、以及上级领导。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导&#x27;</span>, d.dname, s.grade <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> e.mgr<span class="operator">=</span>b.empno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------+------------+-------+</span><br><span class="line">| ename  | 领导   | dname      | grade |</span><br><span class="line">+--------+--------+------------+-------+</span><br><span class="line">| SMITH  | FORD   | RESEARCH   |     1 |</span><br><span class="line">| ALLEN  | BLAKE  | SALES      |     3 |</span><br><span class="line">| WARD   | BLAKE  | SALES      |     2 |</span><br><span class="line">| JONES  | KING   | RESEARCH   |     4 |</span><br><span class="line">| MARTIN | BLAKE  | SALES      |     2 |</span><br><span class="line">| BLAKE  | KING   | SALES      |     4 |</span><br><span class="line">| CLARK  | KING   | ACCOUNTING |     4 |</span><br><span class="line">| SCOTT  | JONES  | RESEARCH   |     4 |</span><br><span class="line">| KING   | NULL   | ACCOUNTING |     5 |</span><br><span class="line">| TURNER | BLAKE  | SALES      |     3 |</span><br><span class="line">| ADAMS  | SCOTT  | RESEARCH   |     1 |</span><br><span class="line">| JAMES  | BLAKE  | SALES      |     1 |</span><br><span class="line">| FORD   | JONES  | RESEARCH   |     4 |</span><br><span class="line">| MILLER | CLARK  | ACCOUNTING |     2 |</span><br><span class="line">+--------+--------+------------+-------+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="什么是子查询？"><a href="#什么是子查询？" class="headerlink" title="什么是子查询？"></a>什么是子查询？</h2><p>什么是子查询？子查询都可以出现在哪里？</p>
<ul>
<li><p>什么是子查询？<br>select语句当中嵌套select语句，被嵌套的select语句是子查询。</p>
</li>
<li><p>子查询可以出现在哪里？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	...(<span class="keyword">select</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	...(<span class="keyword">select</span>)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	...(<span class="keyword">select</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="在where语句中使用子查询"><a href="#在where语句中使用子查询" class="headerlink" title="在where语句中使用子查询"></a>在where语句中使用子查询</h2><ol>
<li><p>找出高于平均工资的员工信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |</span><br><span class="line">|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |</span><br><span class="line">|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |</span><br><span class="line">|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |</span><br><span class="line">|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |</span><br><span class="line">|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出每个部门的平均薪资等级。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.dname, s.grade, (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno<span class="operator">=</span>d.deptno ) <span class="keyword">as</span> avgsal <span class="keyword">from</span> dept d </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno<span class="operator">=</span>d.deptno ) <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+-------+-------------+</span><br><span class="line">| dname      | grade | avgsal      |</span><br><span class="line">+------------+-------+-------------+</span><br><span class="line">| ACCOUNTING |     4 | 2916.666667 |</span><br><span class="line">| RESEARCH   |     4 | 2175.000000 |</span><br><span class="line">| SALES      |     3 | 1566.666667 |</span><br><span class="line">| OPERATIONS |  NULL |        NULL |</span><br><span class="line">+------------+-------+-------------+</span><br></pre></td></tr></table></figure>



<p>以上代码是我写的，下面的是教程里的(我做了些小变动)，对比之后惨不忍睹</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.dname, t.avgsal, s.grade <span class="keyword">from</span> </span><br><span class="line">	(<span class="keyword">select</span> deptno, <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> hisal;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+-------------+-------+</span><br><span class="line">| dname      | avgsal      | grade |</span><br><span class="line">+------------+-------------+-------+</span><br><span class="line">| RESEARCH   | 2175.000000 |     4 |</span><br><span class="line">| SALES      | 1566.666667 |     3 |</span><br><span class="line">| ACCOUNTING | 2916.666667 |     4 |</span><br><span class="line">+------------+-------------+-------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出每个部门薪资等级的平均等级。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e1.deptno, <span class="built_in">avg</span>(s.GRADE) <span class="keyword">from</span> emp e1 <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e1.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal <span class="keyword">group</span> <span class="keyword">by</span> e1.deptno;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------------+</span><br><span class="line">| deptno | avg(s.GRADE) |</span><br><span class="line">+--------+--------------+</span><br><span class="line">|     20 |       2.8000 |</span><br><span class="line">|     30 |       2.5000 |</span><br><span class="line">|     10 |       3.6667 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="在select后面嵌套子查询"><a href="#在select后面嵌套子查询" class="headerlink" title="在select后面嵌套子查询"></a>在select后面嵌套子查询</h2><ol>
<li><p>找出每个员工所在的部门名称，要求显示员工名和部门名。</p>
<ul>
<li><p>找出员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e1.ename <span class="keyword">from</span> emp e1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.dname <span class="keyword">from</span> dept d;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示员工名和部门名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	e1.ename,</span><br><span class="line">	(<span class="keyword">select</span> d.dname <span class="keyword">from</span> dept d <span class="keyword">where</span> d.deptno <span class="operator">=</span> e1.deptno) <span class="keyword">as</span> dname</span><br><span class="line"><span class="keyword">from</span> emp e1;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="union的用法"><a href="#union的用法" class="headerlink" title="union的用法"></a>union的用法</h1><p>union可以将查询结果相加，在进行相加时两条语句的查询结果列数必须一样。</p>
<ol>
<li><p>找出工作岗位是SALESMAN和MANAGER的员工。</p>
<p>第一种</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span>(<span class="string">&#x27;SALESMAN&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>第三种使用union</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><p>limit是mysql特有的，其它数据库没有，不通用。limit取结果集中的部分数据</p>
<ul>
<li>语法机制：limit startIndex，length<br>startIndex表示起使位置,从0开始。<br>length表示取几个</li>
</ul>
<ol>
<li><p>取出工资前五名的员工。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |</span><br><span class="line">|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |</span><br><span class="line">|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |</span><br><span class="line">|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |</span><br><span class="line">|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果limit startIndex第一个数字没写，那么默认值就是0。limit是sql语句最后执行的一个环节。</p>
</blockquote>
</li>
<li><p>取出工资排名在第4到第9名的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">3</span>, <span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------+----------+------+------------+---------+--------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM   | DEPTNO |</span><br><span class="line">+-------+--------+----------+------+------------+---------+--------+--------+</span><br><span class="line">|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |   NULL |     20 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |   NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |   NULL |     10 |</span><br><span class="line">|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 | 300.00 |     30 |</span><br><span class="line">|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |   0.00 |     30 |</span><br><span class="line">|  7934 | MILLER | CLERK    | 7782 | 1982-01-23 | 1300.00 |   NULL |     10 |</span><br><span class="line">+-------+--------+----------+------+------------+---------+--------+--------+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><p>建表语句的语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">	字段名<span class="number">1</span> 数据类型，</span><br><span class="line">  字段名<span class="number">2</span> 数据类型，</span><br><span class="line">  字段名<span class="number">3</span> 数据类型，</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h2 id="关于MySQL当中常用字段的数据类型。"><a href="#关于MySQL当中常用字段的数据类型。" class="headerlink" title="关于MySQL当中常用字段的数据类型。"></a>关于MySQL当中常用字段的数据类型。</h2><p>常用的数据类型有：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整数型（java中的int）</td>
</tr>
<tr>
<td>bigint</td>
<td>长整形（java中的Long）</td>
</tr>
<tr>
<td>float</td>
<td>浮点型（java中的float、double）</td>
</tr>
<tr>
<td>char</td>
<td>定长字符串（String）</td>
</tr>
<tr>
<td>varchar</td>
<td>可变长字符串（StringBuffer&#x2F;StringBuilder）</td>
</tr>
<tr>
<td>data</td>
<td>日期类型（对应Java中的java.sql.Date类型）</td>
</tr>
<tr>
<td>BLOB</td>
<td>二进制大对象（存储图片、视频等流媒体信息）Binary Large Object（对应java中的Object）</td>
</tr>
<tr>
<td>CLOB</td>
<td>字符大对象（存储较大文本，比如：可以存储4G的字符串）Character Large Object（对应java中的Object）</td>
</tr>
</tbody></table>
<h3 id="char和varchar如何选择？"><a href="#char和varchar如何选择？" class="headerlink" title="char和varchar如何选择？"></a>char和varchar如何选择？</h3><p>在实际开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。</p>
<p>当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。</p>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><blockquote>
<p>表名在数据库当中一般建议以**t_<strong>或者</strong>tbl_**开始。</p>
</blockquote>
<p>创建学生表：</p>
<pre><code>学生信息有：
</code></pre>
<ul>
<li><p>学号<br>bigint</p>
</li>
<li><p>姓名<br>varchar</p>
</li>
<li><p>性别</p>
<p>char</p>
</li>
<li><p>班级编号</p>
<p>int</p>
</li>
<li><p>生日</p>
<p>char</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">	stuno <span class="type">bigint</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">  classno <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  birth <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br><span class="line">+--------------------------+</span><br><span class="line">| Tables_in_upyou_database |</span><br><span class="line">+--------------------------+</span><br><span class="line">| DEPT                     |</span><br><span class="line">| EMP                      |</span><br><span class="line">| SALGRADE                 |</span><br><span class="line">| t_student                |</span><br><span class="line">+--------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看刚刚建的表的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc t_student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type         | Null | Key | Default | Extra |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| stuno   | bigint       | YES  |     | NULL    |       |</span><br><span class="line">| name    | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| sex     | char(1)      | YES  |     | NULL    |       |</span><br><span class="line">| classno | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| birth   | char(10)     | YES  |     | NULL    |       |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure>



<h2 id="insert语句插入数据"><a href="#insert语句插入数据" class="headerlink" title="insert语句插入数据"></a>insert语句插入数据</h2><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>, 字段名<span class="number">3</span>) <span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>字段的数量和值的数量相同，并且数据类型要对应相同。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(stuno, name, sex, classno, birth) <span class="keyword">values</span>(<span class="number">020413</span>, <span class="string">&#x27;UpYou&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2002-04-13&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>若显示一行受影响表示操作成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>查询刚刚插入的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">| stuno | name  | sex  | classno | birth      |</span><br><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">| 20413 | UpYou | 男   | 2020414 | 2002-04-13 |</span><br><span class="line">+-------+-------+------+---------+------------+</span><br></pre></td></tr></table></figure>

<p>如果字段可以为空，并且你没有给该字段插入值时，会字段将NULL插入到该字段。(插入NULL说的并不准确，因为是不会给未指定的字段插入数据，查询的时候是将为<strong>空</strong>的数据显示为NULL)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name)<span class="keyword">values</span>(<span class="string">&#x27;UoYou&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">| stuno | name  | sex  | classno | birth      |</span><br><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">| 20413 | UpYou | 男   | 2020414 | 2002-04-13 |</span><br><span class="line">|  NULL | UoYou | NULL | NULL    | NULL       |</span><br><span class="line">+-------+-------+------+---------+------------+</span><br></pre></td></tr></table></figure>



<blockquote>
<p>当一条insert语句执行成功之后，表格当中必然会多一条记录。即使多的这一行记录当中某些字段是NULL，后期也没有办法再执行insert语句插入数据了，只能使用update进行更新。</p>
</blockquote>
<p>如果不指定插入的字段时，values中列的字段、顺序必须与表格结构一致(多一个不行，少一个不行)。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">020413</span>, <span class="string">&#x27;UpYou&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2002-04-13&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>一次插入多行数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">	t_student(stuno, name, sex, classno, birth) </span><br><span class="line"><span class="keyword">values</span> </span><br><span class="line">	(<span class="number">020413</span>, <span class="string">&#x27;UpYou一号&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2002-04-13&#x27;</span>),</span><br><span class="line">	(<span class="number">020413</span>, <span class="string">&#x27;UpYou二号&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2002-04-13&#x27;</span>),</span><br><span class="line">	(<span class="number">020413</span>, <span class="string">&#x27;UpYou三号&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2002-04-13&#x27;</span>);</span><br></pre></td></tr></table></figure>





<h3 id="表的复制以及批量插入"><a href="#表的复制以及批量插入" class="headerlink" title="表的复制以及批量插入"></a>表的复制以及批量插入</h3><h4 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h4><p>语法：<br>将查询结果当作表创建出来。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">as</span> DQL语句;</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 14 rows affected, 2 warnings (0.01 sec)</span><br><span class="line">Records: 14  Duplicates: 0  Warnings: 2</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp2;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><p>将查询结果批量插入到某张表中。</p>
<p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">as</span> DQL语句;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `emp2` (</span><br><span class="line">  `EMPNO` int NOT NULL,</span><br><span class="line">  `ENAME` varchar(10) DEFAULT NULL,</span><br><span class="line">  `JOB` varchar(9) DEFAULT NULL,</span><br><span class="line">  `MGR` int DEFAULT NULL,</span><br><span class="line">  `HIREDATE` date DEFAULT NULL,</span><br><span class="line">  `SAL` double(7,2) DEFAULT NULL,</span><br><span class="line">  `COMM` double(7,2) DEFAULT NULL,</span><br><span class="line">  `DEPTNO` int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`EMPNO`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 14 rows affected (0.00 sec)</span><br><span class="line">Records: 14  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp2 limit <span class="number">0</span>, <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------+----------+------+------------+---------+--------+--------+</span><br><span class="line">| EMPNO | ENAME | JOB      | MGR  | HIREDATE   | SAL     | COMM   | DEPTNO |</span><br><span class="line">+-------+-------+----------+------+------------+---------+--------+--------+</span><br><span class="line">|  7369 | SMITH | CLERK    | 7902 | 1980-12-17 |  800.00 |   NULL |     20 |</span><br><span class="line">|  7499 | ALLEN | SALESMAN | 7698 | 1981-02-20 | 1600.00 | 300.00 |     30 |</span><br><span class="line">+-------+-------+----------+------+------------+---------+--------+--------+</span><br></pre></td></tr></table></figure>







<h2 id="定义默认值"><a href="#定义默认值" class="headerlink" title="定义默认值"></a>定义默认值</h2><p>将<code>t_student</code>删掉，重新创建一张表，并且将sex字段默认值设为<code>男</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">	stuno <span class="type">bigint</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  classno <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  birth <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> t_student;</span><br></pre></td></tr></table></figure>

<p>此时Default栏就有了一个默认值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type         | Null | Key | Default | Extra |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| stuno   | bigint       | YES  |     | NULL    |       |</span><br><span class="line">| name    | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| sex     | char(1)      | YES  |     | 男      |       |</span><br><span class="line">| classno | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| birth   | char(10)     | YES  |     | NULL    |       |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure>

<p>再插入数据，不设置<code>sex</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(stuno, name, classno, birth) <span class="keyword">values</span>(<span class="number">020413</span>, <span class="string">&#x27;UpYou&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2002-04-13&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">| stuno | name  | sex  | classno | birth      |</span><br><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">| 20413 | UpYou | 男   | 2020414 | 2002-04-13 |</span><br><span class="line">+-------+-------+------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>再插入一条数据，设置<code>sex</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(stuno, name, sex, classno, birth) <span class="keyword">values</span>(<span class="number">020413</span>, <span class="string">&#x27;UpYou那并不存在的妹妹&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">2020414</span>, <span class="string">&#x27;2003-04-13&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+----------------------------+------+---------+------------+</span><br><span class="line">| stuno | name                       | sex  | classno | birth      |</span><br><span class="line">+-------+----------------------------+------+---------+------------+</span><br><span class="line">| 20413 | UpYou                      | 男   | 2020414 | 2002-04-13 |</span><br><span class="line">| 20413 | UpYou那并不存在的妹妹         | 女   | 2020414 | 2003-04-13 |</span><br><span class="line">+-------+----------------------------+------+---------+------------+</span><br></pre></td></tr></table></figure>





<h2 id="update-修改数据"><a href="#update-修改数据" class="headerlink" title="update 修改数据"></a>update 修改数据</h2><p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>， 字段名<span class="number">2</span><span class="operator">=</span>值<span class="number">2.</span>.. <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>没有条件整张表数据全部更新。</strong></p>
</blockquote>
<ol>
<li><p>将部门1o的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> dept1 <span class="keyword">set</span> DNAME<span class="operator">=</span><span class="string">&#x27;RENSHIBU&#x27;</span>, LOC<span class="operator">=</span><span class="string">&#x27;SHANGHAI&#x27;</span> <span class="keyword">where</span> deptno<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure>

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   +--------+------------+----------+</span><br><span class="line">   | DEPTNO | DNAME      | LOC      |</span><br><span class="line">   +--------+------------+----------+</span><br><span class="line">   |     10 | RENSHIBU   | SHANGHAI |</span><br><span class="line">   |     20 | RESEARCH   | DALLAS   |</span><br><span class="line">   |     30 | SALES      | CHICAGO  |</span><br><span class="line">   |     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">   4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果没<strong>where</strong>或者<strong>忘记</strong>给<strong>where</strong>。。。。。那就完蛋了，跑路吧！！！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> dept1 <span class="keyword">set</span> DNAME<span class="operator">=</span><span class="string">&#x27;RENSHIBU&#x27;</span>, LOC<span class="operator">=</span><span class="string">&#x27;SHANGHAI&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 4  Changed: 3  Warnings: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------+----------+</span><br><span class="line">| DEPTNO | DNAME    | LOC      |</span><br><span class="line">+--------+----------+----------+</span><br><span class="line">|     10 | RENSHIBU | SHANGHAI |</span><br><span class="line">|     20 | RENSHIBU | SHANGHAI |</span><br><span class="line">|     30 | RENSHIBU | SHANGHAI |</span><br><span class="line">|     40 | RENSHIBU | SHANGHAI |</span><br><span class="line">+--------+----------+----------+</span><br></pre></td></tr></table></figure>





<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>没有条件<strong>全部删除</strong>。</p>
</blockquote>
<ol>
<li><p>删除10部门数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | RENSHIBU   | SHANGHAI |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept1 <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+------------+---------+</span><br><span class="line">| DEPTNO | DNAME      | LOC     |</span><br><span class="line">+--------+------------+---------+</span><br><span class="line">|     20 | RESEARCH   | DALLAS  |</span><br><span class="line">|     30 | SALES      | CHICAGO |</span><br><span class="line">|     40 | OPERATIONS | BOSTON  |</span><br><span class="line">+--------+------------+---------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于delete删除数据较慢，所以删除全部数据的时候使用<code>truncate</code>删除大表。(重点)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table dept1;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>truncate是将表截断（就剩下表头），不可回滚。truncate删除之后不可回滚，所以必须确认该表数据是否真的删除。</p>
</blockquote>
<h2 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h2><p>约束，英语单词（Constraint）</p>
<h3 id="什么是约束？"><a href="#什么是约束？" class="headerlink" title="什么是约束？"></a>什么是约束？</h3><p>在创建表的时候，可以给表的字段添加约束，添加约束是为了保证数据的完整性、合法性、有效性。</p>
<p>常见的约束有：</p>
<ul>
<li><p>非空约束（not null）</p>
<p>约束的字段不能为NULL</p>
</li>
<li><p>唯一约束（unique）<br>约束的字段不能重复</p>
</li>
<li><p>主键约束（primary key，简称PK）<br>约束的字段既不能为NULL也不能重复</p>
</li>
<li><p>外键约束（foreign key，简称FK）</p>
</li>
<li><p>检查约束（check）<br>Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</p>
</li>
</ul>
<blockquote>
<p>增删改查术语：CRUD<br>Create Retrieve Update Delete</p>
</blockquote>
<h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">	id <span class="type">int</span> ,</span><br><span class="line">  user_name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| id        | int          | YES  |     | NULL    |       |</span><br><span class="line">| user_name | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| password  | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure>

<p><code>user_name</code>字段设置了非空约束，现在插入一条<code>user_name</code>为空的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id, password) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;123456789&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>插入异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Field &#x27;user_name&#x27; doesn&#x27;t have a default value</span><br></pre></td></tr></table></figure>



<h3 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h3><p>唯一约束修饰的字段具有唯一性，不能为空， 不能重复。但可以为NULL。</p>
<p>单个字段约束专业术语叫：列级约束</p>
<p>多个字段约束专业术语叫：表级约束</p>
<p>表级约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">  字段<span class="number">1</span>,</span><br><span class="line">  字段<span class="number">2</span>,</span><br><span class="line">  字段<span class="number">3</span>,</span><br><span class="line">  <span class="keyword">unique</span>(字段<span class="number">1</span>, 字段<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">  user_name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| id        | int          | YES  |     | NULL    |       |</span><br><span class="line">| user_name | varchar(255) | YES  | UNI | NULL    |       |</span><br><span class="line">| password  | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure>

<p>插入两条数据数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id, user_name, password) </span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">	(<span class="number">1</span>, <span class="string">&#x27;UpYou&#x27;</span>, <span class="string">&#x27;123&#x27;</span>),</span><br><span class="line">	(<span class="number">2</span>, <span class="string">&#x27;UpYou&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>出现异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;UpYou&#x27; for key &#x27;t_user.user_name&#x27;</span><br></pre></td></tr></table></figure>

<p>插入两条数据，让<code>user_name</code>为NULL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id, password) </span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">	(<span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>),</span><br><span class="line">	(<span class="number">2</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>插入成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+-----------+----------+</span><br><span class="line">| id   | user_name | password |</span><br><span class="line">+------+-----------+----------+</span><br><span class="line">|    1 | NULL      | 123      |</span><br><span class="line">|    2 | NULL      | 123456   |</span><br><span class="line">+------+-----------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一张表中如果有多个字段有唯一性约束（unique），那么意思是联合起来约束。</p>
</blockquote>
<h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>怎么给一张表添加主键约束？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">  user_name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| id        | int          | NO   | PRI | NULL    |       |</span><br><span class="line">| user_name | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| password  | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure>

<p>在表中插入一条数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;UpYou&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>再插入一条<code>id</code>为1的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;UpYou那个不存在的妹妹&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>错误，id重复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;t_user.PRIMARY&#x27;</span><br></pre></td></tr></table></figure>

<p>不插入id试试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(user_name, password) <span class="keyword">values</span>(<span class="string">&#x27;UpYou那个不存在的妹妹&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>错误，没有指定默认值，也就是说不能为NULL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1364 (HY000): Field &#x27;id&#x27; doesn&#x27;t have a default value</span><br></pre></td></tr></table></figure>



<h4 id="主键相关术语"><a href="#主键相关术语" class="headerlink" title="主键相关术语"></a>主键相关术语</h4><ul>
<li><p>主键约束</p>
<p>primary key</p>
</li>
<li><p>主键字段<br>id字段添加primary key之后，id叫做主键字段</p>
</li>
<li><p>主键值<br>id字段添加primary key之后，id的每一个值都是主键值。</p>
</li>
</ul>
<h4 id="主键有什么用？"><a href="#主键有什么用？" class="headerlink" title="主键有什么用？"></a>主键有什么用？</h4><ul>
<li>表的设计三范式中有要求，第一范式要求任何一张表都应该有主键。</li>
<li>主键的作用：主键值是这行记录在这张表中的唯一标识。（就像一个人的身份证号码一样）</li>
</ul>
<h4 id="主键的分类"><a href="#主键的分类" class="headerlink" title="主键的分类"></a>主键的分类</h4><p>工具主键字段的字段数量来划分：</p>
<ul>
<li><p>单一主键<br>比较常用的</p>
</li>
<li><p>复合主键</p>
<p>多个字段联合起来添加一个主键约束。复合主键不建议使用，因为复合主键违背三范式</p>
</li>
</ul>
<p>根据主键性质来划分：</p>
<ul>
<li>自然主键<br>主键值最好就是一个和业务没有任何关系的自然数</li>
<li>业务主键（不推荐用）<br>主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号做主键。</li>
</ul>
<blockquote>
<p>一张表的主键约束只能有一个</p>
</blockquote>
<h4 id="主键值自增"><a href="#主键值自增" class="headerlink" title="主键值自增"></a>主键值自增</h4><p><code>auto_increment</code>将<code>primary key</code>修饰的字段自动维护一个自增的数，从<code>1</code>开始以<code>1</code>递增。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  user_name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field     | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-----------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id        | int          | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| user_name | varchar(255) | YES  |     | NULL    |                |</span><br><span class="line">+-----------+--------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>现在插入一个值，但不设置<code>id</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(user_name) <span class="keyword">values</span> (<span class="string">&#x27;UpYou&#x27;</span>), (<span class="string">&#x27;UpYou那并不存在的妹妹&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------------------------+</span><br><span class="line">| id | user_name                     |</span><br><span class="line">+----+-------------------------------+</span><br><span class="line">|  1 | UpYou                         |</span><br><span class="line">|  2 | UpYou那并不存在的妹妹        		|</span><br><span class="line">+----+-------------------------------+</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Oracle当中也提供了一个自增机制，叫做：序列（sequence）</p>
</blockquote>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>关于外键约束的术语：</p>
<ul>
<li><p>外键约束：<br>foreign key</p>
</li>
<li><p>外键字段<br>添加有外键约束的字段</p>
</li>
<li><p>外键值<br>外键字段中的每一个值</p>
</li>
</ul>
<h4 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h4><ol>
<li><p>请设计数据库表，用来维护学生和班级的信息。</p>
<ol>
<li><p>一张表存储所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+-------------------------------+---------+------------------------------+</span><br><span class="line">| no(PK)   | name                          | classno | classname                    |</span><br><span class="line">+----------+-------------------------------+---------+------------------------------+</span><br><span class="line">|    1     | UpYou                         |     101 | 传说中的高中高三1班    		      |</span><br><span class="line">|    2     | UpYou那并不存在的妹妹     		    |     102 | 传说中的高中高三1班   		       |</span><br><span class="line">+----------+-------------------------------+---------+------------------------------+</span><br></pre></td></tr></table></figure>

<p>这种方式会导致数据冗余。不推荐</p>
</li>
<li><p>两张表（班级表和学生表）<br><code>t_class</code> 班级表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+------------------------------+</span><br><span class="line">| cno  | cname                        |</span><br><span class="line">+------+------------------------------+</span><br><span class="line">|  101 | 传说中的高中高三1班         	  |</span><br><span class="line">|  102 | 传说中的高中高三2班      		    |</span><br><span class="line">|  103 | 传说中的高中高三3班       	    |</span><br><span class="line">+------+------------------------------+</span><br></pre></td></tr></table></figure>

<p><code>t_student</code>学生表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+----------------------------------+</span><br><span class="line">| no   | name                             |</span><br><span class="line">+------+----------------------------------+</span><br><span class="line">|    1 | UpYou                            |</span><br><span class="line">|    2 | UpYou那并不存在的妹妹              |</span><br><span class="line">|    3 | UpYou那并不存在的二妹妹          		|</span><br><span class="line">+------+----------------------------------+</span><br></pre></td></tr></table></figure>

<p>以上两张表看不出他们之间的关系，而第一种方法可以很清晰的看出这个学生所在班级。</p>
<p>给<code>t_student</code>学生表添加一个字段<code>cno</code>并且给该字段添加外键约束<code>FK</code>，如果不给该字段添加外键约束，那么这个字段中的值可以随便填，如果加上外键约束就表示这个字段的值是某一张表中的某个主键值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+-----------------------------------------------------+------+---+</span><br><span class="line">| no   | name                                                | cno(FK)  |</span><br><span class="line">+------+-----------------------------------------------------+------+---+</span><br><span class="line">|    1 | UpYou                                               |    101   |</span><br><span class="line">|    2 | UpYou那并不存在的妹妹                                  |    101   |</span><br><span class="line">|    3 | UpYou那并不存在的二妹妹(不在同个班表示很生气)             |    103   |</span><br><span class="line">+------+-----------------------------------------------------+------+---+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果此时修改学生表中的第一条数据<code>cno</code>字段为110时，修改出错，因为<code>t_class</code>表中没有这个班级。<br><code>t_student</code>中的<code>cno</code>字段引用<code>t_class</code>表中的<code>cno</code>字段，此时<code>t_student</code>表叫做子表。<code>t_class</code>表叫做父表。</p>
</li>
</ol>
</li>
</ol>
<ul>
<li><p>删除数据的时候先删除子表再删除父表。</p>
</li>
<li><p>添加数据的时候，先添加父表再添加子表。</p>
</li>
<li><p>创建表的时候，先创建父表再创建子表。</p>
</li>
<li><p>删除表的时候先删除子表，再删除父表。</p>
</li>
</ul>
<p>将解决方案二中的表创建出来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class(</span><br><span class="line">	cno <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">	sno <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  sname <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  classno <span class="type">int</span>,</span><br><span class="line">  <span class="keyword">foreign</span> key(classno) <span class="keyword">references</span> t_class(cno)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>t_class</code>班级表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br><span class="line">| cno   | int          | NO   | PRI | NULL    |       |</span><br><span class="line">| cname | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">+-------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure>

<p><code>t_student</code> 学生表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| sno     | int          | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| sname   | varchar(255) | YES  |     | NULL    |                |</span><br><span class="line">| classno | int          | YES  | MUL | NULL    |                |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure>

<p>插入数据，应该先插入父表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_class <span class="keyword">values</span> </span><br><span class="line">(<span class="number">101</span>, <span class="string">&#x27;传说中的高中高三1班&#x27;</span>),</span><br><span class="line">(<span class="number">102</span>, <span class="string">&#x27;传说中的高中高三2班&#x27;</span>),</span><br><span class="line">(<span class="number">103</span>, <span class="string">&#x27;传说中的高中高三3班&#x27;</span>),</span><br><span class="line">(<span class="number">104</span>, <span class="string">&#x27;传说中的高中高三4班&#x27;</span>),</span><br><span class="line">(<span class="number">105</span>, <span class="string">&#x27;传说中的高中高三5班&#x27;</span>),</span><br><span class="line">(<span class="number">106</span>, <span class="string">&#x27;传说中的高中高三6班&#x27;</span>),</span><br><span class="line">(<span class="number">107</span>, <span class="string">&#x27;传说中的高中高三7班&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_class;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----+------------------------------+</span><br><span class="line">| cno | cname                        |</span><br><span class="line">+-----+------------------------------+</span><br><span class="line">| 101 | 传说中的高中高三1班             |</span><br><span class="line">| 102 | 传说中的高中高三2班             |</span><br><span class="line">| 103 | 传说中的高中高三3班             |</span><br><span class="line">| 104 | 传说中的高中高三4班             |</span><br><span class="line">| 105 | 传说中的高中高三5班             |</span><br><span class="line">| 106 | 传说中的高中高三6班             |</span><br><span class="line">| 107 | 传说中的高中高三7班             |</span><br><span class="line">+-----+------------------------------+</span><br></pre></td></tr></table></figure>

<p>再给子表插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(sname, classno) <span class="keyword">values</span> </span><br><span class="line">(<span class="string">&#x27;UpYou&#x27;</span>, <span class="number">102</span>),</span><br><span class="line">(<span class="string">&#x27;UpYou那并不存在的妹妹&#x27;</span>, <span class="number">102</span>),</span><br><span class="line">(<span class="string">&#x27;UpYou那并不存在的二妹妹（不在同个班表示很生气）&#x27;</span>, <span class="number">103</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----+--------------------------------------------------------+---------+</span><br><span class="line">| sno | sname                                                  | classno |</span><br><span class="line">+-----+--------------------------------------------------------+---------+</span><br><span class="line">|   1 | UpYou                                                  |     102 |</span><br><span class="line">|   2 | UpYou那并不存在的妹妹                              	      |     102 |</span><br><span class="line">|   3 | UpYou那并不存在的二妹妹（不在同个班表示很生气）               |     103 |</span><br><span class="line">+-----+--------------------------------------------------------+---------+</span><br></pre></td></tr></table></figure>

<p>此时如果添加一条不存在的班级</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(sname, classno) <span class="keyword">values</span> </span><br><span class="line">(<span class="string">&#x27;UpYou&#x27;</span>, <span class="number">1020</span>);</span><br></pre></td></tr></table></figure>

<p>出现错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`upyou_database`.`t_student`, CONSTRAINT `t_student_ibfk_1` FOREIGN KEY (`classno`) REFERENCES `t_class` (`cno`))</span><br></pre></td></tr></table></figure>

<p>新增一个外键为空的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(sname) <span class="keyword">values</span>(<span class="string">&#x27;UpYou那并不存在的三妹妹&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure>

<p>外键可以为空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----+-------------------------------------------------------+---------+</span><br><span class="line">| sno | sname                                                 | classno |</span><br><span class="line">+-----+-------------------------------------------------------+---------+</span><br><span class="line">|   1 | UpYou                                                 |     102 |</span><br><span class="line">|   2 | UpYou那并不存在的妹妹                                    |     102 |</span><br><span class="line">|   3 | UpYou那并不存在的二妹妹（不在同个班表示很生气）              |     103 |</span><br><span class="line">|   5 | UpYou那并不存在的三妹妹                                  |    NULL |</span><br><span class="line">+-----+-------------------------------------------------------+---------+</span><br></pre></td></tr></table></figure>



<blockquote>
<ul>
<li><p>外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？</p>
<p>被引用的字段不一定是主键，但至少具有 <code>unique</code> 约束。</p>
</li>
</ul>
</blockquote>
<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="什么是存储引擎"><a href="#什么是存储引擎" class="headerlink" title="什么是存储引擎"></a>什么是存储引擎</h2><p>储存引擎描述的是表的存储方式。在MySQL当中，不同的存储引擎会有不同的存储方式。存储引擎这个名字只有在mysql中存在。（Oracle中有对应的机制，但是不叫做存储引擎，Oracle中没有特殊的名字，就叫：表的存储方式）</p>
<p>MySQL支持很多存储引擎，每一种存储引擎都对应了一种不同的存储方式。每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。</p>
<h2 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h2><p>查看建表语句可以查看一张表使用的是怎样的存储引擎。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table emp;</span><br></pre></td></tr></table></figure>

<p><code>ENGINE=InnoDB</code> 指明了这张表用的是<code>InnoDB</code>存储引擎。下面这条代码才是一个完整的建表语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| emp   | CREATE TABLE emp (</span><br><span class="line">  ......</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |</span><br></pre></td></tr></table></figure>

<p>建表的时候可以指定存储引擎和字符集，如果创建表的时候没有指定存储引擎，默认使用的是<strong>InnoDB</strong>存储引擎，字符集默认采用的是<strong>utf8mb4</strong>（在我MacOS中是如此，我MySQL版本8.0+）</p>
<h2 id="常见的存储引擎"><a href="#常见的存储引擎" class="headerlink" title="常见的存储引擎"></a>常见的存储引擎</h2><p>MySQL8.0.22中支持的存储引擎</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">      Engine: ARCHIVE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Archive storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">      Engine: BLACKHOLE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: /dev/null storage engine (anything you write to it disappears)</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">      Engine: MRG_MYISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Collection of identical MyISAM tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">      Engine: FEDERATED</span><br><span class="line">     Support: NO</span><br><span class="line">     Comment: Federated MySQL storage engine</span><br><span class="line">Transactions: NULL</span><br><span class="line">          XA: NULL</span><br><span class="line">  Savepoints: NULL</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">      Engine: MyISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: MyISAM storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">      Engine: PERFORMANCE_SCHEMA</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Performance Schema</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">      Engine: InnoDB</span><br><span class="line">     Support: DEFAULT</span><br><span class="line">     Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line">Transactions: YES</span><br><span class="line">          XA: YES</span><br><span class="line">  Savepoints: YES</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">      Engine: MEMORY</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Hash based, stored in memory, useful for temporary tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">      Engine: CSV</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: CSV storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h3 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h3><ul>
<li>MyISAM存储引擎是MySQL最常用的引擎。但是这种引擎不是默认的。</li>
<li>MyISAM存储引擎不支持事务。</li>
<li>它管理的表具有以下特征：<ol>
<li>使用三个文件表示每张表<ul>
<li>格式文件 - 存储表结构的定义（mytable.frm）</li>
<li>数据文件 - 存储表行的内容（mytable.MYD）</li>
<li>索引文件 - 存储表上索引（mytable.MYI）</li>
</ul>
</li>
<li>灵活的 <strong>AUTO_INCREMENT</strong> 字段处理。</li>
<li>可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。</li>
</ol>
</li>
</ul>
<h3 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h3><ul>
<li>InnoDB存储引擎是MySQL的缺省引擎。</li>
<li>它管理的表具有下列主要特征：<ol>
<li>每个InnoDB表在数据库目录中以<code>.frm</code>格式文件表示</li>
<li>InnoDB表空间tablespace被用于存储表的内容，tablespace只是一个逻辑概念，他不是一个具体的文件</li>
<li>提供一组用来记录事务性活动的日志文件</li>
<li>用<strong>COMMIT（提交）</strong>、<strong>SAVEPOINT</strong>及<strong>ROLLBACK（回滚）</strong>支持事务处理</li>
<li>提供全ACID兼容</li>
<li>在MySQL服务器崩溃后提供自动恢复</li>
<li>多版本（MVCC）和行级锁定</li>
<li>支持外键及引用的完整性，包括级联删除和更新。</li>
</ol>
</li>
</ul>
<blockquote>
<p>支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。</p>
</blockquote>
<h3 id="MEMORY-存储引擎"><a href="#MEMORY-存储引擎" class="headerlink" title="MEMORY 存储引擎"></a>MEMORY 存储引擎</h3><ul>
<li>使用MEMORY存储引擎的表，其数据存在内存中，且行的长度固定，这两个特点使得MEMORY存储引擎非常快。</li>
<li>不支持事务且数据容易丢失，因为所有数据和索引都是存储在内存当中。查询速度最快。以前叫HEPA引擎。</li>
<li>在数据库目录内，每个表均以<code>.frm</code>格式的文件表示。</li>
<li>支持表级锁机制</li>
<li>不能存储BLOB字段和TEXT字段</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务英语单词：Transaction</p>
<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>一个事务是一个完整的业务逻辑单元，不可再分。<br>比如：银行账户转账，从A账户向B账户转账10000。需要执行两条update语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_act <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10000</span> <span class="keyword">where</span> actno <span class="operator">=</span> <span class="string">&#x27;act-001&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> t_act <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10000</span> <span class="keyword">where</span> actno <span class="operator">=</span> <span class="string">&#x27;act-002&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>以上两条DML语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。要想保证以上的两条DML语句同时成功或者同时失败，那么就需要使用数据库的“事务机制”。</p>
<blockquote>
<p>和事务相关的语句只有：DML语句。因为DML语句都是和数据库当中的“数据”相关的。事务的存在是为了保证数据的完整性、安全性。</p>
</blockquote>
<p>假设所有的业务都能用一条DML语句搞定，这种情况是不需要事务。但实际情况是一个“需求（事务）”需要多条DML语句共同联合完成。</p>
<h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>假设有一个业务，需要先执行一条insert，再执行update，最后执行一条delete，这个业务才算完成。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">开启事务机制(开始)：</span><br><span class="line"></span><br><span class="line">执行insert语句 -- &gt; insert...（这条DML语句执行成功之后，把执行记录到数据库的操作历史当中，并不会向文件中保存一条数据，不会真正的修改硬盘上的数据。）</span><br><span class="line"></span><br><span class="line">执行update语句 -- &gt; update...（记录历史操作，不会真正修改硬盘上的数据）</span><br><span class="line"></span><br><span class="line">执行delete语句 -- &gt; delete..（这个执行也是记录历史操作「记录到缓存」，不会修改硬盘上的数据）</span><br><span class="line"></span><br><span class="line">提交事务或回滚(结束)</span><br></pre></td></tr></table></figure>

<p>无论是回滚还是提交事务，都会将历史记录给抹除掉，区别在于提交事务后是将硬盘上的数据真正的修改。</p>
<h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><p>事务包括四大特性：ACID</p>
<ul>
<li><p>A<br>原子性：事务是最小的工作单元，不可再分。</p>
</li>
<li><p>C<br>一致性：事务必须保证多条DML语句同时成功或者同时失败</p>
</li>
<li><p>I<br>隔离性：事务A与事务B之间具有隔离。</p>
</li>
<li><p>D</p>
<p>持久性：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束。</p>
</li>
</ul>
<h3 id="事务之间的隔离性"><a href="#事务之间的隔离性" class="headerlink" title="事务之间的隔离性"></a>事务之间的隔离性</h3><p>事务隔离性存在隔离级别，理论上隔离级别包括4个：</p>
<ul>
<li><p>第一级别<br>读未提交（read uncommitted）：对方事务还未提交，我们当前事务可以读取到对方未提交的数据。读未提交存在脏读现象（Dirty Read）现象：表示读到了脏的数据「数据不稳定」。</p>
</li>
<li><p>第二级别<br>读已提交（read committed）：对方事务提交之后的数据我方可以读取到。读已提交存在的问题是：不可重复读。</p>
<p>这种隔离级别解决了脏读问题</p>
</li>
<li><p>第三级别<br>可重复读（repeatable read）：这种隔离级别解决了：不可重复读问题。<br>这种隔离级别存在的问题是：读取到的数据是幻象。</p>
</li>
<li><p>第四级别：<br>序列化读、串行化读，解决了所有问题，效率低，需要排队。</p>
</li>
</ul>
<blockquote>
<p>Oracle数据库默认的隔离级别是：读已提交。</p>
<p>MySQL数据库默认的隔离级别是：可重复读。</p>
</blockquote>
<h2 id="演示事务"><a href="#演示事务" class="headerlink" title="演示事务"></a>演示事务</h2><p>MySQL中默认情况下是自动提交的。（只要执行任意一条DML语句就提交一次。）</p>
<p>使用<code>start transaction </code>可关闭自动提交。</p>
<h3 id="准备表"><a href="#准备表" class="headerlink" title="准备表"></a><strong>准备表</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  user_name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field     | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-----------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id        | int          | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| user_name | varchar(255) | YES  |     | NULL    |                |</span><br><span class="line">+-----------+--------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure>



<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a><strong>演示</strong></h3><p>插入一条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;UpYou&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>事务回滚操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure>

<p>再查询回滚之后的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-----------+</span><br><span class="line">| id | user_name |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | UpYou     |</span><br><span class="line">+----+-----------+</span><br></pre></td></tr></table></figure>

<p>发现数据没有回滚，这说明了MySQL已经默认提交了事务。关闭自动提交机制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure>

<p>再插入一条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;uncommitted&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+</span><br><span class="line">| id | user_name   |</span><br><span class="line">+----+-------------+</span><br><span class="line">|  1 | UpYou       |</span><br><span class="line">|  2 | uncommitted |</span><br><span class="line">+----+-------------+</span><br></pre></td></tr></table></figure>

<p>回滚事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure>

<p>再查询回滚之后的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-----------+</span><br><span class="line">| id | user_name |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | UpYou     |</span><br><span class="line">+----+-----------+</span><br></pre></td></tr></table></figure>

<p>无论是rollback还是committed之后，事务无论如何都是结束了。此时需要重新开启事务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure>

<p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;UpYou那个并不存在的妹妹！&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------------------------------+</span><br><span class="line">| id | user_name                           |</span><br><span class="line">+----+-------------------------------------+</span><br><span class="line">|  1 | UpYou                               |</span><br><span class="line">|  3 | UpYou那个并不存在的妹妹！              |</span><br><span class="line">+----+-------------------------------------+</span><br></pre></td></tr></table></figure>

<p>提交事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure>

<p>再尝试回滚</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------------------------------+</span><br><span class="line">| id | user_name                           |</span><br><span class="line">+----+-------------------------------------+</span><br><span class="line">|  1 | UpYou                               |</span><br><span class="line">|  3 | UpYou那个并不存在的妹妹！           		|</span><br><span class="line">+----+-------------------------------------+</span><br></pre></td></tr></table></figure>







<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="什么是索引？有什么用？"><a href="#什么是索引？有什么用？" class="headerlink" title="什么是索引？有什么用？"></a>什么是索引？有什么用？</h2><p>索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。在数据库方面，查询一张表的时候，有两种检索方式：</p>
<ul>
<li>第一种是：全表扫描</li>
<li>第二种方式是<strong>根据索引检索（效率很高）</strong></li>
</ul>
<p>索引为什么可以提高检索效率呢？其实最根本的原理是缩小了扫描的范围。索引虽然可以提高索引效率，但是不能随意添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如：<br>表中的数据经常被修改，这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。</p>
<blockquote>
<p>添加索引是给某一个字段或者说某些字段添加索引。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>当ename字段上没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。</p>
<p>当ename字段上添加索引的时候，以上sql语句会根据索引扫描，快速定位。</p>
<h2 id="什么时候考虑给字段添加索引？"><a href="#什么时候考虑给字段添加索引？" class="headerlink" title="什么时候考虑给字段添加索引？"></a>什么时候考虑给字段添加索引？</h2><ul>
<li>当数据量庞大的时候。（根据客户需求，根据线上环境）</li>
<li>该字段很少的DML操作。</li>
<li>该字段经常出现在where子句中。（经常根据哪个字段查询）</li>
</ul>
<p><strong>主键和具有unique约束的字段自动会添加索引。根据主键查询效率较高。</strong></p>
<h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index 索引名 on 表名(字段名);</span><br></pre></td></tr></table></figure>



<p>使用<code>explain</code>关键字查看一条查询语句的执行计划。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from emp where sal = 5000;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | emp   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   14 |    10.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>结果中有个<code>type</code>字段，他的值是<code>ALL</code>这意味着它将全表扫描，<code>rows</code>是扫描次数。自己给薪资<code>sal</code>字段添加索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index EMP_SAL_INDEX on emp(sal);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from emp where sal = 5000;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key           | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | emp   | NULL       | ref  | EMP_SAL_INDEX | EMP_SAL_INDEX | 9       | const |    1 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span><br></pre></td></tr></table></figure>

<p>这次通过索引去检索时，检索的次数只检索了1次</p>
<h2 id="删除索引兑现"><a href="#删除索引兑现" class="headerlink" title="删除索引兑现"></a>删除索引兑现</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure>

<p>删除刚刚创建的索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop index EMP_SAL_INDEX on emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from emp where sal = 5000;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | emp   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   14 |    10.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure>



<h2 id="索引实现原理"><a href="#索引实现原理" class="headerlink" title="索引实现原理"></a>索引实现原理</h2><p>索引底层采用的数据结构是：B + Tree;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>当ename字段上没有索引的时候，会进行全表扫描，效率较低。给ename字段添加索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index EMP_SAL_INDEX on emp(ename);</span><br></pre></td></tr></table></figure>

<p>以上sql语句执行的时候，会在内存或者硬盘文件当中生成一个索引，到底是在硬盘还是内存，得看你存储引擎。底层索引进行了排序、分区，索引会携带数据在表中的“物理地址”，最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位到表中的数据，效率是最高的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>以上sql语句会通过索引转换为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> 物理地址 <span class="operator">=</span> <span class="number">0x3</span>;</span><br></pre></td></tr></table></figure>



<h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><ol>
<li>单一索引<br>给单个字段添加索引</li>
<li>复合索引<br>给多个字段联合起来添加1个索引</li>
<li>主键索引<br>主键上会自动添加索引</li>
<li>唯一索引<br>有unique约束的字段上会自动添加索引。</li>
</ol>
<h2 id="索引什么时候失效？"><a href="#索引什么时候失效？" class="headerlink" title="索引什么时候失效？"></a>索引什么时候失效？</h2><p>当遇到以下sql语句的时候，sql语句不会走索引</p>
<p>因为索引是通过第一个字母在字典中查找，而以下sql根本不知道第一个字母是什么。无法定位。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%A%&#x27;</span>;</span><br></pre></td></tr></table></figure>







<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h2><p>视图就是：站在不同的角度去看数据。（同一张表的数据，通过不同的角度去看待）。</p>
<h2 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view 视图名 as DQL语句。</span><br></pre></td></tr></table></figure>




<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view myview as select empno, enmae from emp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有DQL语句才能以视图对象的方式创建。</p>
</blockquote>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view 视图名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view myview;</span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作原表），可以对视图进行CRUD操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| empno | ename  |</span><br><span class="line">+-------+--------+</span><br><span class="line">|  7369 | SMITH  |</span><br><span class="line">|  7499 | ALLEN  |</span><br><span class="line">|  7521 | WARD   |</span><br><span class="line">|  7566 | JONES  |</span><br><span class="line">...</span><br><span class="line">+-------+--------+</span><br><span class="line">14 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<hr>
<p>拷贝一个备用表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE EMP_BAK AS SELECT * FROM EMP;</span><br></pre></td></tr></table></figure>

<p>创建这个表的视图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIEW EMP_BAK_VIEW AS SELECT * FROM EMP_BAK;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME, EMPNO <span class="keyword">FROM</span> EMP_BAK_VIEW;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| ENAME  | EMPNO |</span><br><span class="line">+--------+-------+</span><br><span class="line">| SMITH  |  7369 |</span><br><span class="line">| ALLEN  |  7499 |</span><br><span class="line">| WARD   |  7521 |</span><br><span class="line">| BLAKE  |  7698 |</span><br><span class="line">...</span><br><span class="line">+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>更新视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> EMP_BAK_VIEW <span class="keyword">SET</span> ENAME <span class="operator">=</span> <span class="string">&#x27;UpYou&#x27;</span> <span class="keyword">WHERE</span> EMPNO <span class="operator">=</span> <span class="number">7369</span>;</span><br></pre></td></tr></table></figure>

<p>查看视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME, EMPNO <span class="keyword">FROM</span> EMP_BAK_VIEW;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| ENAME  | EMPNO |</span><br><span class="line">+--------+-------+</span><br><span class="line">| UpYou  |  7369 |</span><br><span class="line">| ALLEN  |  7499 |</span><br><span class="line">| WARD   |  7521 |</span><br><span class="line">| BLAKE  |  7698 |</span><br><span class="line">...</span><br><span class="line">+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>以上操作都是对视图进行修改，并没有对原表进行修改，查询一下原表的数据是否受到影响</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME, DEPTNO <span class="keyword">FROM</span> EMP_BAK;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| ENAME  | DEPTNO |</span><br><span class="line">+--------+--------+</span><br><span class="line">| UpYou  |     20 |</span><br><span class="line">| ALLEN  |     30 |</span><br><span class="line">| WARD   |     30 |</span><br><span class="line">...</span><br><span class="line">+--------+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h2 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h2><p>视图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供视图，程序员只对视图CRUD。</p>
<h1 id="DBA命令"><a href="#DBA命令" class="headerlink" title="DBA命令"></a>DBA命令</h1><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><p>在dos命令窗口中执行</p>
<p>导出整个数据库语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump 数据库名<span class="operator">&gt;</span>输出路劲 <span class="operator">-</span>uroot <span class="operator">-</span>p数据库密码</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump upyou_database <span class="operator">&gt;</span>  <span class="operator">/</span>Users<span class="operator">/</span>yct<span class="operator">/</span>Desktop<span class="operator">/</span>upyou_database_bak.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456;</span><br></pre></td></tr></table></figure>



<p>导出指定表语法格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump 数据库名 表名&gt;路径 -uroot -p数据库密码</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump upyou_database emp &gt;  /Users/yct/Desktop/upyou_database_bak.sql -uroot -p123456;</span><br></pre></td></tr></table></figure>



<h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>若想要导入数据，那么你的数据库必须存在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database upyou_database;</span><br></pre></td></tr></table></figure>

<p>使用这个数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use upyou_database;</span><br></pre></td></tr></table></figure>

<p>导入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /Users/yct/Desktop/upyou_database_bak.sql;</span><br></pre></td></tr></table></figure>





<h1 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h1><h2 id="什么是设计范式"><a href="#什么是设计范式" class="headerlink" title="什么是设计范式"></a>什么是设计范式</h2><p>设计表的依据。按照这个三范式设计的表不会出现数据冗余。</p>
<h2 id="三范式都是哪些？"><a href="#三范式都是哪些？" class="headerlink" title="三范式都是哪些？"></a>三范式都是哪些？</h2><ol>
<li><p>第一范式</p>
<p>任何一张表都应该有主键，并且每一个字段原子性不可再分。</p>
</li>
<li><p>第二范式</p>
<p>第二范式建立在第一范式的基础之上，所有非主键字段必须完全依赖主键，不能产生部分依赖。（多对多三张表一个关系两个外键）</p>
</li>
<li><p>第三范式<br>建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖。（一对多，两张表，多的表加外键）</p>
</li>
</ol>
<blockquote>
<p>实际开发中，以满足业务需求为主，有时会拿冗余换执行速度。</p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>React使用代理跨域后后端无法接收Session问题</title>
    <url>/2022/01/02/React%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F%E5%90%8E%E5%90%8E%E7%AB%AF%E6%97%A0%E6%B3%95%E6%8E%A5%E6%94%B6Session%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>将一个 MVC 项目重构为一个前后端分离项目，前端使用了 react + axios + vite…。</p>
<p>在前后端分离项目中，通常都会使用代理来解决跨域问题，vite 需要在 vite.config.js 文件中配置代理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="comment">// 代理配置</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 请求前缀</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/server_war_exploded&#x27;</span>,</span><br><span class="line">        <span class="comment">// 开启跨域</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 正式请求时将前缀替换为空字符</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>配置了代理之后请求能过去了，但后端保存在 Session 中的用户信息无法拿到。检查发现请求头中并没有携带 Cookie，这是因为 axios  在跨域请求中是默认不提供凭据信息，也就是在跨域请求中不携带 cookie、HTTP认证及客户端SSL证明等。需要在 axios 中手动开启：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>开启之后再次请求后检查请求头…嗯…好像携带 Cookie 进行请求了，但后端还是无法获取 Session，再检查发现这个 Cookie 的作用范围不对，<code>Path</code> 是 <code>/server_war_exploded</code>。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">set-cookie</span><span class="punctuation">: </span>JSESSIONID=DD2CCA381F1EA1AAEEE912E3DCDC5A43; Path=/server_war_exploded; HttpOnly</span><br></pre></td></tr></table></figure>

<p>将代理中请求的前缀改为 <code>/server_war_exploded</code> 再次发送请求就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="comment">// 代理配置</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/server_war_exploded&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/server_war_exploded&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/server_war_exploded/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这是因为没改之前你请求的时候地址<strong>看着</strong>是 <code>http://localhost:3000/api/login</code> ， 而 Cookie 作用于 <code>/server_war_exploded</code> 所以你的请求无权访问 Cookie。修改之后请求地址<strong>看着</strong>就是  <code>http://localhost:3000/server_war_exploded/login</code> 。</p>
<p>下面是请求使用代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> onFinish = <span class="function">(<span class="params">values: &#123;[index: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/server_war_exploded/login&#x27;</span>, &#123;&#125;, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;__method__&#x27;</span>: <span class="string">&#x27;doLogin&#x27;</span>,</span><br><span class="line">      ...values</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;data&#125; = response;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<hr>
<p>后端使用 Session 保存用户登录信息，那么后端是如何确定当前会话对应的是哪一个 Session 你知道吗？</p>
<p>在每一次请求中，其实浏览器都会默认携带一个 Cookie <code>JSESSIONID</code> ，这个 Cookie 记录了一大串乱七八糟的字符串，后端就是通过这个字符串来确定一个会话的 Session 对象的。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 缓存</title>
    <url>/2022/01/04/Redis-%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>为了系统性能的提升，一般会将部分数据加入缓存中，加速访问。而 db 承担数据落盘工作。</p>
<p> 哪些数据适合放入缓存？</p>
<ul>
<li>即时性、数据一致性要求不高的</li>
<li>访问量大而且更新频率不高的数据（读多，写少）</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112301501739.png" alt="请求流程"></p>
<h1 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h1><p>在 SpringBoot 工程中引入 Redis 场景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在配置文件中配置 Redis，Redis 的属性配置都在 <code>org.springframework.boot.autoconfigure.data.redis.RedisProperties</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置 redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.34</span><span class="number">.128</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>StringRedisTemplate</code> 操作 redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;Redis 测试&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@DisplayName(&quot;redis 操作简单值&quot;)</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">opsForValueTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 操作简单值</span></span><br><span class="line">    ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    ops.set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world_&quot;</span> + UUID.randomUUID());</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> ops.get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    log.info(hello); <span class="comment">// world_9f7fb10f-23fa-424d-a6e6-2de794852fed</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><ul>
<li>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库，但是数据库也无此记录，我们没有将这次的查询 null 写入缓存，这将导致这个不存在的数据每次请求都要去存储层查询，失去了缓存的意义。</li>
<li>该问题存在极大风险，如果利用不存在的数据进行攻击，数据库瞬时压力增大，最终导致崩溃</li>
<li>可以将一个null结果缓存，并加入短暂的过期时间。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJson</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 从缓存中获取数据</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">catalogJson</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catalogJson&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!StringUtils.hasText(catalogJson)) &#123;</span><br><span class="line">    <span class="comment">// 从数据库中获取数据</span></span><br><span class="line">    Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFormDb = getCatalogJsonFormDB();</span><br><span class="line">    <span class="comment">// 解决缓存穿透</span></span><br><span class="line">    <span class="keyword">if</span> (catalogJsonFormDb == <span class="literal">null</span> || catalogJsonFormDb.isEmpty()) &#123;</span><br><span class="line">      redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, <span class="string">&quot;&#123;&#125;&quot;</span>, <span class="number">30000</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(catalogJsonFormDb);</span><br><span class="line">      redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, jsonString);</span><br><span class="line">      <span class="keyword">return</span> catalogJsonFormDb;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将缓存的数据转为对象返回</span></span><br><span class="line">  <span class="keyword">return</span> JSON.parseObject(catalogJson, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catalog2Vo&gt;&gt;&gt;()&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><ul>
<li>缓存雪崩是指在我们设置缓存时 key 采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到 DB，DB 瞬时压力过重导致崩溃。</li>
<li>在原有的实效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，很难引发集体失效的事件</li>
</ul>
<h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><ul>
<li>对一些设置了过期时间的 key，如果这些 key 可能会在某些时间点被超高并发访问，那么这就是一种非常 “热点” 的数据。</li>
<li>如果这个 key 在大量请求同时进来前正好失效，那么所有对这个 key 的数据查询都落到 DB，这被称为缓存击穿</li>
<li>如果要解决这个问题，那么可以加锁，大量并发只让一个去查，其他人等着，查到后释放锁，其他人获取到锁，先查缓存就会有数据，不用去db。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * getCatalogJsonLock 锁对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">getCatalogJsonLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="title function_">getCatalogJson</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 从缓存中获取数据</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">catalogJson</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catalogJson&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!StringUtils.hasText(catalogJson)) &#123;</span><br><span class="line">    <span class="comment">// 防止击穿</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getCatalogJsonLock) &#123;</span><br><span class="line">      <span class="comment">// 确认缓存数据</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">confirmCache</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catalogJson&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(confirmCache)) &#123;</span><br><span class="line">        <span class="comment">// 从数据库中获取数据</span></span><br><span class="line">        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; catalogJsonFormDb = getCatalogJsonFormDB();</span><br><span class="line">        <span class="comment">// 解决缓存穿透</span></span><br><span class="line">        <span class="keyword">if</span> (catalogJsonFormDb == <span class="literal">null</span> || catalogJsonFormDb.isEmpty()) &#123;</span><br><span class="line">          redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, <span class="string">&quot;&#123;&#125;&quot;</span>, <span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(catalogJsonFormDb);</span><br><span class="line">          redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, jsonString);</span><br><span class="line">          <span class="keyword">return</span> catalogJsonFormDb;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将缓存的数据转为对象返回</span></span><br><span class="line">  <span class="keyword">return</span> JSON.parseObject(catalogJson, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catalog2Vo&gt;&gt;&gt;() &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在分布式系统中，我们应该使用分布式锁，因为本地锁只能锁住当前进程</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112301707003.png" alt="分布式锁"></p>
<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>在发送 <code>set</code> 命令时携带 <code>NX</code> 选项可以进行占锁，如果拿不到锁则返回 <code>nil</code> 。</p>
<blockquote>
<p><code>SET KEY VAL NX EX</code> key 不存在的情况下才设置密钥</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line"><span class="comment">// 占用分布式锁 set EX NX</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> ops.setIfAbsent(<span class="string">&quot;product_catalog_lock&quot;</span>, <span class="string">&quot;lock val&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lock) &#123;</span><br><span class="line">  <span class="comment">// 抢到分布式锁</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 没抢到锁，使用自旋方式重试</span></span><br><span class="line">  Thread.sleep(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> getCatalogJsonWithRedisLock();<span class="comment">// 自旋代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>防止当前抢到锁的服务 “断水断电” 后导致死锁问题，我们应该给这个锁一个短暂的过期时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.expire(<span class="string">&quot;product_catalog_lock&quot;</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>为了防止程序在设置过期时间代码执行前 “断水断电”，我们需要的是抢占锁和设置过期时间这是一个原子操作。所以需要在抢锁时设置而不是另外设置过期时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> ops.setIfAbsent(<span class="string">&quot;product_catalog_lock&quot;</span>,<span class="string">&quot;lock val&quot;</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>当业务完成后释放分布式锁，其实就是把当前存在的 <code>KEY</code> 删了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.delete(<span class="string">&quot;product_catalog_lock&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但是这样还有一个问题，这个问题在官网就给出了解释和答案</p>
<blockquote>
<p><strong>注意:</strong> 下面这种设计模式并不推荐用来实现redis分布式锁。应该参考<a href="http://redis.io/topics/distlock">the Redlock algorithm</a>的实现，因为这个方法只是复杂一点，但是却能保证更好的使用效果。</p>
<p>命令 <code>SET resource-name anystring NX EX max-lock-time</code> 是一种用 Redis 来实现锁机制的简单方法。</p>
<p>如果上述命令返回<code>OK</code>，那么客户端就可以获得锁（如果上述命令返回Nil，那么客户端可以在一段时间之后重新尝试），并且可以通过<a href="http://www.redis.cn/commands/del.html">DEL</a>命令来释放锁。</p>
<p>客户端加锁之后，如果没有主动释放，会在过期时间之后自动释放。</p>
<p>可以通过如下优化使得上面的锁系统变得更加鲁棒：</p>
<ul>
<li>不要设置固定的字符串，而是设置为随机的大字符串，可以称为token。</li>
<li>通过脚步删除指定锁的key，而不是<a href="http://www.redis.cn/commands/del.html">DEL</a>命令。</li>
</ul>
<p>上述优化方法会避免下述场景：a客户端获得的锁（键key）已经由于过期时间到了被redis服务器删除，但是这个时候a客户端还去执行<a href="http://www.redis.cn/commands/del.html">DEL</a>命令。而b客户端已经在a设置的过期时间之后重新获取了这个同样key的锁，那么a执行<a href="http://www.redis.cn/commands/del.html">DEL</a>就会释放了b客户端加好的锁。</p>
<p>解锁脚本(Lua)的一个例子将类似于以下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>这个脚本执行方式如下：</p>
<p>EVAL …script… 1 resource-name token-value</p>
</blockquote>
<p>其实就是怕我们设置的过期时间短，而业务代码比预期的久，导致业务没完成锁就过期并被别的线程占用，当业务执行完后删除锁，把别人的锁给删了。</p>
<p>这种情况需要将锁保存的值设置为一个随机的大长字符串「token」，删除时判断当前锁是不是自己的，如果是再删。这判断和删除也需要是一个原子操作，因为 IO 操作是需要时间的。</p>
<p>在抢占锁时设置一个 UUID </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> ops.setIfAbsent(<span class="string">&quot;product_catalog_lock&quot;</span>, uuid, <span class="number">30</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>删除锁通过Lua脚步达到原子操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">luaScript</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(luaScript, Long.class);</span><br><span class="line">redisTemplate.execute(redisScript, Collections.singletonList(<span class="string">&quot;product_catalog_lock&quot;</span>), uuid);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>微服务</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson 配置附带官方关于锁的文档</title>
    <url>/2022/01/04/Redisson-%E9%85%8D%E7%BD%AE%E9%99%84%E5%B8%A6%E5%AE%98%E6%96%B9%E5%85%B3%E4%BA%8E%E9%94%81%E7%9A%84%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<blockquote>
<p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(<code>BitSet</code>, <code>Set</code>, <code>Multimap</code>, <code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code>, <code>BlockingDeque</code>, <code>Semaphore</code>, <code>Lock</code>, <code>AtomicLong</code>, <code>CountDownLatch</code>, <code>Publish / Subscribe</code>, <code>Bloom filter</code>, <code>Remote service</code>, <code>Spring cache</code>, <code>Executor service</code>, <code>Live Object service</code>, <code>Scheduler service</code>) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>
</blockquote>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>引入 Redisson 原生依赖。该依赖提供了分布式锁、分布式对象等功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用程序化配置的方式注册一个 <code>RedissonClient</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个用于操作 Redisson 的RedissonClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.redisson.api.RedissonClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2022/1/4 16:13</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redisson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="comment">// 单节点模式</span></span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.226.128:6379&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一个是否可用就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;redisson 是否加载成功&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">loadRedisson</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">assert</span> redissonClient != <span class="literal">null</span> : <span class="string">&quot;Redisson 加载失败！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想自己配置，也可以直接使用他官方提供的 spring-boot-starter，只不过这只能在 springboot 项目中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="8-分布式锁和同步器"><a href="#8-分布式锁和同步器" class="headerlink" title="8. 分布式锁和同步器"></a>8. 分布式锁和同步器</h1><p>这是官方的文档，地址: <a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8">传送门</a></p>
<h3 id="8-1-可重入锁（Reentrant-Lock）"><a href="#8-1-可重入锁（Reentrant-Lock）" class="headerlink" title="8.1. 可重入锁（Reentrant Lock）"></a>8.1. 可重入锁（Reentrant Lock）</h3><p>基于Redis的Redisson分布式可重入锁<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLock.html"><code>RLock</code></a> Java对象实现了<code>java.util.concurrent.locks.Lock</code>接口。同时还提供了<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockAsync.html">异步（Async）</a>、<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockReactive.html">反射式（Reactive）</a>和<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockRx.html">RxJava2标准</a>的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">lock.lock();</span><br></pre></td></tr></table></figure>

<p>大家都知道，如果负责储存这个分布式锁的Redisson节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#lockwatchdogtimeout%E7%9B%91%E6%8E%A7%E9%94%81%E7%9A%84%E7%9C%8B%E9%97%A8%E7%8B%97%E8%B6%85%E6%97%B6%E5%8D%95%E4%BD%8D%E6%AF%AB%E7%A7%92">Config.lockWatchdogTimeout</a>来另行指定。</p>
<p>另外Redisson还通过加锁的方法提供了<code>leaseTime</code>的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加锁以后10秒钟自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (res) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Redisson同时还为分布式锁提供了异步执行的相关方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">lock.lockAsync();</span><br><span class="line">lock.lockAsync(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">Future&lt;Boolean&gt; res = lock.tryLockAsync(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p><code>RLock</code>对象完全符合Java的Lock规范。也就是说只有拥有锁的进程才能解锁，其他进程解锁则会抛出<code>IllegalMonitorStateException</code>错误。但是如果遇到需要其他进程也能解锁的情况，请使用<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#86-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore">分布式信号量<code>Semaphore</code></a> 对象.</p>
<h3 id="8-2-公平锁（Fair-Lock）"><a href="#8-2-公平锁（Fair-Lock）" class="headerlink" title="8.2. 公平锁（Fair Lock）"></a>8.2. 公平锁（Fair Lock）</h3><p>基于Redis的Redisson分布式可重入公平锁也是实现了<code>java.util.concurrent.locks.Lock</code>接口的一种<code>RLock</code>对象。同时还提供了<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockAsync.html">异步（Async）</a>、<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockReactive.html">反射式（Reactive）</a>和<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockRx.html">RxJava2标准</a>的接口。它保证了当多个Redisson客户端线程同时请求加锁时，优先分配给先发出请求的线程。所有请求线程会在一个队列中排队，当某个线程出现宕机时，Redisson会等待5秒后继续下一个线程，也就是说如果前面有5个线程都处于等待状态，那么后面的线程会等待至少25秒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> redisson.getFairLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">fairLock.lock();</span><br></pre></td></tr></table></figure>

<p>大家都知道，如果负责储存这个分布式锁的Redis节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#lockwatchdogtimeout%E7%9B%91%E6%8E%A7%E9%94%81%E7%9A%84%E7%9C%8B%E9%97%A8%E7%8B%97%E8%B6%85%E6%97%B6%E5%8D%95%E4%BD%8D%E6%AF%AB%E7%A7%92">Config.lockWatchdogTimeout</a>来另行指定。</p>
<p>另外Redisson还通过加锁的方法提供了<code>leaseTime</code>的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10秒钟以后自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">fairLock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> fairLock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">...</span><br><span class="line">fairLock.unlock();</span><br></pre></td></tr></table></figure>

<p>Redisson同时还为分布式可重入公平锁提供了异步执行的相关方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> redisson.getFairLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">fairLock.lockAsync();</span><br><span class="line">fairLock.lockAsync(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">Future&lt;Boolean&gt; res = fairLock.tryLockAsync(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<h3 id="8-3-联锁（MultiLock）"><a href="#8-3-联锁（MultiLock）" class="headerlink" title="8.3. 联锁（MultiLock）"></a>8.3. 联锁（MultiLock）</h3><p>基于Redis的Redisson分布式联锁<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/RedissonMultiLock.html"><code>RedissonMultiLock</code></a>对象可以将多个<code>RLock</code>对象关联为一个联锁，每个<code>RLock</code>对象实例可以来自于不同的Redisson实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonInstance1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonInstance2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonInstance3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonMultiLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonMultiLock</span>(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line"><span class="comment">// 所有的锁都上锁成功才算成功。</span></span><br><span class="line">lock.lock();</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure>

<p>大家都知道，如果负责储存某些分布式锁的某些Redis节点宕机以后，而且这些锁正好处于锁住的状态时，这些锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#lockwatchdogtimeout%E7%9B%91%E6%8E%A7%E9%94%81%E7%9A%84%E7%9C%8B%E9%97%A8%E7%8B%97%E8%B6%85%E6%97%B6%E5%8D%95%E4%BD%8D%E6%AF%AB%E7%A7%92">Config.lockWatchdogTimeout</a>来另行指定。</p>
<p>另外Redisson还通过加锁的方法提供了<code>leaseTime</code>的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RedissonMultiLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonMultiLock</span>(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 给lock1，lock2，lock3加锁，如果没有手动解开的话，10秒钟后将会自动解开</span></span><br><span class="line">lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为加锁等待100秒时间，并在加锁成功10秒钟后自动解开</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure>

<h3 id="8-4-红锁（RedLock）"><a href="#8-4-红锁（RedLock）" class="headerlink" title="8.4. 红锁（RedLock）"></a>8.4. 红锁（RedLock）</h3><p>基于Redis的Redisson红锁<code>RedissonRedLock</code>对象实现了<a href="http://redis.cn/topics/distlock.html">Redlock</a>介绍的加锁算法。该对象也可以用来将多个<code>RLock</code>对象关联为一个红锁，每个<code>RLock</code>对象实例可以来自于不同的Redisson实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonInstance1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonInstance2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonInstance3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonRedLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonRedLock</span>(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line"><span class="comment">// 红锁在大部分节点上加锁成功就算成功。</span></span><br><span class="line">lock.lock();</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure>

<p>大家都知道，如果负责储存某些分布式锁的某些Redis节点宕机以后，而且这些锁正好处于锁住的状态时，这些锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#lockwatchdogtimeout%E7%9B%91%E6%8E%A7%E9%94%81%E7%9A%84%E7%9C%8B%E9%97%A8%E7%8B%97%E8%B6%85%E6%97%B6%E5%8D%95%E4%BD%8D%E6%AF%AB%E7%A7%92">Config.lockWatchdogTimeout</a>来另行指定。</p>
<p>另外Redisson还通过加锁的方法提供了<code>leaseTime</code>的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RedissonRedLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonRedLock</span>(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 给lock1，lock2，lock3加锁，如果没有手动解开的话，10秒钟后将会自动解开</span></span><br><span class="line">lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为加锁等待100秒时间，并在加锁成功10秒钟后自动解开</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure>

<h3 id="8-5-读写锁（ReadWriteLock）"><a href="#8-5-读写锁（ReadWriteLock）" class="headerlink" title="8.5. 读写锁（ReadWriteLock）"></a>8.5. 读写锁（ReadWriteLock）</h3><p>基于Redis的Redisson分布式可重入读写锁<a href="http://static.javadoc.io/org.redisson/redisson/3.4.3/org/redisson/api/RReadWriteLock.html"><code>RReadWriteLock</code></a> Java对象实现了<code>java.util.concurrent.locks.ReadWriteLock</code>接口。其中读锁和写锁都继承了<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81reentrant-lock">RLock</a>接口。</p>
<p>分布式可重入读写锁允许同时有多个读锁和一个写锁处于加锁状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RReadWriteLock</span> <span class="variable">rwlock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;anyRWLock&quot;</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">rwlock.readLock().lock();</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rwlock.writeLock().lock();</span><br></pre></td></tr></table></figure>

<p>大家都知道，如果负责储存这个分布式锁的Redis节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#lockwatchdogtimeout%E7%9B%91%E6%8E%A7%E9%94%81%E7%9A%84%E7%9C%8B%E9%97%A8%E7%8B%97%E8%B6%85%E6%97%B6%E5%8D%95%E4%BD%8D%E6%AF%AB%E7%A7%92">Config.lockWatchdogTimeout</a>来另行指定。</p>
<p>另外Redisson还通过加锁的方法提供了<code>leaseTime</code>的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10秒钟以后自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">rwlock.readLock().lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rwlock.writeLock().lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> rwlock.readLock().tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> rwlock.writeLock().tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure>



<h3 id="8-6-信号量（Semaphore）"><a href="#8-6-信号量（Semaphore）" class="headerlink" title="8.6. 信号量（Semaphore）"></a>8.6. 信号量（Semaphore）</h3><p>基于Redis的Redisson的分布式信号量（<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphore.html">Semaphore</a>）Java对象<code>RSemaphore</code>采用了与<code>java.util.concurrent.Semaphore</code>相似的接口和用法。同时还提供了<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphoreAsync.html">异步（Async）</a>、<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphoreReactive.html">反射式（Reactive）</a>和<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphoreRx.html">RxJava2标准</a>的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;semaphore&quot;</span>);</span><br><span class="line">semaphore.acquire();</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">semaphore.acquireAsync();</span><br><span class="line">semaphore.acquire(<span class="number">23</span>);</span><br><span class="line">semaphore.tryAcquire();</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">semaphore.tryAcquireAsync();</span><br><span class="line">semaphore.tryAcquire(<span class="number">23</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">semaphore.tryAcquireAsync(<span class="number">23</span>, TimeUnit.SECONDS);</span><br><span class="line">semaphore.release(<span class="number">10</span>);</span><br><span class="line">semaphore.release();</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">semaphore.releaseAsync();</span><br></pre></td></tr></table></figure>

<h3 id="8-7-可过期性信号量（PermitExpirableSemaphore）"><a href="#8-7-可过期性信号量（PermitExpirableSemaphore）" class="headerlink" title="8.7. 可过期性信号量（PermitExpirableSemaphore）"></a>8.7. 可过期性信号量（PermitExpirableSemaphore）</h3><p>基于Redis的Redisson可过期性信号量（<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RPermitExpirableSemaphore.html">PermitExpirableSemaphore</a>）是在<code>RSemaphore</code>对象的基础上，为每个信号增加了一个过期时间。每个信号可以通过独立的ID来辨识，释放时只能通过提交这个ID才能释放。它提供了<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RPermitExpirableSemaphoreAsync.html">异步（Async）</a>、<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RPermitExpirableSemaphoreReactive.html">反射式（Reactive）</a>和<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RPermitExpirableSemaphoreRx.html">RxJava2标准</a>的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RPermitExpirableSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redisson.getPermitExpirableSemaphore(<span class="string">&quot;mySemaphore&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">permitId</span> <span class="operator">=</span> semaphore.acquire();</span><br><span class="line"><span class="comment">// 获取一个信号，有效期只有2秒钟。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">permitId</span> <span class="operator">=</span> semaphore.acquire(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">semaphore.release(permitId);</span><br></pre></td></tr></table></figure>

<h3 id="8-8-闭锁（CountDownLatch）"><a href="#8-8-闭锁（CountDownLatch）" class="headerlink" title="8.8. 闭锁（CountDownLatch）"></a>8.8. 闭锁（CountDownLatch）</h3><p>基于Redisson的Redisson分布式闭锁（<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RCountDownLatch.html">CountDownLatch</a>）Java对象<code>RCountDownLatch</code>采用了与<code>java.util.concurrent.CountDownLatch</code>相似的接口和用法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line">latch.trySetCount(<span class="number">1</span>);</span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他线程或其他JVM里</span></span><br><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line">latch.countDown();</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Redisson 没有死锁问题，并且锁可以自动续期，如果业务超时间长，Redisson 会自动给锁续上新的30s</p>
</blockquote>
<h1 id="Redisson-lock阻塞式等待原理"><a href="#Redisson-lock阻塞式等待原理" class="headerlink" title="Redisson lock阻塞式等待原理"></a>Redisson lock阻塞式等待原理</h1><p>在 Redisson 中，调用 <code>lock()</code> 方法，如果拿不到锁，那么当前这行代码会一直阻塞，直到获取到锁。原理很简单，就是在底层不断的循环拿锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">boolean</span> interruptibly)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  ... </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        ttl = <span class="built_in">this</span>.tryAcquire(-<span class="number">1L</span>, leaseTime, unit, threadId);</span><br><span class="line">        <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.unsubscribe(future, threadId);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Redisson-lock-看门狗原理"><a href="#Redisson-lock-看门狗原理" class="headerlink" title="Redisson lock 看门狗原理"></a>Redisson lock 看门狗原理</h1><p>如果设置了过期时间，<code>lock.lock(10, TimeUnit.SECONDS);</code> ，就直接给 Redis 发送脚本使用我们指定的超时时间进行占锁。如果没有指定过期时间，只要占锁成功，就会启动一个定时任务，这个定时任务用于定时给锁重新设置过期时间，这个新的时间就是看门狗的默认时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">  RFuture ttlRemainingFuture;</span><br><span class="line">  <span class="keyword">if</span> (leaseTime != -<span class="number">1L</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用我们自定的超时时间</span></span><br><span class="line">    ttlRemainingFuture = <span class="built_in">this</span>.tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ttlRemainingFuture = <span class="built_in">this</span>.tryLockInnerAsync(waitTime, <span class="built_in">this</span>.internalLockLeaseTime, TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                        Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们没有制定锁的过期时间 <code>lock.lock();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有指定时间走者</span></span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,</span><br><span class="line">                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他的默认时间使用的是看门狗的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">long</span> internalLockLeaseTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RedissonLock</span><span class="params">(CommandAsyncExecutor commandExecutor, String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.internalLockLeaseTime = commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监听占锁是否成功如果占锁成功了，并且为指定超时时间，那么就调用 <code>scheduleExpirationRenewal(threadId);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture;</span><br><span class="line">...</span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">                internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                scheduleExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要执行 <code>renewExpiration</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="type">ExpirationEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpirationEntry</span>();</span><br><span class="line">    <span class="type">ExpirationEntry</span> <span class="variable">oldEntry</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">    <span class="keyword">if</span> (oldEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">        oldEntry.addThreadId(threadId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry.addThreadId(threadId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            renewExpiration();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                cancelExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个方法里主要是一个定时任务, <code>newTimeout</code> 整个定时任务主要是用来执行 <code>renewExpirationAsync</code> 这个方法，这个方法主要用来设置过期时间。这个定时任务执行时间是看门狗的时间的三分之一，也就是默认10秒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renewExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ExpirationEntry</span> <span class="variable">ee</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="keyword">if</span> (ee == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">ExpirationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">            <span class="keyword">if</span> (ent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">threadId</span> <span class="operator">=</span> ent.getFirstThreadId();</span><br><span class="line">            <span class="keyword">if</span> (threadId == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">            future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getRawName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                    EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="comment">// reschedule itself</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cancelExpirationRenewal(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    </span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发送 Lua 脚本重制时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">renewExpirationAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">                        Collections.singletonList(getRawName()),</span><br><span class="line">                        internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><p>读写锁能保证能读到最新数据，修改期间，写锁是一个排他锁（互斥锁，独享锁）。读锁是一个共享锁。写锁没释放读锁就必须等待</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201061000373.gif" alt="互斥锁演示"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/write&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">  <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">  <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    rLock.lock();</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;test&quot;</span>, s);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/read&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">  <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    rLock.lock();</span><br><span class="line">    ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line">    <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> ops.get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>读 + 读：无锁，并发读，只会在redis中记录所有当前的读锁，他们都同时加锁成功。</p>
<p>写 + 读：等待写锁释放</p>
<p>写 + 写：阻塞</p>
<p>读 + 写：等待写锁释放</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet Cookie</title>
    <url>/2022/01/02/Servlet-Cookie/</url>
    <content><![CDATA[<ol>
<li><p>Cookie是什么？</p>
<ul>
<li>Cookie可以保存会话状态，但是这个会话状态是保留在客户端上。</li>
<li>只要Cookie清楚或者失效，这个会话状态就没有了。</li>
<li>Cookie是保存在客户端上的</li>
<li>Cookie可以保存在浏览器的缓存中，浏览器关闭，Cookie消失。Cookie也可以保存在客户端的硬盘文件中，浏览器关闭Cookie还在，除非Cookie失效。</li>
</ul>
</li>
<li><p>Cookie只有在javaweb中有吗？</p>
<ul>
<li>Cookie不止是在javaweb中存在，只要是web开发，只要是B&#x2F;S架构的系统，只要是基于HTTP协议，就有Cookie的存在。</li>
<li>Cookie这种机制是HTTP协议规定的。</li>
</ul>
</li>
<li><p>Cookie实现的功能常见的有：</p>
<ul>
<li>保留购物车商品的状态在客户端上</li>
<li>xxx天内免登录</li>
</ul>
</li>
<li><p>java中Cookie被当作类来处理，使用new运算符可以创建Cookie对象，而且Cookie有两部分组成，分别是Cookie的name和value，name和value都是字符串类型。</p>
</li>
<li><p>在java中怎么创建Cookie，Cookie是在javax.servlet.http包下的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">improt javax.servlet.http.Cookie;</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(name, value);</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器可以一次向浏览器发送多个Cookie</p>
</li>
<li><p>默认情况下，服务器发送Cookie给浏览器之后，浏览器将Cookie保存在缓存当中，只要不关闭浏览器，Cookie永远存在，并且有效。当浏览器关闭之后，缓存中的Cookie清除。</p>
</li>
<li><p>在浏览器客户端无论是硬盘文件中还是缓存中保存的Cookie，什么时候会再次发送给服务器呢？</p>
<ul>
<li>浏览器会不会提交发送这些Cookie给服务器，和请求路径有关系。</li>
<li>请求路径和Cookie是紧密关联的。</li>
<li>不同的请求路径会发送提交不同的Cookie</li>
</ul>
</li>
<li><p>默认情况下Cookie会和哪些路径绑定在一起？</p>
<ul>
<li>只会在请求和servlet同路径的情况下才会携带cookie中存储的数据，包含同级目录和下级目录。</li>
</ul>
</li>
<li><p>Cookie路径是可以指定的，可以通过java程序进行设置，保证Cookie和某个特定的路径绑定在一起。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setPath(<span class="string">&quot;/xxx&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认情况下，没有设置Cookie的有效时长，该Cookie被默认保存在浏览器的缓存当中，只要浏览器不关闭，Cookie就一直存在，如果浏览器关闭了，那么Cookie就会消失。这是会话级别的Cookie。我们可以通过设置Cookie的有效时长，以保证Cookie保存在硬盘文件当中，但是这个有效时长必须大于0。如果Cookie时长设置为0，则该cookie会被删除，如果Cookie被设置为负数，则不会被保存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">10000</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">  response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">  createAndSendCookieToBrowser(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createAndSendCookieToBrowser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">10000</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271104479.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记</title>
    <url>/2022/01/02/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="React入门"><a href="#React入门" class="headerlink" title="React入门"></a>React入门</h1><p>React由Facebook开发，它是一个用于构建用户界面&#x2F;视图的JavaScript库</p>
<ul>
<li>起初由Facebook的软件工程师Jordan Walke创建</li>
<li>于2011年部署于Facebook的newsfeed</li>
<li>随后在2012年部署于Instagram</li>
<li>2013年5月宣布开源。</li>
</ul>
<h3 id="为什么要学React？"><a href="#为什么要学React？" class="headerlink" title="为什么要学React？"></a>为什么要学React？</h3><ul>
<li><p>原生JavaScript操作DOM繁琐、效率低 (<strong>DOM-API操作UI</strong>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;...&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用JavaScript直接操作DOM，浏览器会进行大量的<strong>回流重绘</strong></p>
</li>
<li><p>原生JavaScript没有<strong>组件化&#x2F;模块化</strong>的编码方案，代码复用率低。</p>
</li>
</ul>
<h3 id="React的特点"><a href="#React的特点" class="headerlink" title="React的特点"></a>React的特点</h3><ul>
<li>采用<strong>组件化&#x2F;模块化模式</strong>、<strong>声明式编码</strong>，提高开发效率及组件复用率。</li>
<li>在React Native中可以是用React与法进行<strong>移动端开发</strong></li>
<li>使用<strong>虚拟DOM</strong>和优秀的<strong>Diffing</strong>算法，尽量减少与真实DOM的交互。</li>
</ul>
<h2 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react.development.js ===&gt;&gt; React核心库</span><br><span class="line">react-dom.development.js ===&gt;&gt; React扩展库，用于支持react操作dom</span><br><span class="line">prop-types.js ===&gt;&gt; 类型检查库</span><br><span class="line">babel.min.js ===&gt;&gt; 语法转换核心库，jsx 转 js </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react扩展库，用于react支持操作dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将es6转es5和jsx转js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意编写代码的script标签一定要指定类型</p>
<ul>
<li><code>type=&quot;text/babel&quot;</code> 告诉浏览器使用babel来翻译</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Hello-React"><a href="#Hello-React" class="headerlink" title="Hello React"></a>Hello React</h2><p>先准备好一个容器，React会将虚拟dom渲染到这个容器中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建一个虚拟dom，注意此处<code>&lt;h1&gt;...&lt;/h1&gt;</code>不需要使用引号引起来。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建虚拟dom</span></span><br><span class="line"><span class="keyword">const</span> vdom = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>将虚拟dom渲染到容器上</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染虚拟dom</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vdom, app);</span><br></pre></td></tr></table></figure>

<p>启动走你～～</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-08-17%2015.09.50.png" alt="HelloReact"></p>
<h2 id="创建虚拟DOM的第二种方式"><a href="#创建虚拟DOM的第二种方式" class="headerlink" title="创建虚拟DOM的第二种方式"></a>创建虚拟DOM的第二种方式</h2><p>在React中，除了使用jsx创建虚拟DOM外，还可以以使用js来进行创建。这需要使用到React核心库提供的<code>React.createElement</code>API进行创建。它有三个参数：</p>
<ul>
<li>第一个参数：标签名</li>
<li>第二个参数：标签属性</li>
<li>第N个参数：标签内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react扩展库，用于react支持操作dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> attr = &#123;<span class="attr">id</span>: <span class="string">&#x27;hello&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建虚拟dom</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vdom = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,attr , <span class="string">&#x27;Hello React!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 渲染虚拟dom</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vdom, app);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="虚拟DOM与真实DOM"><a href="#虚拟DOM与真实DOM" class="headerlink" title="虚拟DOM与真实DOM"></a>虚拟DOM与真实DOM</h2><ul>
<li>虚拟DOM它本质是一个Object类型的对象（一般对象）</li>
<li>虚拟DOM比较“轻”，而真实DOM比较“重”，因为虚拟DOM是React内部在用，用不上真实DOM上那么多的属性。</li>
<li>虚拟DOM最终会被React转化为真实DOM呈现在页面上。</li>
</ul>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul>
<li><p>全称叫JavaScript XMl</p>
</li>
<li><p>JSX是React定义的一种类似于XML的js拓展语法：JS + XML</p>
</li>
<li><p>本质是<code>React.createElement(component, props, ...children)</code>方法的语法糖。</p>
</li>
<li><p>JSX用于简化创建虚拟DOM</p>
<ul>
<li><p>写法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ele = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>他不是字符串，也不是HTML&#x2F;XML标签</p>
</li>
<li><p>它最终产生的就是一个JS对象</p>
</li>
</ul>
</li>
<li><p>标签名可以是HTML标签，也可以是其他标签。</p>
</li>
</ul>
<h3 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h3><ol>
<li><p>定义虚拟DOM的时候不要写引号</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vdom = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;clover&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签中要混入JS表达式时需要使用<code>&#123;&#125;</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> author = <span class="string">&quot;clover&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> body = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="comment">// 创建虚拟dom</span></span><br><span class="line"><span class="keyword">const</span> vdom = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#123;author&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;body&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>样式的类名指定不要使用<code>class</code>，需要使用<code>className</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .<span class="property">myStyle</span> &#123;</span><br><span class="line">    background-<span class="attr">color</span>: bisque;</span><br><span class="line">    font-<span class="attr">size</span>: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="keyword">const</span> vdom = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;myStyle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;clover&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>jsx中，若想使用内联样式，不能使用html中的语法<code>style=&quot;color: #900&quot;</code>，需要传递一个<strong>json</strong>到style属性中。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vdom = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;clover&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;#<span class="attr">900</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">20px</span>&#x27;&#125;&#125;&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚拟DOM必须只有一个根标签，不允许出现多个根标签，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const vdom = (</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;clover&quot;</span>&gt;</span>..<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;clover&quot;</span>&gt;</span>..<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>必须有闭合标签或自闭和</p>
</li>
<li><p>标签命名</p>
<ul>
<li>若是小写字母开头，则将该标签转为html中同名元素，若html中无该标签，则抛出异常。</li>
<li>若大写字母开头，React就去渲染对应的组件，若找不到该组件，则抛出错误。</li>
</ul>
</li>
</ol>
<h2 id="模块与组件"><a href="#模块与组件" class="headerlink" title="模块与组件"></a>模块与组件</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li>对外提供特定功能的js程序，一般就是一个js文件</li>
<li>随着业务逻辑的增加，代码越来越多且复杂，为了提高代码质量、复用性、运行效率和阅读性，所以将不同功能点抽取成一个个模块。</li>
<li>当应用的js都是以模块的方式来编写时，那么这个应用就可以被定义为一个模块化的应用。</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li>组件是用来实现局部功能效果的代码和资源的集合</li>
<li>随着界面功能越来越复杂，组件化的方式能够提高代码质量、复用性和阅读性。</li>
<li>当应用是以多组件的方式实现，那么这个应用就会被定义为一个组件化的应用。</li>
</ul>
<h1 id="React面向组件编程"><a href="#React面向组件编程" class="headerlink" title="React面向组件编程"></a>React面向组件编程</h1><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><p>定义函数式组件，函数名就是你的组件名，<strong>注意首字母一定要大写，并且函数必须有返回值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FnComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是函数式组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将这个组件渲染到页面上</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">FnComponent</span>/&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>

<p>在这里时注意，<code>FnComponent</code>组件中的this是一个undefined，因为在经过babel翻译之后开启了严格模式。</p>
<p>在React执行了<code>ReactDOM.render(&lt;FnComponent/&gt;, app);</code>之后发生了两件事：</p>
<ol>
<li>React解析组件标签，找到<code>FnComponent</code>组件</li>
<li>发现组件时使用函数定义的，随后调用该函数将返回的虚拟DOM转为真实DOM呈现在页面中。</li>
</ol>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>如果是函数式组件，React会将props收集为参数传递到这个函数中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Test</span> <span class="attr">title</span>=<span class="string">&quot;Hello World&quot;</span>/&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>



<h3 id="props类型限制"><a href="#props类型限制" class="headerlink" title="props类型限制"></a>props类型限制</h3><p>给组件挂载一个<code>propTypes</code>属性，指定要限制的属性类型</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若还需要指定该属性必传，可以使用<code>isRequired</code>进行限制</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="props默认值"><a href="#props默认值" class="headerlink" title="props默认值"></a>props默认值</h3><p>当一个属性不是必传时，可以指定这个属性的默认值，这需要在组件上挂载<code>defaultProps</code>属性</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h2><p>创建一个类，首字母要大写并且继承<code>React.Component</code>，在这个类中，必须有一个render方法，并且这个方法必须返回一个虚拟DOM。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ClassComponent</span>/&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>

<p>在React执行了<code>ReactDOM.render(&lt;ClassComponent/&gt;, app);</code>之后发生了两件事：</p>
<ol>
<li>React解析组件标签，找到<code>FnComponent</code>组件</li>
<li>发现组件时使用类定义的，随后new出来该类的实例。并通过该实例调用到原型上的render方法。</li>
<li>将render方法返回的虚拟DOM转为真实DOM呈现在页面中。</li>
</ol>
<p>在继承了<code>React.Component</code>之后，<code>ClassComponent</code>也将<code>React.Component</code>中的三大属性继承过来</p>
<ul>
<li><code>props</code></li>
<li><code>refs</code></li>
<li><code>state</code></li>
</ul>
<h3 id="组件三大核心组件"><a href="#组件三大核心组件" class="headerlink" title="组件三大核心组件"></a>组件三大核心组件</h3><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><ul>
<li>state是组件对象最重要的属性，值是一个一般对象(Object)</li>
<li>组件被称为“状态机”，通过更新组件的state来更新对应的页面显示(重新渲染组件)</li>
</ul>
<p>创建一个有状态组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很炎热！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>

<p>初始化组件状态，一个组件可能会有多个状态，所以state都会定义为一个Object</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让虚拟DOM里的<code>今天天气很炎热！</code>根据状态改变</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &quot;凉爽&quot;&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加一个点击事件，点击后修改<code>isHot</code>状态。在react中，状态不能直接修改，例如<code>this.state=xxx</code>，需要通过React内置的API<code>setState</code>进行修改，它修改的值会和原来的状态进行合并，形成一个新的状态对象。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="comment">// 为changeWeather指定this对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        今天天气很&#123;this.state.isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过setState修改状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span> &#125;);</span><br><span class="line">    <span class="comment">// this.state.isHot = !this.state.isHot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="props-1"><a href="#props-1" class="headerlink" title="props"></a>props</h4><ul>
<li>每个组件对象都会有props(properties)属性</li>
<li>组件标签的所有属性都保存在props中</li>
<li>props是只读的，不允许修改，若尝试修改，React会抛出异常并阻断后续执行。</li>
</ul>
<p>假如有这么一个需求：自定义一个用来显示一个人员信息的组件：</p>
<ol>
<li>姓名必须指定，且为字符串类型</li>
<li>性别为字符串类型，如果性别没有指定，默认为“男”</li>
<li>年龄必须指定，且为数字类型</li>
</ol>
<p>先定义一个类式组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄: <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将props属性的值赋值到对应<code>li</code>标签中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name = <span class="string">&quot;&quot;</span>, age = <span class="string">&#x27;&#x27;</span>, sex = <span class="string">&#x27;&#x27;</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>props的值是外界调用这个组件时传递过来的</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;clover&quot;</span> <span class="attr">age</span>=<span class="string">&quot;19&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> /&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-08-18%2016.04.51.png" alt="Props"></p>
<h5 id="propTypes"><a href="#propTypes" class="headerlink" title="propTypes"></a>propTypes</h5><p>正常情况下，props可以接收随意数据类型，这种情况下很容易会导致某些错误，例如以上例子的年龄，如果通过传递过来的这个“19”来进行<code>+1</code>，最终结果是<code>191</code>，因为传递过来的是一个字符串的19而不是数字19。</p>
<p>若需要对props中属性的类型做限制，React 16以后需要引入<code>prop-types.js</code>依赖，并且，需要在该组件上挂载一个<code>propTypes</code>属性，这是强制性的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>对你需要做类型限制的属性进行指定，当传过来的属性类型不是你规定的类型时，在浏览器控制台会有错误，但这并不影响运行。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要指定这个属性必须存在，可以使用<code>PropTypes.isRequired</code>进行指定</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果类型是一个函数，那么这么写：<code>PropTypes.func</code></p>
</blockquote>
<h5 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a>defaultProps</h5><p><code>如果性别没有指定，默认为“男”</code>，默认值不能使用propTypes来规定，他只是用于规定类型。需要在组件中挂载<code>defaultProps</code>属性，在这个属性中定义属性默认值。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="字符串类形式refs"><a href="#字符串类形式refs" class="headerlink" title="字符串类形式refs"></a>字符串类形式refs</h4><p>给组件内的标签定义ref属性来标识它，有点类似<code>id</code>属性，但他们又不同。</p>
<p>在原生js中，若想获取一个input的值，需要使用<code>document.getElementById(&#39;id&#39;).value</code>，在React中，可以使用<code>ref</code>直接获取到这个元素渲染后的<strong>真实</strong>DOM，看以下代码如何使用这个<code>refs</code></p>
<p>创建一个组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  buttonStyle = &#123;</span><br><span class="line">    <span class="attr">margin</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">showData</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;inp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;this.buttonStyle&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData.bind(this)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          点我提示Input数据</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当按钮点击的时候获取文本框的值并打印出来，<code>refs</code>保存的是一个<code>ref</code>集合，因为<code>ref</code>可以存在很多个。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">showData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// refs 是一个对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; inp &#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;</span><br><span class="line">  <span class="comment">// 拿到name=&quot;userName&quot;那个文本框的真实DOM</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DOM: &quot;</span>, inp);</span><br><span class="line">  <span class="comment">// 拿到文本框值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value: &quot;</span>, inp.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上属于字符串形式的ref，这种写法已经不被官方所推荐，后续更新可能随时会将其废弃。因为大量使用它会有效率问题。</p>
<blockquote>
<p>如果你之前使用过 React，你可能了解过之前的 API 中的 string 类型的 ref 属性，例如 <code>&quot;textInput&quot;</code>。你可以通过 <code>this.refs.textInput</code> 来访问 DOM 节点。我们不建议使用它，因为 string 类型的 refs 存在 <a href="https://github.com/facebook/react/pull/8333#issuecomment-271648615">一些问题</a>。它已过时并可能会在未来的版本被移除。</p>
</blockquote>
<h4 id="回调形式refs"><a href="#回调形式refs" class="headerlink" title="回调形式refs"></a>回调形式refs</h4><p>要定义回调形式的refs很简单，只需要将一个函数丢给<code>ref</code>属性即可，React会自动调用这个函数，并将当前节点的真实DOM通过回调的方式返回。这些操作在React将虚拟DOM转成真实DOM的时候触发。</p>
<p>可以将React返回的DOM保存在一个变量中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  ref=&#123;<span class="function">(<span class="params">currentNode</span>) =&gt;</span> (<span class="variable language_">this</span>.<span class="property">inpRef</span> = currentNode)&#125;</span><br><span class="line">  type=<span class="string">&quot;text&quot;</span></span><br><span class="line">  name=<span class="string">&quot;userName&quot;</span></span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure>

<p>获取文本框的值只需要通过保存的这个ref即可</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">inpRef</span>.<span class="property">value</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果 <code>ref</code> 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 <code>null</code>，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</p>
</blockquote>
<p><strong>class 的绑定函数</strong> 其实就是当前组件上挂载的方法，例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">saveInpRef = <span class="function">(<span class="params">currentNode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">inpRef</span> = currentNode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInpRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里注意，不能使用<code>this.saveInpRef.bind(this)</code>，因为这已经是一个新的方法了  。</p>
<h4 id="createRef-API"><a href="#createRef-API" class="headerlink" title="createRef API"></a>createRef API</h4><p>这种方式是 React 新推出的，也是 React 官方推荐使用的一种方式。</p>
<p><code>React.createRef()</code>  调用后可以返回一个容器，该容器可以存储被 <code>ref</code> 所标识的节点。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  inpRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.inpRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>this.inpRef.current</code> 来获取当前 DOM 。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">inpRef</span>.<span class="property">current</span>);</span><br></pre></td></tr></table></figure>





<h3 id="构造器与props"><a href="#构造器与props" class="headerlink" title="构造器与props"></a>构造器与props</h3><p>直接将官网摘过来吧~~~</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)</span><br></pre></td></tr></table></figure>

<p><strong>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。</strong></p>
<p>在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 <code>super(props)</code>。否则，<code>this.props</code> 在构造函数中可能会出现未定义的 bug。</p>
<p>通常，在 React 中，构造函数仅用于以下两种情况：</p>
<ul>
<li>通过给 <code>this.state</code> 赋值对象来初始化<a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html">内部 state</a>。</li>
<li>为<a href="https://zh-hans.reactjs.org/docs/handling-events.html">事件处理函数</a>绑定实例</li>
</ul>
<p>在 <code>constructor()</code> 函数中<strong>不要调用 <code>setState()</code> 方法</strong>。如果你的组件需要使用内部 state，请直接在构造函数中为 <strong><code>this.state</code> 赋值初始 state</strong>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="comment">// 不要在这里调用 this.setState()</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只能在构造函数中直接为 <code>this.state</code> 赋值。如需在其他方法中赋值，你应使用 <code>this.setState()</code> 替代。</p>
<p>要避免在构造函数中引入任何副作用或订阅。如遇到此场景，请将对应的操作放置在 <code>componentDidMount</code> 中。</p>
<blockquote>
<p>注意</p>
<p><strong>避免将 props 的值复制给 state！这是一个常见的错误：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(props);</span><br><span class="line"><span class="comment">// 不要这样做</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">color</span>: props.<span class="property">color</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如此做毫无必要（你可以直接使用 <code>this.props.color</code>），同时还产生了 bug（更新 prop 中的 <code>color</code> 时，并不会影响 state）。</p>
<p><strong>只有在你刻意忽略 prop 更新的情况下使用。</strong>此时，应将 prop 重命名为 <code>initialColor</code> 或 <code>defaultColor</code>。必要时，你可以<a href="https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key">修改它的 <code>key</code></a>，以强制“重置”其内部 state。</p>
<p>请参阅关于<a href="https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html">避免派生状态的博文</a>，以了解出现 state 依赖 props 的情况该如何处理。</p>
</blockquote>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul>
<li>通过 onXX 属性指定事件处理函数 (注意大小写) </li>
<li>React 使用的是自定义 (合成) 事件，而不是使用的原生 DOM 事件。这样做的目的是为了更好的兼容性，因为每个不同的浏览器事件可能都不一样。</li>
<li>React 中的事件是通过事件委托方式处理的 (委托给组件最外层的元素) ，使用事件委托是为了更高效的处理事件。</li>
<li>通过 <code>event.target</code> 可得到发生事件的 DOM 元素对象。不要过度使用 <code>ref</code></li>
</ul>
<h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><ul>
<li>受控组件</li>
<li>非受控组件</li>
</ul>
<p>需求：定义一个包含表单的组件，输入用户名密码后，点击登录提示输入信息。</p>
<h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><p>定义组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        用户名：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        密码：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用refs，用于获取这两个<code>input</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户名Input</span></span><br><span class="line">userNameRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密码Input</span></span><br><span class="line">userPassRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      用户名：</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.userNameRef&#125;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      密码：</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.userPassRef&#125;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>form</code>表单提交之后alert用户名和密码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> usrPass = <span class="variable language_">this</span>.<span class="property">userPassRef</span>.<span class="property">current</span>;</span><br><span class="line">  <span class="keyword">const</span> userName = <span class="variable language_">this</span>.<span class="property">userNameRef</span>.<span class="property">current</span>;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`用户名：<span class="subst">$&#123;userName.value&#125;</span>, 密码：<span class="subst">$&#123;usrPass.value&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;<span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>给 <code>input</code> 添加一个 <code>onChange</code> 事件去监听值改变，改变后将值赋值到某个变量中就行了。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">userPass</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`用户名：<span class="subst">$&#123;<span class="variable language_">this</span>.state.userName&#125;</span>, 密码：<span class="subst">$&#123;<span class="variable language_">this</span>.state.userPass&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置userName</span></span><br><span class="line">  <span class="title function_">setUserName</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> val = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">userName</span>: val&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置userPass</span></span><br><span class="line">  <span class="title function_">setUserPass</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> val = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">userPass</span>: val&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">action</span>=<span class="string">&quot;javascript: void 0;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit.bind(this)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        用户名：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.setUserName.bind(this)&#125;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.userName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        密码：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.setUserPass.bind(this)&#125;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.userPass&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>受控组件：受到了 <code>state</code> 的控制。相当于手动实现 Vue 中的双向绑定。</p>
</blockquote>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><ul>
<li>组件对象从创建到死亡他会经历特定阶段</li>
<li>React 组件对象包含一系列钩子函数（生命周期回调函数），在特定的时刻调用。</li>
<li>在定义组件时，在特定的生命周期回调函数中做特定的工作。</li>
<li>生命周期勾子函数和 reander 方法一样，只需要声明在那 React 就可以自己去调用它。</li>
</ul>
<blockquote>
<ul>
<li><code>componentWillMount</code></li>
<li><code>componentWillReceiveProps</code></li>
<li><code>componentWillUpdate</code></li>
</ul>
<p>这些生命周期方法经常被误解和滥用；此外，我们预计，在异步渲染中，它们潜在的误用问题可能更大。我们将在即将发布的版本中为这些生命周期添加 “UNSAFE_” 前缀。（这里的 “unsafe” 不是指安全性，而是表示使用这些生命周期的代码在 React 的未来版本中更有可能出现 bug，尤其是在启用异步渲染之后。）</p>
</blockquote>
<h3 id="生命周期流程图"><a href="#生命周期流程图" class="headerlink" title="生命周期流程图"></a>生命周期流程图</h3><p>这个图是比较老的 React 的生命周期</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%97%A7).png" alt="react生命周期(旧)"></p>
<p>这是 React@17 之后的生命周期流程图</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%96%B0).png" alt="react生命周期(新)"></p>
<h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><p><code>componentWillMount</code> 在组件将要挂载时被 React 调用。也就是render第一次执行前。</p>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><p><code>componentWillReceiveProps</code> 在父组件更新时触发。它可以接收一个参数，那就是父组件传过来的 <code>props</code> </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新的Props ========&gt;&gt;&gt; &quot;</span>, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p><code>shouldComponentUpdate</code> 在 <code>this.setState()</code> 调用或父时被 React 调用，它必须有一个 <code>boolean</code> 返回值，如果返回 <code>true</code> ，表示允许更新状态，否则不允许更新状态。它可以接一个参数，这个参数是当前被修改的 <code>state</code> </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否允许更改状态</span></span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">currentState</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h3><p>在组件将要更新时 <code>componentWillUpdate</code> 被 React 调用。</p>
<p>它可以接收3个参数，一个是 props，一个是 state，还有一个是 <code>getSnapshotBeforeUpdate</code> 勾子的返回值 snapshot。这两个参数分别是组件<strong>更新前</strong>的 props 、 state 和快照snapshot。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">oldProps, oldState, snapshot</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=======&gt;&gt;&gt; componentDidUpdate&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p><code>componentDidMount</code> 会在组件挂载在页面上或者说 <code>render</code> 被 React 调用完成时， React 调用 <code>componentDidMount</code> 勾子。</p>
<p>写一个例子：</p>
<ol>
<li>让指定文本做显示&#x2F;隐藏的渐变动画</li>
<li>从完全可见到彻底消失，耗时2s</li>
<li>点击 ‘kill’ 按钮从界面中卸载组件</li>
</ol>
<p>像这种需求可以在 <code>componentDidMount</code> 勾子中使用定时器。点击 “kill” 按钮后清楚这个定时器。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">kill</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 卸载组件</span></span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(app);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">h1Style</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">opacity</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">opacity</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期勾子：组件挂载到页面上时被 React 调用</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; opacity &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">      opacity -= <span class="number">0.1</span>;</span><br><span class="line">      <span class="keyword">if</span> (opacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        opacity = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; opacity &#125;);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;this.h1Style.call(this)&#125;</span>&gt;</span>学不会啊学不会！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.kill.bind(this)&#125;</span>&gt;</span>kill<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p><code>componentWillUnmount</code> 会在组件<strong>将要</strong>被卸载时被 React 调用。</p>
<p>像上面的例子，定时器也可以在组件卸载时被清除</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件将要卸载时被 React 调用</span></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h3><p><code>getSnapshotBeforeUpdate</code> 在 <code>render</code> 函数执行之后被 React 调用。</p>
<p>它可以接收两个参数，第一个参数是更新之前的 props ，第二个参数是更新之前的 state 。</p>
<p>使用栗子：</p>
<p>保持当前滚动条状态。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">time</span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newsStyle = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="string">&quot;30px&quot;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newsBox = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="string">&quot;400px&quot;</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;#900&quot;</span>,</span><br><span class="line">  <span class="attr">overflowY</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  newsBoxRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">  state = &#123; <span class="attr">newsArr</span>: [] &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addNews</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">newsBoxRef</span>.<span class="property">current</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, prevState, snapshot</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">newsBoxRef</span>.<span class="property">current</span>;</span><br><span class="line">    node.<span class="property">scrollTop</span> += (node.<span class="property">scrollHeight</span> - snapshot)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加新闻</span></span><br><span class="line">  <span class="title function_">addNews</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; newsArr &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">      <span class="keyword">const</span> news = <span class="string">`新闻 - <span class="subst">$&#123;newsArr.length + <span class="number">1</span>&#125;</span>`</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">newsArr</span>: [news, ...newsArr] &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleNews</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">newsArr</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">style</span>=<span class="string">&#123;newsStyle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;item&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;news&quot;</span> <span class="attr">style</span>=<span class="string">&#123;newsBox&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.newsBoxRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.handleNews.call(this)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>



<h2 id="Diffing算法"><a href="#Diffing算法" class="headerlink" title="Diffing算法"></a>Diffing算法</h2><ul>
<li>在 React 中遍历列表时，key 最好不要使用 <code>index</code> ，因为当前状态中的数据发生变化时， React 会根据 <strong>新数据</strong> 生成 <strong>新的虚拟 DOM</strong> ，随后 React 使用 diff 算法对 <strong>新虚拟DOM</strong> 与 <strong>旧虚拟 DOM</strong> 比较，比较规则如下<ul>
<li>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key<ol>
<li>若虚拟 DOM 中内容没变，直接使用之前的真实 DOM</li>
<li>若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</li>
</ol>
</li>
<li>虚拟 DOM 中未找到与新虚拟 DOM 相同的 key，根据数据创建新的真实 DOM，随后渲染到页面</li>
</ul>
</li>
<li>用 index 作为 key 可能会引发的问题<ol>
<li>若对数据进行逆序添加、逆序删除等破坏顺序操作，会产生没有必要的真实 DOM 更新，界面可能没问题，但这效率低。</li>
<li>如果结构中还包含输入类的 DOM，会产生错误 DOM 更新，界面显示有问题</li>
<li>注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</li>
</ol>
</li>
<li>在开发中最好使用每条数据唯一标识作为 key，比如id、手机号、身份证号、学号等唯一值。如果确定只是简单的展示数据，那么用 index 也是可以的。</li>
</ul>
<h1 id="React-脚手架"><a href="#React-脚手架" class="headerlink" title="React 脚手架"></a>React 脚手架</h1><p><a href="https://github.com/YouChuantong/react_demo_todo">一个简单的“待办”案例</a></p>
<ul>
<li>React 脚手架是一个用来快速创建一个基于 React 库的项目模板项目<ul>
<li>包含了所有需要的配置（语法检查、jsx编译、devServer…等）</li>
<li>下载好了所有相关的依赖</li>
<li>可以直接运行一个简单效果</li>
</ul>
</li>
<li>React 提供了一个用于创建 React 项目的脚手架：<strong>create-react-app</strong></li>
<li>项目的整体技术架构为：React + Webpack + es6 + eslint</li>
<li>使用脚手架开发的项目特点：模块化、组件化、工程化。</li>
</ul>
<h2 id="创建项目并启动"><a href="#创建项目并启动" class="headerlink" title="创建项目并启动"></a>创建项目并启动</h2><ul>
<li>全局安装 React 脚手架：<code>yarn global add create-react-app</code> </li>
<li>使用脚手架命令创建项目：<code>create-react-app hello-app</code></li>
<li>进入项目文件夹：<code>cd hello-app</code></li>
<li>启动项目：<code>yarn start</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules 「依赖包」</span><br><span class="line">├── README.md</span><br><span class="line">├── package.json  「npm配置文件」</span><br><span class="line">├── public 「静态资源文件夹」</span><br><span class="line">├── src	「源码文件夹」</span><br><span class="line">│   ├── index.js	「入口文件」</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure>



<h2 id="一个简单的Hello组件"><a href="#一个简单的Hello组件" class="headerlink" title="一个简单的Hello组件"></a>一个简单的Hello组件</h2><p>在 index.js 中引入 React 核心组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 React 核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 ReactDOM 核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>再创建一个 Hello 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Hello</span>;</span><br></pre></td></tr></table></figure>

<p>在 index.js 文件中将这个组件引入并将它挂载到容器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&quot;./Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, root);</span><br></pre></td></tr></table></figure>

<p>搞定。</p>
<h2 id="功能界面的组件化编码流程"><a href="#功能界面的组件化编码流程" class="headerlink" title="功能界面的组件化编码流程"></a>功能界面的组件化编码流程</h2><ul>
<li>拆分组件：拆分组件、抽取组件</li>
<li>实现静态组件：使用组件实现静态页面效果</li>
<li>实现动态组件<ul>
<li>动态显示初始化数据<ol>
<li>数据类型</li>
<li>数据名称</li>
<li>保存在哪个组件</li>
</ol>
</li>
<li>交互（从绑定事件监听开始）</li>
</ul>
</li>
</ul>
<h1 id="React-ajax"><a href="#React-ajax" class="headerlink" title="React ajax"></a>React ajax</h1><ul>
<li>React 本身只关注界面，并不包含发送 ajax 请求的代码</li>
<li>前端应用需要通过 ajax 请求与后台进行交互（json数据）</li>
<li>React 应用中需要继承第三方 ajax 库或自己封装</li>
<li>常用的 ajax 库<ul>
<li>jQuery 比较重，如果需要另外引入不建议使用</li>
<li>axios 轻量级 http 库，这也是市面上最常用的 http 库<ol>
<li>封装 XmlHttpRequest 对象的 ajax</li>
<li>支持 Promise</li>
<li>可以用在浏览器端和 NodeJS 服务端</li>
</ol>
</li>
</ul>
</li>
</ul>
<h1 id="React-路由"><a href="#React-路由" class="headerlink" title="React 路由"></a>React 路由</h1><p>下载：<code>yarn add react-router-dom</code></p>
<h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><ul>
<li>单页 Web 应用（Single page web application 简称 SPA）</li>
<li>整个应用只有一个完整的页面</li>
<li>修改页面中的<strong>链接</strong>不会刷新页面，只会做页面的<strong>局部刷新</strong></li>
<li>数据都需要通过 ajax 请求获取，并在前端异步展现</li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul>
<li>一个路由就是一个映射关系（key: value）</li>
<li>Key 为路径，value 可能是 function 或 component</li>
</ul>
<h3 id="路由分类"><a href="#路由分类" class="headerlink" title="路由分类"></a>路由分类</h3><ol>
<li>后端路由<ul>
<li>value 是 function，用来处理客户端提交的请求</li>
<li>注册路由： <code>router.get(path, function(req, res))</code></li>
<li>工作流程：当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据。</li>
</ul>
</li>
<li>前端路由<ul>
<li>浏览器端路由：value 是 component，用于展示页面内容</li>
<li>注册路由：<code>&lt;Route path=&quot;/test&quot; component=&#123;Test&#125; &gt;</code></li>
<li>工作流程：当浏览器的 path 变为 &#x2F;test 时，当前路由组件就会变为 Test 组件</li>
</ul>
</li>
</ol>
<h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><ul>
<li>react-router 是 React 的一个插件库</li>
<li>用于实现一个 SPA 应用</li>
</ul>
<h2 id="react-router-相关API"><a href="#react-router-相关API" class="headerlink" title="react-router 相关API"></a>react-router 相关API</h2><h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h3><ul>
<li><p><code>&lt;BrowserRouter&gt;</code> 路由器</p>
</li>
<li><p><code>&lt;HashRouter&gt;</code> 路由器</p>
</li>
<li><p><code>&lt;Route&gt;</code> 路由</p>
<ul>
<li><code>path</code> 路由地址</li>
<li><code>component</code> 组件</li>
<li><code>exact</code> 是否开启严格匹配，默认使用的是模糊匹配。严格匹配不要随便开启，有时候开启严格匹配会导致无法匹配多级路由。</li>
</ul>
</li>
<li><p><code>&lt;Redirect&gt;</code> 重定向。一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到 Redirect 指定的路由。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/home/&#123;id&#125;&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>&lt;Link&gt;</code> 切换路由链接，类似 html 中的 <code>&lt;a&gt;</code> 标签</p>
<ul>
<li><code>to</code> 要跳转的地址</li>
<li><code>children</code> 标签体内容：<code>&lt;a&gt;标签体内容&lt;/a&gt;</code></li>
</ul>
</li>
<li><p><code>&lt;NavLink&gt;</code> 用法与作用和 Link 一致</p>
<ul>
<li><code>activeClassName</code> 路径匹配时追加的 class 名称，默认追加 active</li>
</ul>
</li>
<li><p><code>Switch</code> 可以提高路由匹配效率，在不使用 <code>Switch</code> 的时候，可以匹配多个相同路径的路由，而 <code>Switch</code> 只要匹配到一个就不匹配了。</p>
<ul>
<li><p><code>children</code> 匹配规则</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<blockquote>
<p>路由需要包裹在路由器中</p>
</blockquote>
<h3 id="路由组件props"><a href="#路由组件props" class="headerlink" title="路由组件props"></a>路由组件props</h3><ul>
<li><code>history</code> 对象</li>
<li><code>match</code> 对象</li>
<li><code>withRouter</code> 函数</li>
</ul>
<h2 id="向路由组件传递params参数"><a href="#向路由组件传递params参数" class="headerlink" title="向路由组件传递params参数"></a>向路由组件传递params参数</h2><ul>
<li><p>通过 <code>:key</code> 的方式在路由中声明 params </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> component=&#123;<span class="title class_">MessageDetail</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 restful 风格的 url 触发这个路由</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=<span class="string">&quot;/home/message/detail/01/消息1&quot;</span>&gt;消息<span class="number">1</span>&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在路由组件 props 中默认有三个参数，其中有一个是 <code>match</code> ，params 参数就保存在里面。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="string">&quot;01&quot;</span><span class="punctuation">,</span> title<span class="punctuation">:</span> <span class="string">&quot;消息1&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="向路由组件传递search参数"><a href="#向路由组件传递search参数" class="headerlink" title="向路由组件传递search参数"></a>向路由组件传递search参数</h2><ul>
<li><p>正常注册路由</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;<span class="title class_">MessageDetail</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由链接（携带参数）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=<span class="string">&quot;/home/message/detail?id=01&amp;title=消息1&quot;</span>&gt;消息<span class="number">1</span>&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>search 参数被放在了 props 的 location 中，是以字符串 <code>?id=01&amp;title=消息1</code> 的形式存放，需要解析。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; search &#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>;</span><br><span class="line"><span class="comment">// 使用 querystring 库解析 search 参数</span></span><br><span class="line"><span class="keyword">const</span> parse = qs.<span class="title function_">parse</span>(search.<span class="title function_">slice</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="string">&quot;01&quot;</span><span class="punctuation">,</span> title<span class="punctuation">:</span> <span class="string">&quot;消息1&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="向路由组件传递state参数"><a href="#向路由组件传递state参数" class="headerlink" title="向路由组件传递state参数"></a>向路由组件传递state参数</h2><ul>
<li><p>正常注册路由</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;<span class="title class_">MessageDetail</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由链接，正常情况下 <code>Link</code> 的 <code>to</code> 是一个字符串，但是如果需要传递 state 属性，需要传递一个对象，这个对象包含 state。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span></span><br><span class="line">  to=&#123;&#123;</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&quot;/home/message/detail/01/消息1&quot;</span>,</span><br><span class="line">      <span class="attr">state</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;clover&quot;</span> &#125;,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">  消息<span class="number">1</span></span><br><span class="line">&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>state 参数被放在了 props 的 location 中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>name<span class="punctuation">:</span> <span class="string">&quot;clover&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="BrowserRouter与HashRouter区别"><a href="#BrowserRouter与HashRouter区别" class="headerlink" title="BrowserRouter与HashRouter区别"></a>BrowserRouter与HashRouter区别</h2><ul>
<li>底层原理不一样<ul>
<li>BrowserRouter 使用的是 H5 的 history API，不兼容 IE9 及以下版本。</li>
<li>HashRouter 使用的是 URL 的哈希值。</li>
</ul>
</li>
<li>URL 表现形式不一样<ul>
<li>BrowserRouter 的路径中没有 <code>#</code> ，例如：<code>localhost:3000/demo</code></li>
<li>HashRouter 的路径包含 <code>#</code> ，例如：<code>localhost:3000/#/demo</code></li>
</ul>
</li>
<li>刷新后对路由 state 参数的影响<ul>
<li>BrowserRouter 没有任何影响，因为 state 保存在 history 对象中。</li>
<li>HashRouter 刷新后会导致路由 state 参数的丢失</li>
</ul>
</li>
</ul>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><ul>
<li>Redux 是一个专门用于做<strong>状态管理</strong>的JS库</li>
<li>它可以用在 React、Angular、Vue 等项目中，但使用它的人基本都与 React 配合使用 </li>
<li>集中式管理 React 应用中多个组件<strong>共享</strong>的状态。</li>
</ul>
<h2 id="在什么情况下需要用-Redux"><a href="#在什么情况下需要用-Redux" class="headerlink" title="在什么情况下需要用 Redux"></a>在什么情况下需要用 Redux</h2><ul>
<li>某个组件的状态，需要让其他组件可以随时拿到的时候（共享）</li>
<li>一个组件需要改变另外一个组件的状态（通信）</li>
</ul>
<h2 id="Redux-原理图"><a href="#Redux-原理图" class="headerlink" title="Redux 原理图"></a>Redux 原理图</h2><p><img src="http://qiniu-note-image.ctong.top/note/images/redux%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="redux原理图"></p>
<h2 id="创建-Reducer"><a href="#创建-Reducer" class="headerlink" title="创建 Reducer"></a>创建 Reducer</h2><ul>
<li><p>reducer 本质是一个函数，它需要接收两个参数，分别是：之前的状态（preState），动作对象（action）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">preState, action</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> countReducer;</span><br></pre></td></tr></table></figure>
</li>
<li><p>reducer 有两个作用：初始化状态和加工状态</p>
</li>
<li><p>reducer 被第一次调用时，是 store 自动触发的，传递的 preState 是 undefined。</p>
</li>
<li><p>在 reducer 中，可以根据 action 传递过来的类型分别处理 state。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">preState, action</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, data &#125; = action;</span><br><span class="line">  <span class="keyword">const</span> method = strategy[type];</span><br><span class="line">  <span class="keyword">if</span> (method !== <span class="keyword">void</span> <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">method</span>(preState, data);</span><br><span class="line">  <span class="comment">// 如果没找到可能处于初始化状态</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strategy = &#123;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params">preState, data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; ...preState, ...data &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="创建Store"><a href="#创建Store" class="headerlink" title="创建Store"></a>创建Store</h2><ul>
<li><p>在 redux 目录下创建一个 store.js 文件</p>
</li>
<li><p>在这个文件中引入 redux 中的 createStore 函数，使用这个函数创建一个 reducer。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 redux</span></span><br><span class="line"><span class="comment">// createStore 转门用于创建 redux 中最为核心的 store 对象。</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>createStore 调用时需要传入一个为其服务的 reducer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> coutReducer <span class="keyword">from</span> <span class="string">&quot;./count_reducer&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(coutReducer);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Redux-3个核心API"><a href="#Redux-3个核心API" class="headerlink" title="Redux 3个核心API"></a>Redux 3个核心API</h2><p>使用这些API需要引入创建好的 store</p>
<h3 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h3><p>获取 redux 中被管理的状态（获取数据）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = store.<span class="title function_">getState</span>();</span><br></pre></td></tr></table></figure>



<h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>向 Redux 发布消息，需要携带 action，Store 会将这个 action丢给 Reducers 去处理。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; count &#125; = store.<span class="title function_">getState</span>();</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;increment&quot;</span>, <span class="attr">data</span>: &#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>



<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p>可以监测 Redux 中状态的改变。Redux 只负责管理状态，至于状态的改变驱动着页面的展示，需要我们自己实现。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 状态被改变啦</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="异步action"><a href="#异步action" class="headerlink" title="异步action"></a>异步action</h2><p>在store中，不止可以传一个一般对象，其实还可以传一个函数，在这个函数里面搞个异步任务就成。</p>
<p>默认情况下， store 不允许传除 Object 以外的参数，需要使用一个中间件 redux-thunk让 store 接受函数参数。</p>
<p>下载这个中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add redux-thunk</span><br></pre></td></tr></table></figure>

<p>在 store 中引入这个中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 Redux 提供的 applyMiddleware 去使用这个中间件，并且需要将其作为 createStore 的第二个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> thunkMiddleware = <span class="title function_">applyMiddleware</span>(thunk);</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(countReducer, thunkMiddleware);</span><br></pre></td></tr></table></figure>

<p>在 actionCreator 中执行异步操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 睡眠</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = time =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAsyncAction</span> = state =&gt;</span><br><span class="line">  <span class="keyword">async</span> (dispatch) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 使用 sleep 阻塞执行</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(state));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">action</span> = (<span class="params">type, data</span>) =&gt; (&#123;type, data&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h1><ul>
<li>所有的 UI 组件都应该包裹一个容器组件，他们是父子关系</li>
<li>容器组件是真正和 redux 打交道的，里面可以随意使用 redux 的 api</li>
<li>UI 组件中不能使用任何 redux 的 api</li>
<li>容器组件会传给 UI 组件<ol>
<li>redux 中所保存的状态</li>
<li>用于操作状态的方法</li>
</ol>
</li>
</ul>
<p>下载 <code>react-redux</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-redux</span><br></pre></td></tr></table></figure>



<h2 id="建立容器组件与UI组件的连接"><a href="#建立容器组件与UI组件的连接" class="headerlink" title="建立容器组件与UI组件的连接"></a>建立容器组件与UI组件的连接</h2><p>先创建一个容易组件，用于连接 UI 组件。</p>
<p>引入 UI 组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CountUI</span> <span class="keyword">from</span> <span class="string">&quot;../../components/Count&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>引入 react-redux 中的 connect 函数，用于连接 UI 组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span></span><br></pre></td></tr></table></figure>

<p>连接容器组件与UI组件，connect 第一次被调用时可以传递两个参数</p>
<ul>
<li>第一个参数是一个 <code>function</code> 类型，用于给 UI 组件传递状态，返回的对象中的 key 就作为传递给 UI 组件 props 的 key，value 就作为传递给 UI 组件 props 的 value。这个方法可以接收两个参数。这个方法还可以接收两个参数<ul>
<li>第一个参数是 redux 中的状态</li>
<li>第二个参数是父组件给容器组件传递的 props</li>
</ul>
</li>
<li>第二个参数是一个 <code>function</code> 类型，用于声明给 ui 组件操作状态的方法。返回的对象中的 key 就作为传递给 UI 组件 props 的 key，value 就作为传递给 UI 组件 props 的 value。这个方法同样可以接收两个参数<ul>
<li>第一个参数是 store 中的 <code>dispatch</code> 函数</li>
<li>第二个参数是父组件传递给容器组件的 props</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个Props</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state redux 中的状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> props 属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">*</span>&#125; <span class="variable">Props</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createProps = <span class="keyword">function</span> (<span class="params">state, props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作状态的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dispatch store 中的 dispatch 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> props 父组件传递给容器的props</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">&#123;</span>&#125;&#125; ui props</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> reducers = <span class="keyword">function</span> (<span class="params">dispatch, props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(state));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(createProps, reducers)(<span class="title class_">CountUI</span>);</span><br></pre></td></tr></table></figure>

<p>使用这个组件时直接引入这个容器组件，还需要通过 props 给容器组件传递 store</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&quot;./containers/Count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./redux/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用  react-redux 之后不需要再手动监测状态改变。<del>store.subscribe();</del></p>
</blockquote>
<h2 id="Provider组件"><a href="#Provider组件" class="headerlink" title="Provider组件"></a>Provider组件</h2><p>由于每个容器都需要提供一个 store ，如果有10个容器，那么就得写10次 <code>store=&#123;store&#125;</code> 这种代码，而 Provider 组件可以帮我们做这件事，只需要给 Provider 组件提供一次 store，它就能精准的识别每一个容器，并将这个 store 传进去。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  container);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet线程安全</title>
    <url>/2022/01/02/Servlet%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<ol>
<li>Servlet是单实例多线程环境下运行的。</li>
<li>什么时候程序存在线程安全问题？<ul>
<li>多线程并发</li>
<li>有共享数据</li>
<li>共享数据有修改操作</li>
</ul>
</li>
<li>在JVM中，哪些数据可能会存在线程安全问题？<ul>
<li>局部变量内存空间不共享，一个线程一个栈，局部变量在栈内存中存储，局部变量不会存在线程安全问题。</li>
<li>常量不会被修改，所以常量不会存在线程安全问题。</li>
<li>所有线程共享一个堆<ul>
<li>堆内存中new出来的对象在其中存储，对象内部有“实例变量”，所以“实例变量”的内存多线程是共享的，实例变量多线程共享访问，并且涉及到修改操作的时候就会存在线程安全问题。</li>
</ul>
</li>
<li>所有线程共享一个方法区<ul>
<li>方法区中有静态变量，静态变量的内存也是共享的，若涉及到修改操作，静态变量也存在线程安全问题。</li>
</ul>
</li>
</ul>
</li>
<li>线程安全问题不只是体现在JVM中，还有可能发生在数据库中，例如：多个线程共享同一张表，并且同时去修改表中的记录，那么这些记录就存在线程安全问题，若要解决数据库中线程安全问题至少有两种方案：<ol>
<li>在Java程序中使用<code>synchronized</code>关键字，线程排队执行，自然不会在数据库中并发，解决线程安全问题。</li>
<li>行级锁&#x2F;悲观锁，在执行的sql语句后加上<code>for update</code></li>
<li>事务隔离级别，例如：串行化</li>
<li>乐观锁</li>
</ol>
</li>
<li>怎么解决线程安全问题？<ol>
<li>不使用实例变量，尽量使用局部变量</li>
<li>若必须使用实例变量，那么我们可以考虑将该对象考虑将对象多例变量，一个线程一个Java对象，实例变量的内存也不会共享。</li>
<li>若必须使用单例，那就只能使用synchronized线程同步机制，线程一但排队执行，程序执行效率降低。</li>
</ol>
</li>
<li>Servlet怎么解决线程安全问题？<ol>
<li>不使用实例变量，尽量使用局部变量</li>
<li>Servlet必须是单例的，所以只能使用synchronized线程同步机制</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet生命周期</title>
    <url>/2022/01/02/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><ol>
<li><p>什么是生命周期？<br>生命周期表示一个Java对象从最初创建到被销毁的过程</p>
</li>
<li><p>Servlet的生命周期是谁来管理的？程序员可以干涉吗？</p>
<p>Servlet对象的生命周期javaweb程序员是无权干涉的，包括Servlet对象的相关方法的调用，javaweb程序员也是无权干涉的。Servlet对象从最初的创建开始，方法的调用、以及最后Servlet对象的销毁，整个过程都是由WEB容器来管理的。<br>Web Container管理Servlet对象的生命周期。</p>
</li>
<li><p><strong>默认情况下</strong>，Servlet对象在WEB服务器启动阶段不会被实例化。若希望在web服务器启动阶段实例化Servlet对象，需要使用特殊设置。</p>
</li>
</ol>
<hr>
<h1 id="简单描述Servlet生命周期"><a href="#简单描述Servlet生命周期" class="headerlink" title="简单描述Servlet生命周期"></a>简单描述Servlet生命周期</h1><ol>
<li>用户在浏览器地址栏上输入URL：<a href="http://localhost:8080/xxx/xxx">http://localhost:8080/xxx/xxx</a></li>
<li>web容器窃取请求路径：&#x2F;xxx&#x2F;xxx</li>
<li>web容器在容器上下文中找请求路径<code>/xxx/xxx</code>对应的Servlet对象</li>
<li>若没有找到对应的Servlet对象<ol>
<li>通过web.xml文件中相关的配置信息，得到请求路径<code>/xxx/xxx</code>对应的Servlet完整类名</li>
<li>通过反射机制，调用Servlet类的无参数构造方法完成Servlet对象的实例化</li>
<li>web容器调用Servlet对象的<code>init</code>方法完成初始化操作。</li>
<li>web容器调用Servlet对象的service方法提供服务</li>
</ol>
</li>
<li>若找到对应的Servlet对象<ol>
<li>web容器直接调用Servlet对象的service方法提供服务</li>
</ol>
</li>
<li>web容器关闭的时候&#x2F;webapp重新部署的时候&#x2F;该Servlet对象长时间没有用户再次访问的时候，web容器会将该Servlet对象销毁，在销毁该对象之前，web容器会调用Servlet对象的destroy方法，完成销毁之前的准备。</li>
</ol>
<blockquote>
<p>init方法执行的时候，Servlet对象已经创建好了。destroy方法执行的时候，Servlet对象还没有被销毁，即将被销毁。</p>
<p>Servlet对象是单例，但是不符合单例模式，只能称为伪单例。真单例的构造方法是私有化的，Tomcat服务器是支持多线程的。所以Servlet对象在单实例多线程的环境下运行的，那么Servlet对象中若有实例变量，并且实例变量涉及到修改操作，那么这个Servlet对象一定会存在线程安全问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Sleuth + Zipkin 服务链路追踪 - 学习笔记</title>
    <url>/2022/03/21/Sleuth-Zipkin-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Sleuth-Zipkin-服务链路追踪-学习笔记"><a href="#Sleuth-Zipkin-服务链路追踪-学习笔记" class="headerlink" title="Sleuth + Zipkin 服务链路追踪 - 学习笔记"></a>Sleuth + Zipkin 服务链路追踪 - 学习笔记</h1><p>微服务框架是一个分布式架构，它按业务划分服务单元，一个分布式系统往往有很多个服务单元。由于服务单元数量众多、业务的复杂性，如果出现了错误和异常，很难去定位。主要体现在：一个请求可能需要调用多个服务，而内部服务的调用复杂性，决定了问题难以定位。所以微服务架构中，必须实现分布式链路追踪，去跟进一个请求到底有哪些服务参与，参与的顺序又是怎样的，从而达到每个请求的步骤清晰可见，出了问题可以很快定位。</p>
<p>链路追踪组件有 Google 的 Dapper、Twitter 的 Zipkin 以及阿里的Eagleeye（鹰眼）等</p>
<h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul>
<li>Span（跨度）：基本工作单元，发送一个远程调度任务，就会产生一个 Span，Span 是一个 64 位 ID 唯一标识的，Trace 是用另一个 64 位 ID 唯一标识的，Span 还有其他数据信息，比如摘要、时间戳事件、Span 的 ID以及进度 ID。</li>
<li>Trace（跟踪）：一系列 Span 组成的一个树状结构。请求一个微服务系统的 API 接口，这个 API 接口需要需要调用多个微服务，调用每个微服务都会产生一个新的 Span，所有由这个请求产生的 Span 组成了这个 Trace。</li>
<li>Annotation（标注）：用来及时记录一个事件的，一些核心注解用来定义一个请求的开始和结束<ul>
<li><code>cs</code> Client Sent：客户端发送一个请求，这个注解描述了这个 Span 的开始。</li>
<li><code>sr</code> Server Received：服务端获得请求并准备开始处理它，如果将其 <code>sr</code> 减去 <code>cs</code> 的时间戳便可得到网络传输的时间。</li>
<li><code>ss</code> Server Sent（服务端发送响应）：该注解表明请求处理的完成（当请求返回客户端），如果 <code>ss</code> 的时间戳减去 <code>sr</code> 的时间戳，就可以得到服务器请求的时间。</li>
<li><code>cr</code> Client Received（客户端接收响应）：此时 Span 的结束，如果 <code>cr</code> 的时间戳减去 <code>cs</code> 的时间戳便可以得到整个请求所消耗的时间。</li>
</ul>
</li>
</ul>
<h2 id="整合Sleuth"><a href="#整合Sleuth" class="headerlink" title="整合Sleuth"></a>整合Sleuth</h2><p>服务提供者与消费者都需要导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-sleuth --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启日志</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">top.ctong.gulimall:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">org.springframwork.cloud.openfeign:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframwork.cloud.sleuth:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>开启日志后发送一次远程调用，控制台打印链路信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARN [gulimall-seckill,424a8cbc7003a8ab,c5ff8faf9ba3f49c]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>gulimall-seckill</code> 是服务名</li>
<li><code>424a8cbc7003a8ab</code> 是 TraceId，一条链路中只有一个 TraceId</li>
<li><code>c5ff8faf9ba3f49c</code> 是 SpanId，链路中的基本工作单元 ID</li>
</ul>
<h2 id="整合-Zipkin-可视化观察"><a href="#整合-Zipkin-可视化观察" class="headerlink" title="整合 Zipkin 可视化观察"></a>整合 Zipkin 可视化观察</h2><p>通过 Sleuth 产生的调用链监控信息，可以得知微服务之间的调用链路，但监控信息只输出到控制台不方便查看。可以使用图形化工具-Zipkin。Zipkin 是 Twitter 开源的分布式跟踪系统，主要用来收集系统的时序数据，从而追踪系统的调用问题。</p>
<p><a href="https://zipkin.io/pages/quickstart">官方文档传送门：https://zipkin.io/pages/quickstart</a></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203211520956.png" alt="Zipkin原理图"></p>
<p>docker 安装 zipkin 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>

<p>然后在服务中导入 zipkin 依赖，这个依赖同时包含了 sleuth，我们可以不用自己引入 zleuth</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后在服务中加入以下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 服务链路追踪</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="comment"># 服务地址</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://172.16.156.128:9411/</span></span><br><span class="line">    <span class="comment"># 关闭服务发现，否则 SpringCloud 会把 zipkin 的 url 当作服务名</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="comment"># 使用http进行传输</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment"># 设置抽样采集器，1=100%</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>配置好一切后，重启服务把所有的功能都测试一遍再检查 zipkin</p>
<p><strong>服务依赖关系</strong></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203211840644.png" alt="依赖"></p>
<p><strong>调用链路</strong></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203212011433.png" alt="调用链路"></p>
<blockquote>
<p>链路追踪最重要的是分析请求</p>
</blockquote>
<p><strong>注意：所有信息在服务重启后丢失，可以保存到ElasticSearch或者MySQL</strong></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot基础 - 学习笔记</title>
    <url>/2022/01/02/Spring-Boot%E5%9F%BA%E7%A1%80---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spring-Boot2"><a href="#Spring-Boot2" class="headerlink" title="Spring Boot2"></a>Spring Boot2</h1><blockquote>
<p>2021&#x2F;3&#x2F;12 SpringBoot学习笔记</p>
</blockquote>
<h2 id="学习前准备"><a href="#学习前准备" class="headerlink" title="学习前准备"></a>学习前准备</h2><p>JDK版本官方推荐<code>v1.8</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java -version </span><br><span class="line">openjdk version &quot;1.8.0_282&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_282-bre_2021_01_20_16_06-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.282-b00, mixed mode)</span><br></pre></td></tr></table></figure>

<p>检查是否安装了Maven</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mvn -version</span><br><span class="line">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)</span><br></pre></td></tr></table></figure>

<p>修改Maven的下载源与jdk版本，打开Maven安装路径，修改<code>conf/setting.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改下载源为国内阿里源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用jdk1.8 来进行项目编译--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>SpringBoot2是基于jdk1.8编写，使用其他版本的jdk可能会出现问题，所以配置maven使用jdk1.8进行编译。</p>
</blockquote>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>使用SpringBoot创建一个服务，浏览器对这个服务发送HTTP请求，响应<code>Hello, Spring Boot 2</code></p>
<h3 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h3><p>确认idea使用了我们自己的maven</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053671.png" alt="image-20210311225101834"></p>
<p>点击：创建项目 &#x3D;&#x3D;&gt;&gt; maven &#x3D;&#x3D;&gt;&gt;  next ，输入你的项目路径以及名称后点击finish</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053682.png" alt="截屏2021-03-11 22.47.44"></p>
<p>创建完成之后我们需要使用<code>Spring boot</code>的核心依赖<code>spring-boot-starter-parent</code>，在pom.xml文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当前使用的<code>Spring Boot</code>版本为<code>2.4.3</code></p>
</blockquote>
<p>若需要web开发，还需要导入相应的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>在java文件夹下创建<code>Example</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有个错误<code>Spring Boot Application in default package </code>，原因是当前这个启动类在默认包下，没有定义包，没有包自然就没有子包这个概念</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.hall;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053691.png" alt="解决Spring Boot Application in default package错误"></p>
<p>这样就行了</p>
<hr>
<p><code>@SpringBootApplication</code> 这个注解是把当前这个类标注为SpringBoot的启动类，通常也把标注了<code>@SpringBootApplication</code>注解的类称为主程序类…</p>
<p>当然，单单只有这个注解还不能让我们的主类跑起来，还需要通过SpringBoot提供的api<code>SpringApplication.run()</code>将这个类跑起来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      SpringApplication.run(Example.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个模块只要有一个主程序类就行了</p>
</blockquote>
<p>主类写好了之后无需过多的配置，可直接编写业务逻辑。</p>
<p>创建一个<code>controller</code>包，再创建一个<code>HelloController.java</code>文件</p>
<p>使用<code>@Controller</code>注解标注这个类，表示这是一个控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.hall.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * █████▒█      ██  ▄████▄   ██ ▄█▀     ██████╗ ██╗   ██╗ ██████╗</span></span><br><span class="line"><span class="comment"> * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒      ██╔══██╗██║   ██║██╔════╝</span></span><br><span class="line"><span class="comment"> * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░      ██████╔╝██║   ██║██║  ███╗</span></span><br><span class="line"><span class="comment"> * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄      ██╔══██╗██║   ██║██║   ██║</span></span><br><span class="line"><span class="comment"> * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄     ██████╔╝╚██████╔╝╚██████╔╝</span></span><br><span class="line"><span class="comment"> * ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒     ╚═════╝  ╚═════╝  ╚═════╝</span></span><br><span class="line"><span class="comment"> * ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span></span><br><span class="line"><span class="comment"> * ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span></span><br><span class="line"><span class="comment"> * ░     ░ ░      ░  ░</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Copyright Copyright 2021 UpYou.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> UpYou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span> HelloController.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> HelloController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-03-13 21:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8638687587976398521L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloController</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个控制器需要处理<code>hello</code>请求，先声明一个方法处理<code>hello</code>并返回<code>&#39;Hallo, Spring Boot2&#39;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8638687587976398521L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HelloController</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/hallo&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">handleHallo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot2&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@RequestMapping</code>注解是当遇到**”&#x2F;hallo”**这个请求时使用被标注的方法处理</p>
<p><code>@ResponseBody</code>表示我们当前返回的数据是以字符串的方式写给浏览器</p>
<p>现在启动我们的程序并使用浏览器发送一个”&#x2F;hallo”请求</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053692.png" alt="浏览器发送hallo请求"></p>
<blockquote>
<p>在未来我们一个控制器不可能只处理一个请求，可能都要给这些请求返回某些字符，如果不想每处理一个请求都标注<code>@ResponseBody</code>，可以将<code>@ResponseBody</code>标注在这个控制器上，这代表这个控制器下请求响应的所有数据都是直接写给浏览器的而不是跳转某个页面。当然，如果觉得使用两个注解麻烦，Spring还提供了<code>@RestController</code>可以替代这两个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h2><p>SprintBoot是来整合其它所有东西的一个框架，可以将我们未来所有的配置都可以抽取在一个配置文件当中。这个配置文件固定名字叫<code>application.properties</code>。</p>
<p>在这个配置文件中可以修改Tomcat的一些设置包括SpringBoot的一些设置，都可以在这修改。</p>
<p>例如修改Tomcat启动端口</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure>

<p>这些设置，你可以在SpringBoot的<a href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-application-properties.html#common-application-properties">官方文档</a>中找到</p>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>父项目的主要做用是用来做依赖管理，这不需要我们人为的去干涉，在父项目的父项目中，也就是<code>spring-boot-dependencies</code>，声明了当前使用的这个版本中，几乎声明了我们开发的所有常用依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>父项目引入后，子项目以后引入依赖，就不需要太过注意版本号了。这也叫自动版本仲裁…</p>
</li>
<li><p>SpringBoot默认引入的版本号都是当前SpringBoot所支持的最高版本，因为每个人的开发环境不一样，所以我们可以根据自己的需求去进行修改。</p>
</li>
<li><p>除了在<code>dependency</code>中添加版本号以外，还可以在<code>properties</code>中添加，这样可以更方便管理我门自定义的版本号。例如需要修改mysql的版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改版本号之前，需要去<a href="https://mvnrepository.com/">maven repertory</a>中查看这个依赖的版本号列表</p>
</blockquote>
</li>
</ul>
<h3 id="Starters场景"><a href="#Starters场景" class="headerlink" title="Starters场景"></a>Starters场景</h3><p>以后我们经常会见到这种引入方式<code>spring-boot-starter-*</code>，其中<code>*</code>就是代表某种场景，只要引入starter，那么这个场景的所有常规的依赖SpringBoot都会自动帮我们引入</p>
<p>例如<code>spring-boot-starter-web</code>这个依赖，我们引入之后，他就会自动帮我们把<code>web</code>场景下的所有常规依赖引入，其实也没那么神奇，看看<code>spring-boot-starter-web</code>的<code>pom.xml</code>就知道了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  .....</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot所有场景都可以在官方文档找到：<a href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/using-spring-boot.html#using-boot-starter">传送门</a></p>
<p>在未来如果见到：<code>*-spring-boot-starter</code>它并不是SpringBoot为我们提供的，而是第三方为我们提供的场景启动器。 </p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053699.png" alt="分析依赖树"></p>
<blockquote>
<p>在SpringBoot中，引入依赖推荐不写版本号，<strong>但这不是绝对的</strong>。</p>
</blockquote>
<h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ul>
<li><p>自动配好Tomcat</p>
<ol>
<li>SpringBoot自动帮我们引入Tomcat依赖</li>
<li>配置Tomcat</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>自动配置好SpringMVC</p>
<ol>
<li>引入SpringMVC全套组件</li>
<li>自动配置好了Spring MVC的常用组件「功能」</li>
</ol>
</li>
<li><p>自动配好Web常见功能</p>
<ol>
<li>SpringBoot帮我们配置好了所有<strong>web</strong>开发的场景</li>
</ol>
</li>
<li><p>默认的包结构</p>
<ol>
<li><p>主程序所在的包及其下面的所有子包里面的组件都会被扫描到，不需要我们手动的去配置扫描路径。</p>
</li>
<li><p>如果需要自定义扫描路径，可以使用<code>@SpringBootApplication</code>注解提供的<code>scanBasePackages</code>属性进行定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;java.com.xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>在SpringBoot提供的默认配置中，每一个配置都有默认值，这些默认配置都是映射到某一个类中的。例如：<code>spring.servlet.multipart.file-size-threshold</code>，这是一个现在文件上传的大小，这个属性的值会被绑定到<code>org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</code>类中</p>
</li>
<li><p>这些自动配置项并不是全部加载，而是你当前项目中引入了哪些场景，那么这个场景的自动配置才会被加载。SpringBoot所有自动配置功能都在<code>spring-boot-autoconfigure</code>依赖中</p>
<blockquote>
<p>自动配置，按需加载</p>
</blockquote>
</li>
</ul>
<h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>在能够扫描到的包下创建一个配置类，使用<code>@Configuration</code>注解标注它，用于告诉SpringBoot这是一个配置类，这等同于SpringMVC的配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.upyou.hall.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7095527472630716540L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@Bean</code>注解标准一个方法，这个方法将给Spring容器返回一个组件。以方法名作为主键id，方法返回值类型作为组件类型，返回值就是组件在容器中的实例。如果不需要将方法名用作组件名，也可以使用<code>@Bean</code>提供的<code>value</code>属性进行自定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;UpYou&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主程序中验证我们的组件是否成功添加到Spring容器，通过我们的组件名称可以获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line">				<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.print(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053702.png" alt="获取自定义组件"></p>
<p>组件注册时默认时注册为单实例组件，无论获取多少次，都是同一个组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.print(user == user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053766.png" alt="单实例组件验证结果"></p>
<p>在我们配置类中用<code>@Bean</code>标注的方法是一个组件，但被<code>@Configuration</code>标注的类也是一个组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line">        System.out.println(app.getBean(MyConfig.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><code>com.upyou.hall.config.MyConfig$$EnhancerBySpringCGLIB$$1a6812ad@2375b321</code></p>
<hr>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Configuration代理"><a href="#Configuration代理" class="headerlink" title="Configuration代理"></a>Configuration代理</h4><p>在<code>@Configuration</code>中，有一个属性<code>proxyBeanMethods</code>，它是指定当前被标注的类中的<code>@Bean</code>是否使用代理，默认<code>true</code>，如果这个类中的<code>@Bean</code>被代理，那么调用这个类中的方法的时候是通过代理去调用的「单例」。如果这个类中<code>@Bean</code>被代理，那么SpringBoot总会去检查容器中是否存在这个组件，如果不存在则创建，保持组件的单实例。</p>
<p>测试不代理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>再去调用方法，检查内存地址是否还是相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line">  <span class="type">MyConfig</span> <span class="variable">user</span> <span class="operator">=</span> app.getBean(MyConfig.class);</span><br><span class="line">  System.out.print(user.user() == user.user());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053771.png" alt="对象不被代理测试"></p>
<ul>
<li>配置类中使用@Bean标注在方法上给容器注册组件，默认是单实例</li>
<li>配置类本身也是组件</li>
<li><code>proxyBeanMethods</code> 代理<code>@Bend</code>的方法<br>Full（proxyBeanMethods&#x3D;true）<br>Lite（proxyBeanMethods&#x3D;false）</li>
</ul>
<blockquote>
<p>如果没有组件依赖我们的组件，那么就不需要使用代理，不使用代理还可以提升Spring启动速度，如果被依赖，那么就使用代理，可以保证使用的就是这个容器中的组件。</p>
</blockquote>
<h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><p>通过<code>@Import</code>注解可以给当前被标注的容器导入组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="meta">@Import(&#123;User.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>它可以给容器自动创建指定类型的组件，这些被<code>Import</code>创建的组件名字默认为完整类名<code>com.upyou.hall.bean.User</code>。<code>@Import</code>接受一个<code>Class&lt;?&gt;[]</code>类型</p>
<h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h4><p>这是一个条件装配器，当满足<code>@Conditional</code>制定的条件的时候才会给容器注入相关的组件。 </p>
<p>使用idea的<code>control + h</code>查看<code>Conditional</code>类继承树，<code>conditional</code>有很多派生注解，每一个注解都代表着一个功能。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053962.png" alt="Conditional派生注解"></p>
<h5 id="ConditionalOnBean"><a href="#ConditionalOnBean" class="headerlink" title="@ConditionalOnBean"></a>@ConditionalOnBean</h5><p>当容器中有某个组件时才注册指定组件，例如以下示例代码，并没有注册<code>pet</code>组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7095527472630716540L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;pet&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;UpYou&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试是否成功注册<code>user</code>组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">user</span> <span class="operator">=</span> app.containsBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<p>输出<code>false</code>，将<code>pet</code>注册时输出为<code>true</code></p>
<blockquote>
<p>注意：以上示例在注册了<code>pet</code>组件时，<code>app.containsBean(&quot;user&quot;);</code>结果仍然为<code>false</code>，这是因为组件注册时存在先后问题，让<code>pet</code>组件比<code>user</code>组件先注册就可以了。</p>
</blockquote>
<p><strong>这里只做一个例子，因为这些派生注解用法都一样</strong></p>
<h3 id="引入原生配置文件"><a href="#引入原生配置文件" class="headerlink" title="引入原生配置文件"></a>引入原生配置文件</h3><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><p>可以使用<code>@ImportResource</code>注解将xml中注册的组件注册到容器中，例如SpringMVC就使用了非常多的xml文件配置。</p>
<p>例如在<code>resources</code>文件夹中有一个<code>beans.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userForXml&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.upyou.hall.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upyou&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是一个老的组件注册方式，我们使用SpringBoot时这里配置的组件肯定无法注册到容器中。</p>
<p>测试在容器中是否有<code>xml</code>中注册的<code>userForXml</code>组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">userForXml</span> <span class="operator">=</span> app.containsBean(<span class="string">&quot;userForXml&quot;</span>);</span><br><span class="line">System.out.println(userForXml);</span><br></pre></td></tr></table></figure>

<p>结果为<code>false</code></p>
<p>顺便在某个配置类下使用<code>@ImportResource</code>导入我们的<code>xml</code>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>现在再测试是否有我们使用<code>xml</code>注册的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">userForXml</span> <span class="operator">=</span> app.containsBean(<span class="string">&quot;userForXml&quot;</span>);</span><br><span class="line">System.out.println(userForXml);</span><br></pre></td></tr></table></figure>

<p>结果输出为<code>true</code></p>
<h3 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h3><p>我们连接数据库，需要用到账号和密码，我们一般将连接信息写到一个<code>properties</code>配置文件中，但这样我们读取这个信息的时候就变的非常麻烦。可以使用SpringBoot提供的配置绑定来解决这些问题。</p>
<h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><p>这个注解有两个参数<code>prefix</code>、<code>value</code>，<code>prefix</code>是配置文件中的配置名的前缀，例如配置文件中有</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql.bean.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">mysql.bean.pass</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>那么他的前缀就是<code>mysql.bean</code>，他会根据被标注的类中的属性名进行绑定，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mysql.bean&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnMysql</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8865269478790296187L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将mysql.bean.user的值绑定到此处</span></span><br><span class="line">  <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将mysql.bean.pass的值绑定到此处</span></span><br><span class="line">  <span class="keyword">private</span> String pass;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ConnMysql</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试一下这个两个字段是否已经将配置文件中的值绑定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line"><span class="type">ConnMysql</span> <span class="variable">bean</span> <span class="operator">=</span> app.getBean(ConnMysql.class);</span><br><span class="line">System.out.println(bean.getUser());</span><br><span class="line">System.out.println(bean.getPass());</span><br></pre></td></tr></table></figure>

<p>分别输出<code>root,123</code></p>
<blockquote>
<p>只有在容器中的组件，才能拥有SpringBoot提供的<code>ConfigurationProperties</code></p>
</blockquote>
<h4 id="EnableConfigurationProperties"><a href="#EnableConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties"></a>@EnableConfigurationProperties</h4><p>这个注解是与<code>@Configuration</code>一起使用，它可以开启指定类的属性配置绑定功能，并且将这个组件注册到此容器</p>
<p>以下代码是没有使用<code>@Component</code>注解的，此时idea可能会警告，忽略即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mysql.bean&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnMysql</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8865269478790296187L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将mysql.bean.user的值绑定到此处</span></span><br><span class="line">  <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将mysql.bean.pass的值绑定到此处</span></span><br><span class="line">  <span class="keyword">private</span> String pass;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ConnMysql</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再在我们的配置文件中使用<code>@EnableConfigurationProperties</code>使用这个组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ConnMysql.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7095527472630716540L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时再测试是否成功导入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line"><span class="type">ConnMysql</span> <span class="variable">bean</span> <span class="operator">=</span> app.getBean(ConnMysql.class);</span><br><span class="line">System.out.println(bean.getUser());</span><br><span class="line">System.out.println(bean.getPass());</span><br></pre></td></tr></table></figure>

<p>分别输出<code>root,123</code></p>
<h2 id="自动配置原理-1"><a href="#自动配置原理-1" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><h3 id="引导加载自动配置类"><a href="#引导加载自动配置类" class="headerlink" title="引导加载自动配置类"></a>引导加载自动配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;...&#125;</span><br></pre></td></tr></table></figure>



<h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p><code>@SpringBootConfiguration</code>就是<code>@Configuration</code>，它代表当前是一个配置类。</p>
<h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>指定包扫描路径</p>
<h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>@import</code>导入的并不只是一个组件，<code>Registrar</code>给容器批量导入了非常多的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">  AutoConfigurationPackages.register(registry, (String[])(<span class="keyword">new</span> <span class="title class_">AutoConfigurationPackages</span>.PackageImports(metadata)).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码将指定包下的所有组件导入进来「被<code>SpringBootConfiguration</code>标注的类所在的包」</p>
<h5 id="Import-1"><a href="#Import-1" class="headerlink" title="@Import"></a>@Import</h5><p>核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">  AutoConfigurationImportSelector.<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用<code>getAutoConfigurationEntry(annotationMetadata)</code>给容器中批量导入组件</p>
<p>调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>获取到所有需要导入到容器的配置类。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271053455.png" alt="待导入的组件"></p>
<p>通过工厂加载器<code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) </code>加载得到所有组件</p>
<p>从<code>META-INF/spring.factories</code>位置来加载一个文件「默认扫描我们当前系统里面所有<code>META-INF/spring.factories</code>位置的文件」<code>spring-boot-autoconfigure-2.4.3.jar</code>中就有<code>META-INF/spring.factories</code>，这里面配置了需要系统启动就需要加载的东西，这些配置文件都是写死的。</p>
<h3 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h3><p>虽然在<code>spring-boot-autoconfigure-2.4.3.jar</code>中定义了非常多的场景，并且这些场景的所有自动配置启动的时候默认全部加载，按照条件装配规则，最终都会被按需配置</p>
<p>随便拿个包，例如<code>org.springframework.boot.autoconfigure.aop</code></p>
<p>这个场景我们并没有使用，索引并不会给我门开启，因为这个配置类中使用了<code>@ConditionalOnClass</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(Advice.class)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AspectJAutoProxyingConfiguration</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定<code>Advice.class</code>类存在的时候才开启这个配置类，因为我们没有<code>Advice</code>相关的包，所以并不会给我们导入<code>AspectJAutoProxyingConfiguration</code>这个配置类</p>
<blockquote>
<p>Spring Boot默认会在底层配好所有的组件，但是如果用户自己配置了那么以用户的优先。</p>
</blockquote>
<ul>
<li>SpringBoot 先加载所有的自动配置类</li>
<li>每个自动配置类都按照条件进行生效，默认都会绑定配置文件指定的值。</li>
<li>生效的配置类都会给容器中装配很多组件</li>
<li>只要容器中有这些组件，相当于这些功能就都有了</li>
<li>只要用户有自己配置的，就以用户优先 </li>
<li>定制化配置<ul>
<li>自己<code>@Bean</code>替换底层的组件</li>
<li>去看这个组件是获取的配置文件有什么值，最后按照规定进行修改即可。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合MyBatis、Druid</title>
    <url>/2022/01/02/Spring-Boot%E6%95%B4%E5%90%88MyBatis%E3%80%81Druid/</url>
    <content><![CDATA[<h1 id="Spring-Boot整合MyBatis、Druid"><a href="#Spring-Boot整合MyBatis、Druid" class="headerlink" title="Spring Boot整合MyBatis、Druid"></a>Spring Boot整合MyBatis、Druid</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><p>在<code>pom.xml</code>文件中引入mybatis、druid、mysq的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.mybatis&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql 连接依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><p>在nacos中对对应的配置进行编辑</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.115</span><span class="number">.149</span><span class="number">.74</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ip/cainaer_cloud?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="comment"># 你的账号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="comment"># 你的密码</span></span><br><span class="line">    <span class="comment"># 阿里连接池</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mybatis配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 搜索指定包别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="comment"># 你的包名</span></span><br><span class="line">  <span class="comment"># 配置mapper的扫描，找到所有的mapper.xml映射文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 是否将sql打印到控制面板(该配置会将sql语句和查询的结果都打印到控制台)</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swagger 配置</span></span><br></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>以上配置完成后启动项目，启动过程中如果出现以下日志，那就证明配置成功了</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271055844.png" alt="截屏2021-03-10 16.02.09"></p>
<p>执行一段curd代码打印日志如下，那么druid正常使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@7a95ba84] will not be managed by Spring</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Actuator - 学习笔记</title>
    <url>/2022/01/02/SpringBoot-Actuator---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints">官网相关文档</a></p>
<h3 id="SpringBoot-Actuator"><a href="#SpringBoot-Actuator" class="headerlink" title="SpringBoot Actuator"></a>SpringBoot Actuator</h3><p>未来每一个微服务在云上部署后，需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我门每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>引入actuator场景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://localhost:8080/actuator//*/">http://localhost:8080/actuator/\*\</a>*</p>
</li>
<li><p>Web下默认暴露的端点只有<code>health</code>和<code>info</code>，可以在配置中暴露所有端点信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actuator 监控指标</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment"># 默认开启所有监控端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 以web方式暴露所有监控端点</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p><a href="https://github.com/codecentric/spring-boot-admin">https://github.com/codecentric/spring-boot-admin</a></p>
<h3 id="Actuator-Endpoint"><a href="#Actuator-Endpoint" class="headerlink" title="Actuator Endpoint"></a>Actuator Endpoint</h3><p>常用的Endpoint有</p>
<ul>
<li>Health<br>监控状况</li>
<li>Metrics<br>运行时指标</li>
<li>Loggers<br>日志记录</li>
</ul>
<h4 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h4><p>健康检查端点，一般用在云平台，平台会定时检查应用的健康状况。需要Health Endpoint为平台返回当前应用的一系列组件健康状况集合。</p>
<ul>
<li>health endpoint 返回的结果，应该是一系列健康检查后的一个汇总报告</li>
<li>很多的健康检查默认已经自动配好了，比如：数据库，redis等</li>
<li>可以自定义添加健康检查机制</li>
</ul>
<p>开启指定端点详细信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actuator 监控指标</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> <span class="comment"># 显示详细</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-14%2015.04.50.png" alt="截屏2021-07-14 15.04.50"></p>
<h4 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h4><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到：</p>
<ul>
<li>通过Metrics对接多种监控系统</li>
<li>简化核心Metrics开发</li>
<li>添加自定义Metrics或者扩展已有Metrics</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-14%2015.10.09.png" alt="截屏2021-07-14 15.10.09"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-14%2015.11.13.png" alt="截屏2021-07-14 15.11.13"></p>
<h3 id="管理Endpoint"><a href="#管理Endpoint" class="headerlink" title="管理Endpoint"></a>管理Endpoint</h3><h4 id="开启与禁用Endpoint"><a href="#开启与禁用Endpoint" class="headerlink" title="开启与禁用Endpoint"></a>开启与禁用Endpoint</h4><p>默认情况下，endpoint是全部开启的，若需要指定开启，需要全部关闭后再开启指定端点</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actuator 监控指标</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span> <span class="comment"># 关闭全部端点</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> <span class="comment"># 显示详细信息</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启端点</span></span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">metrics:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h3 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><h4 id="定制Health信息"><a href="#定制Health信息" class="headerlink" title="定制Health信息"></a>定制Health信息</h4><p>实现<code>HealthIndicator</code>接口或者<code>AbstractHealthIndicator</code>抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComponentHealthIndicator</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5066467685531996717L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ComponentHealthIndicator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">      builder.status(Status.UP);</span><br><span class="line">      map.put(<span class="string">&quot;count&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      map.put(<span class="string">&quot;ms&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      builder.status(Status.OUT_OF_SERVICE);</span><br><span class="line">      map.put(<span class="string">&quot;err&quot;</span>, <span class="string">&quot;连接超时&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;ms&quot;</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    builder.withDetail(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>).withDetails(map);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/image-20210714154234818.png" alt="image-20210714154234818"></p>
<h4 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h4><p>定制info有两种方法，一种是在application.yaml配置文件中定义 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">@project.version@</span> <span class="comment"># 获取pom文件中的版本信息</span></span><br><span class="line">  <span class="attr">autor:</span> <span class="string">Clover</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">19</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-14%2015.45.20.png" alt="截屏2021-07-14 15.45.20"></p>
<p>第二种方式，可以实现<code>InfoContributor</code>接口的方式实现，第二种优先级高于配置文件方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppInfoContributor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, InfoContributor &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2489956740668578470L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">AppInfoContributor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; info = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    info.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Clover.You&quot;</span>);</span><br><span class="line">    info.put(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>);</span><br><span class="line">    info.put(<span class="string">&quot;version&quot;</span>, <span class="string">&quot;1.0.0.1&quot;</span>);</span><br><span class="line">    builder.withDetails(info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h4><h5 id="增加定制Metrics"><a href="#增加定制Metrics" class="headerlink" title="增加定制Metrics"></a>增加定制Metrics</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2783841528321793923L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计数指标</span></span><br><span class="line">  <span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">LoginController</span><span class="params">(MeterRegistry meter)</span> &#123;</span><br><span class="line">    <span class="comment">// 注册自定义计数指标，记录登录方法调用了几次</span></span><br><span class="line">    counter = meter.counter(<span class="string">&quot;com.ctong.learnspringboot.controller.LoginController.login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpSession session, User user)</span> &#123;</span><br><span class="line">    <span class="comment">// 增加计数</span></span><br><span class="line">    counter.increment();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册成功后，访问localhost:8080&#x2F;actuator&#x2F;metrics就可以看见我们自定义的新指标</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/image-20210714162110608.png" alt="image-20210714162110608"></p>
<p>计数会随着<code>counter.increment();</code>方法的调用而增加</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-14%2016.22.11.png" alt="截屏2021-07-14 16.22.11"></p>
<h4 id="定义Endpoint"><a href="#定义Endpoint" class="headerlink" title="定义Endpoint"></a>定义Endpoint</h4><p>SpringBoot给我们定义了非常多的监控端点，一旦我们引入 了复杂场景，可能需要自定义监控端点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;diy&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEndpoint</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1370368576988354134L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ReadOperation</span></span><br><span class="line">  <span class="keyword">public</span> Map <span class="title function_">getDockerInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.singletonMap(<span class="string">&quot;docker&quot;</span>, <span class="string">&quot;docker started...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@WriteOperation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopDocker</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;docker stopped....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot高级特性 - 学习笔记</title>
    <url>/2022/01/02/Spring-Boot%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Profile功能"><a href="#Profile功能" class="headerlink" title="Profile功能"></a>Profile功能</h2><p>为了方便多环境适配，SpringBoot简化了profile功能</p>
<h3 id="application-profile功能"><a href="#application-profile功能" class="headerlink" title="application-profile功能"></a>application-profile功能</h3><ul>
<li><p>默认配置文件 application.yaml，任何时候都会加载</p>
</li>
<li><p>指定环境配置文件application-<strong>env</strong>.yaml</p>
</li>
<li><p>激活指定环境</p>
<ul>
<li><p>配置文件激活</p>
</li>
<li><p>命令行激活</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=profile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改配置文件的任意值，命令行优先</p>
</blockquote>
</li>
</ul>
</li>
<li><p>默认配置与环境配置同时生效</p>
</li>
<li><p>同名配置项，profile配置优先</p>
</li>
</ul>
<p>在配置文件中指定环境</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure>



<h3 id="Profile条件装配"><a href="#Profile条件装配" class="headerlink" title="@Profile条件装配"></a>@Profile条件装配</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Profile(&quot;pro&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boss</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Profile(&quot;pro&quot;)</code>当环境为<code>pro</code>时，这个类才会被注册到容器中。</p>
<h3 id="profile分组"><a href="#profile分组" class="headerlink" title="profile分组"></a>profile分组</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">diy</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">diy:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure>

<p>分组之后可以使用<code>spring.profiles.active</code>将这个组中的配置环境全部加载。</p>
<h2 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h2><h3 id="外部配置源"><a href="#外部配置源" class="headerlink" title="外部配置源"></a>外部配置源</h3><p>常用：Java属性文件、YAML文件、环境变量、命令行参数</p>
<h3 id="配置文件查找位置"><a href="#配置文件查找位置" class="headerlink" title="配置文件查找位置"></a>配置文件查找位置</h3><p>外部化配置文件可以从以下几个路径进行查找，后面加载的配置会覆盖前面的配置  </p>
<ol>
<li>classpath根路径</li>
<li>classpath根路径下config目录</li>
<li>jar包当前目录</li>
<li>jar包当前目录的lconfig目录</li>
<li>config子目录的直接子目录</li>
</ol>
<h3 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h3><ol>
<li>当前jar包内部的application.properties和application.yaml</li>
<li>当前jar包内部的application-{profile}.properties和application-{profile}.yaml</li>
<li>引用的外部jar包的application.properties和application.yaml</li>
<li>引用的外部jar包的application-{profile}.properties和application-{profile}.yaml</li>
</ol>
<blockquote>
<p>指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</p>
</blockquote>
<h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><h3 id="starter启动原理"><a href="#starter启动原理" class="headerlink" title="starter启动原理"></a>starter启动原理</h3><ul>
<li><p>starter-pom引入autoconfigurer包<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271049837.png" alt="截屏2021-07-18 15.15.25"></p>
</li>
<li><p>autoConfigure包中配置使用<strong>META-INF&#x2F;spring.factories</strong>中<strong>EnableAutoConfiguration</strong>的值，使项目启动加载指定的自动配置类。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># auto configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">top.ctong.springbootstartautoconfigure.auto.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写自动配置类<strong>xxxAutoConfigration -&gt; xxxProperties</strong></p>
<ul>
<li><code>@Configuration</code></li>
<li><code>@Conditional</code></li>
<li><code>@EnableConfigurationProperties</code></li>
<li><code>@Bean</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HelloService.class)</span><span class="comment">// 如果之前通过奇奇怪怪的方法注册了一个service，那么就不使用这个配置类了</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span><span class="comment">// 当这个配置类生效后，自动将这个properties放在容器中，如果没有开启这个配置，那么在service中的自动注入可能会找不到指定Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> HelloService <span class="title function_">helloService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HelloService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p><a href="https://github.com/YouChuantong/learn-customer-spring-boot-starter">源码GitHub地址</a></p>
<p>新建一个空工程在指定文件夹中</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049845.png" alt="截屏2021-07-18 16.56.14"></p>
<p>新建成功一个空的工程后，会自动打开一个添加模块的面板，先需要添加一个starter工程「其实就是一个普通的maven工程」。</p>
<blockquote>
<p>starter工程一般是空的，只有一些基本的结构，但这并不绝对。</p>
</blockquote>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049851.png" alt="截屏2021-07-18 16.58.02"></p>
<p>完成之后可以根据需求删除不需要的文件夹，保留<code>pom.xml</code>文件即可。之后再新建一个模块，它是一个maven工程</p>
<p>起个名字吧！就叫<code>spring-boot-hello-service-starter-autoconfigure</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049860.png" alt="截屏2021-07-18 17.07.04"></p>
<p>然后在customer-starter项目中引入刚刚创建的工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.ctong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-hello-service-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在spring-boot-hello-service-starter-autoconfigure工程中创建<code>top.ctong.springboothelloservicestarterautoconfigure.servlet.HelloServlet</code>、</p>
<p><code>top.ctong.springboothelloservicestarterautoconfigure.bean.HelloProperties</code></p>
<p><code>top.ctong.springboothelloservicestarterautoconfigure.HelloServiceAutoConfigration</code></p>
<p>创建这3个文件后在service中编写逻辑，例如我有一个请求，这个请求接受一个参数并读取配置文件中配置<code>HelloProperties</code>的内容。</p>
<p>需要<code>HelloProperties</code>绑定配置文件，但不用在这注入到容器中，此时会提示错误，忽略即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;clover.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrefix</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.prefix = prefix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> suffix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuffix</span><span class="params">(String suffix)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.suffix = suffix;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在编写service中的内容。<strong>此时HelloProperties已经和配置文件绑定，但还未注入到容器，所以执行时<code>@Autowired</code>会出错</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">&quot; : &quot;</span> + userName + <span class="string">&quot; &gt;&gt; &quot;</span> + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后编写自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HelloService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> HelloService <span class="title function_">helloService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>@EnableConfigurationProperties(HelloProperties.class)</code> </p>
<p>当这个配置类生效后，将这个properties注入到容器中</p>
</li>
<li><p><code>@ConditionalOnMissingBean(HelloService.class)</code><br>如果已经有一个不知道通过什么奇奇怪怪的手段注入到容器中的Bean，那么这个自动配置类就不生效</p>
</li>
</ul>
<p>最后需要添加一个<strong>spring.factories</strong>开启这个自动配置类</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># auto configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">top.ctong.springboothelloservicestarterautoconfigure.auto.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在resources&#x2F;MATE-INF下</p>
</blockquote>
<p>完成之后需要将我们编写的starter打包并安装到本地maven库，先操作<code>spring-boot-hello-service-starter-autoconfigure</code></p>
<p>最后操作<code>customer-starter</code>这样自定义的starter就好了。</p>
<p>现在新建一个SpringWeb项目测试，在这个项目中引入刚刚自定义的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.ctong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>customer-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在测试项目的配置文件中添加需要的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">clover.hello.prefix=CLOVER</span></span><br><span class="line"><span class="string">clover.hello.suffix=CLOVER</span> <span class="string">NP~~</span></span><br></pre></td></tr></table></figure>

<p>编写一个Controller测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HelloController</span><span class="params">(HelloService helloService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.helloService = helloService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> helloService.sayHello(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049864.png" alt="截屏2021-07-18 18.36.25"></p>
<h2 id="SpringBoot-原理"><a href="#SpringBoot-原理" class="headerlink" title="SpringBoot 原理"></a>SpringBoot 原理</h2><p>Spring原理、SpringMVC原理、自动配置原理、SpringBoot原理</p>
<h3 id="SpringApplication创建初始化流程"><a href="#SpringApplication创建初始化流程" class="headerlink" title="SpringApplication创建初始化流程"></a>SpringApplication创建初始化流程</h3><ul>
<li><p>创建SpringApplication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;[], java.lang.String[])</code></p>
</blockquote>
<ul>
<li><p>保存当前应用程序信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.boot.SpringApplication#SpringApplication(org.springframework.core.io.ResourceLoader, java.lang.Class&lt;?&gt;...)</code></p>
</blockquote>
</li>
<li><p>创建初始启动器：<code>Bootstrapper.class</code><br>去所有的spring.factories文件中找<code>org.springframework.boot.Bootstrapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.bootstrapRegistryInitializers = getBootstrapRegistryInitializersFromSpringFactories();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在所有spring.factories中找所有的<code>ApplicationContextInitializer</code></p>
</li>
<li><p>在所有spring.factories中找所有的<code>ApplicationListener</code></p>
</li>
</ul>
</li>
<li><p>运行<code>SpringApplication</code></p>
<blockquote>
<p><code>org.springframework.boot.SpringApplication#run(java.lang.String...)</code></p>
</blockquote>
<ul>
<li><p>监控整个应用启动&#x2F;停止：StopWatch </p>
<ul>
<li>记录应用启动时间</li>
</ul>
</li>
<li><p>创建引导上下文</p>
<blockquote>
<p><code>org.springframework.boot.SpringApplication#createBootstrapContext</code></p>
</blockquote>
<ul>
<li><p>创建默认上下文</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br></pre></td></tr></table></figure>


</li>
<li><p>获取之前保存的所有<code>org.springframework.boot.SpringApplication#bootstrapRegistryInitializers</code>，然后遍历它，调用每一项中的<code>initialize</code>方法，因为它是<code>bootstrapRegistryInitializers</code>,是一个<code>org.springframework.boot.BootstrapRegistryInitializer</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BootstrapRegistryInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(BootstrapRegistry registry)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给<code>initialize</code>方法传入上一步创建的上下文<code>DefaultBootstrapContext</code>来完成对引导启动器上下文环境设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>让当前应用进入headlless模式</p>
</li>
<li><p>获取并保存运行时监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用所有监听器的<code>starting</code>方法<br>通知所有监听器，当前项目正在启动</p>
<blockquote>
<p><code>org.springframework.boot.SpringApplicationRunListener#starting(org.springframework.boot.ConfigurableBootstrapContext)</code></p>
</blockquote>
</li>
<li><p>保存命令行参数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.boot.SpringApplication#prepareEnvironment</code></p>
</blockquote>
<ul>
<li><p>准备一个基础环境，如果不存在则创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> getOrCreateEnvironment();</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置转换器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.addConversionService) &#123;</span><br><span class="line"> environment.setConversionService(<span class="keyword">new</span> <span class="title class_">ApplicationConversionService</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载外部配置信息，读取所有配置源属性值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configurePropertySources(environment, args);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>绑定环境信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConfigurationPropertySources.attach(environment);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用所有监听器<code>environmentPrepared</code>方法</p>
<blockquote>
<p>此时所有环境已经准备完成</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listeners.environmentPrepared(bootstrapContext, environment);</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断如果没有自定义环境信息就使用默认的环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">  environment = <span class="keyword">new</span> <span class="title class_">EnvironmentConverter</span>(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">                                                                                         deduceEnvironmentClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后再把环境信息合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConfigurationPropertySources.attach(environment);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>创建IOC容器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context = createApplicationContext();</span><br></pre></td></tr></table></figure>

<p>根据项目类型进行创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContextFactory</span> <span class="variable">DEFAULT</span> <span class="operator">=</span> (webApplicationType) -&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (webApplicationType) &#123;</span><br><span class="line">      <span class="keyword">case</span> SERVLET:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">      <span class="keyword">case</span> REACTIVE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigReactiveWebServerApplicationContext</span>();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unable create a default ApplicationContext instance, &quot;</span></span><br><span class="line">                                    + <span class="string">&quot;you may need a custom ApplicationContextFactory&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ConfigurableApplicationContext <span class="title function_">create</span><span class="params">(WebApplicationType webApplicationType)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备IOC容器上下文信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>org.springframework.boot.SpringApplication#prepareContext</p>
</blockquote>
<ul>
<li><p>保存前面准备好的基础环境到容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.setEnvironment(environment);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在这一步之前，IOC默认配置都准备得差不多了，这一步的目的是使用<code>ApplicationContextInitializer</code>来对进行扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyInitializers</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (ApplicationContextInitializer initializer : getInitializers()) &#123;</span><br><span class="line">    Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(initializer.getClass(),</span><br><span class="line">                                                                    ApplicationContextInitializer.class);</span><br><span class="line">    Assert.isInstanceOf(requiredType, context, <span class="string">&quot;Unable to call initializer.&quot;</span>);</span><br><span class="line">    initializer.initialize(context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在容器准备完后再调用所有<code>SpringApplicationRunListener</code>中的<code>contextPrepared(context)</code>方法</p>
</li>
<li><p>获取Bean工厂，<strong>这个工厂是在容器new的过程中被初始化的，具体在<code>org.springframework.context.support.GenericApplicationContext#GenericApplicationContext()</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br></pre></td></tr></table></figure>
</li>
<li><p>将命令行参数组册到容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>org.springframework.boot.SpringApplication#prepareContext</code>这个方法准备完成之后再调用所有的监听器中的<code>contextLoaded(context)</code>方法。</p>
</li>
</ul>
</li>
<li><p>刷新容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建容器中的所有组件</li>
</ul>
</li>
<li><p>记录容器启动完成花费的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stopWatch.stop();</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器启动完成之后调用所有监听器的<code>started(context)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listeners.started(context);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用所有runners</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">callRunners(context, applicationArguments);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取容器中的<code>ApplicationRunner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取容器中的<code>CommandLineRunner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并所有runner并且安装<code>@Order</code>进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationAwareOrderComparator.sort(runners);</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历所有的runner调用<code>run</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object runner : <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(runners)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">    callRunner((ApplicationRunner) runner, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">    callRunner((CommandLineRunner) runner, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">callRunner</span><span class="params">(ApplicationRunner runner, ApplicationArguments args)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    (runner).run(args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Failed to execute ApplicationRunner&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>如果以上有异常，会调用所有监听器的<code>listeners.failed(context, exception);</code>方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;...&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">  handleRunFailure(context, ex, listeners);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有任何异常发生时，会调用所有监听器的running方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listeners.running(context);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果<code>listeners.running(context);</code>中有异常，会继续调用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handleRunFailure(context, ex, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>到此，SpringBoot启动成功</p>
</li>
</ul>
</li>
</ul>
<h2 id="自定义监听组件"><a href="#自定义监听组件" class="headerlink" title="自定义监听组件"></a>自定义监听组件</h2><h3 id="ApplicationContextInitializer"><a href="#ApplicationContextInitializer" class="headerlink" title="ApplicationContextInitializer"></a>ApplicationContextInitializer</h3><p>这需要到<code>spring.factories</code>中注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationContextInitializer</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Serializable</span>, ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;容器初始化...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">org.springframework.context.ApplicationContextInitializer=\</span></span><br><span class="line">  <span class="string">com.example.springapplication.listener.MyApplicationContextInitializer</span></span><br></pre></td></tr></table></figure>



<h3 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h3><p>这需要到<code>spring.factories</code>中注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, ApplicationListener&lt;ApplicationEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6443715384736562018L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyApplicationListener： 绑定事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">org.springframework.context.ApplicationListener=\</span></span><br><span class="line">  <span class="string">com.example.springapplication.listener.MyApplicationListener</span></span><br></pre></td></tr></table></figure>



<h3 id="SpringApplicationRunListener"><a href="#SpringApplicationRunListener" class="headerlink" title="SpringApplicationRunListener"></a>SpringApplicationRunListener</h3><p>这需要到<code>spring.factories</code>中注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, SpringApplicationRunListener &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8494070955501588597L</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> SpringApplication app;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MySpringApplicationRunListener</span><span class="params">(SpringApplication app, String[] args)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.app = app;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;MySpringApplicationRunListener starting方法执行&quot;</span>);</span><br><span class="line">    SpringApplicationRunListener.<span class="built_in">super</span>.starting(bootstrapContext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext,</span></span><br><span class="line"><span class="params">                                  ConfigurableEnvironment environment)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;MySpringApplicationRunListener environmentPrepared方法执行&quot;</span>);</span><br><span class="line">    SpringApplicationRunListener.<span class="built_in">super</span>.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">  com.example.springapplication.listener.MySpringApplicationRunListener</span><br></pre></td></tr></table></figure>





<h3 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h3><p>在底层<code>ApplicationRunner</code>是从容器中获取，所以需要注册到容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationRunner <span class="title function_">applicationRunner</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> args -&gt; log.info(<span class="string">&quot;applicationRunner runner...执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; log.info(<span class="string">&quot;commandLineRunner run...执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot核心功能 - 学习笔记</title>
    <url>/2022/01/02/Spring-Boot%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>与之前使用<code>properties</code>文件的用法一致</p>
<h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>YAML是<code>YAML Ain&#39;t markup Language</code> 的递归缩写。在开发这种语言时，YAML的意思是<code>Yet Another Markup Language</code>。</p>
<p>非常适合用来做以数据为中心的配置文件</p>
<h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><ul>
<li><code>key: value</code>kv之间有空格</li>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用<strong>tab</strong>，只允许空格</li>
<li>缩进的空格数不重要，只要在相同层级的元素左对齐即可</li>
<li><code>#</code>表示注释</li>
<li>字符串无需加引号，如果需要，<code>&#39;&#39;</code>与<code>&quot;&quot;</code>表示字符串内容，会被转义&#x2F;不转义</li>
</ul>
<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ul>
<li><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>对象：简直对的集合，map、hash、set、object</p>
<ul>
<li><p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>普通写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> </span><br><span class="line">	<span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">	<span class="attr">k2:</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>数组： 一组按次序排列的值，array、list、queue</p>
<ul>
<li><p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>, <span class="string">v2</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>普通写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> </span><br><span class="line">	<span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>使用一个<code>Person</code>组件绑定对应配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7514130876563463491L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] interest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我习惯了JSON的写法，发现它也支持，那就这样用叭～</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">person:</span> &#123;</span><br><span class="line">    <span class="attr">name:</span> <span class="number">2</span>,</span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span>,</span><br><span class="line">    <span class="attr">interest:</span> [ <span class="string">女</span> ],</span><br><span class="line">    <span class="attr">map:</span> &#123;</span><br><span class="line">      <span class="attr">map1:</span> <span class="string">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查<code>Person</code>容器是否正常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(Example.class, args);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> app.getBean(Person.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; _   _     __   __          \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;| | | |_ __\\ \\ / /__  _   _ \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;| | | | &#x27;_ \\\\ V / _ \\| | | |\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;| |_| | |_) || | (_) | |_| |\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \\___/| .__(_)_|\\___/ \\__,_|\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      |_|                   &quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出：<code>Person(name=2, interest=[女], age=18, map=&#123;map1=value&#125;)</code></p>
<h3 id="自定义类绑定的配置提示"><a href="#自定义类绑定的配置提示" class="headerlink" title="自定义类绑定的配置提示"></a>自定义类绑定的配置提示</h3><p>有没有发现我们写的配置都没得提示？而且绑定类顶部还有一个提示框消不掉。</p>
<p>需要添加<code>spring-boot-configuration-processor</code>依赖，添加完依赖之后就可以了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个插件其实只是在我们开发的时候有帮助，而在生产环境是无用的，还会让JVM启动时加载无用的依赖导致耗时过长。可以在<code>pom.xml</code>文件中将开发环境下才有效的依赖配置为不参与打包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">          ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h3 id="简单功能分析"><a href="#简单功能分析" class="headerlink" title="简单功能分析"></a>简单功能分析</h3><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><h5 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h5><p>SpringBoot的静态资源是在当前项目的类路径下 <code>/static</code> 、 <code>/public</code> 、 <code>/resources</code> 、 <code>/META-INF/resources</code>，如果资源在规定的目录下，SpringBoot可以直接访问到这些目录中的资源文件。</p>
<p>例如我在<code>/resources/static</code>文件夹下有一张图片，使用浏览器请求看看能不能直接访问这张图片</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049118.png" alt="项目结构"></p>
<p>没毛病</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271052434.png" alt="测试结果"></p>
<h5 id="静态资源访问原理"><a href="#静态资源访问原理" class="headerlink" title="静态资源访问原理"></a>静态资源访问原理</h5><p>例如我们有一个请求与静态资源文件的路径一致，那么请求的时候是将静态资源文件返回还是处理对应请求呢：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/back.jpeg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResource</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当浏览器访问<code>/back.jpeg</code>的时候，响应了’Hello’字符串。</p>
<p>静态资源映射路径是<code>/**</code>，而请求进来的时候，是先去找<code>Controller</code>看能不能处理这个请求，如果不能则交给静态资源处理器。如果都找不到，则返回<strong>404</strong></p>
<h5 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h5><p>静态资源访问默认是无前缀的，如果通过拦截器，例如登录拦截器，可能会拦截到静态资源文件，所以我们需要给静态资源指定一个前缀，这样拦截器就可以很方便的将静态资源过滤。</p>
<p>只需要在配置文件中配置<code>spring.mvc.static-path-pattern</code>就可以，默认是<code>/**</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/static/**</span></span><br></pre></td></tr></table></figure>



<h5 id="静态资源路径修改"><a href="#静态资源路径修改" class="headerlink" title="静态资源路径修改"></a>静态资源路径修改</h5><p>SpringBoot默认的静态资源路径是在类路径下，如果不需要使用默认的设置，也可以通过配置文件进行修改，它可以是一个数组，因为静态资源路径他是多个的。 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> <span class="string">classpath:/ctong/</span></span><br></pre></td></tr></table></figure>



<h5 id="欢迎页配置"><a href="#欢迎页配置" class="headerlink" title="欢迎页配置"></a>欢迎页配置</h5><ul>
<li>将<code>index.html</code>文件放在静态资源路径下<ul>
<li>如果配置了静态资源路径前缀，会导致欢迎页的配置无法使用</li>
<li>可以配置静态资源路径</li>
</ul>
</li>
<li>在<code>controller</code>中处理<code>/index</code>请求，他会被当成静态页显示出来。</li>
</ul>
<h5 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h5><p>如果需要更换Favicon，则需要将对应的文件放到静态资源目录下，名字必须是<code>favicon.ico</code>，SpringBoot会默认将它设置为网页的icon。</p>
<blockquote>
<p>如果设置了静态资源路径前缀，那么favicon将不会生效。</p>
</blockquote>
<h5 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h5><ul>
<li><p>SpringBoot启动默认加载<code>xxxAutoConfiguration</code>「自动配置类」</p>
</li>
<li><p>SpringMVC功能配置类<code>WebMvcAutoConfiguration</code>，检查该配置类是否生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给容器配了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class,</span></span><br><span class="line"><span class="meta">		org.springframework.boot.autoconfigure.web.ResourceProperties.class, WebProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件的相关属性和<code>WebMvcProperties</code>、<code>ResourceProperties</code>、<code>WebProperties</code>，进行了绑定</p>
</li>
</ul>
<h6 id="资源处理默认规则核心代码"><a href="#资源处理默认规则核心代码" class="headerlink" title="资源处理默认规则核心代码"></a><strong>资源处理默认规则核心代码</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">  <span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">  addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">  addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">    registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">      registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(servletContext, SERVLET_LOCATION));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果以下代码为<code>false</code>，那么禁用所有默认规则，一旦禁用，所有静态资源无法访问，它对应了<code>spring.resources.add-mappings</code>配置 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!<span class="built_in">this</span>.resourceProperties.isAddMappings()</span><br></pre></td></tr></table></figure>

<p>以下代码是注册<strong>wenjars</strong>路径的默认规则，只要前缀为<code>/webjars/**</code>那么都去指定目录中找<code>classpath:/META-INF/resources/webjars/</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>这才是我们资源路径的默认规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">  registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">  <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">    registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(servletContext, SERVLET_LOCATION));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其实就是获取到配置文件中我们自定义的资源路径前缀<code>/static/**</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.mvcProperties.getStaticPathPattern()</span><br></pre></td></tr></table></figure>

<p>这段代码是获取到配置文件中的资源文件路径<code>classpath:/ctong/</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.resourceProperties.getStaticLocations()</span><br></pre></td></tr></table></figure>

<p>其实就是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addResourceHandler(registry, <span class="string">&quot;/static/**&quot;</span>, <span class="string">&quot;classpath:/resources/ctong/&quot;</span>);</span><br></pre></td></tr></table></figure>





<h6 id="欢迎页的处理规则"><a href="#欢迎页的处理规则" class="headerlink" title="欢迎页的处理规则"></a><strong>欢迎页的处理规则</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span><br><span class="line"><span class="params">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">  <span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">    <span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">  welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">  welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">  <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>welcomePage != null &amp;&amp; &quot;/**&quot;.equals(staticPathPattern)</code>解释了我们修改资源路径前缀时为何欢迎页失效的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;</span><br><span class="line">  <span class="keyword">if</span> (welcomePage != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">    setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">    setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>如果我们看一个配置文件，那么一定要看它是否生效</p>
</li>
<li><p>配置类只有一个有参构造器，有参构造器中所有参数的值都会从容器中确定。</p>
</li>
</ul>
</blockquote>
<h2 id="请求参数处理"><a href="#请求参数处理" class="headerlink" title="请求参数处理"></a>请求参数处理</h2><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><ul>
<li><code>@xxxMapping</code>，经常使用<code>@RequestMapping</code></li>
<li><code>Rest</code>风格支持「使用HTTP请求方式动词来表示对资源的操作」<ul>
<li>以前<code>/getUser</code>获取用户<code>/deleteUser</code>删除用户，<code>/saveUser</code>保存用户</li>
<li>现在<code>/user</code>GET-获取用户 DELETE-删除用户 PUT-修改用户 POST-保存用户</li>
</ul>
</li>
</ul>
<p>如果需要使用<code>Rest</code>风格的请求，那么必须发起<code>POST</code>,并且携带一个隐藏参数<code>_method</code>，这个参数值为<code>PUT</code>、<code>DELETE</code>。</p>
<p>当你测试发起<code>Rest</code>风格请求时，发现并没有效果。查看检查映射处理源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code>很显然我们并没有配置，所以这个是生效的。</p>
<p><code>@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</code>，<code>enabled</code>翻译为启用的意思，<code>matchIfMissing</code>为<code>false</code>，所以我们请求没生效的原因是<code>Rest</code>请求被禁用了。</p>
<h4 id="Rest原理"><a href="#Rest原理" class="headerlink" title="Rest原理"></a>Rest原理</h4><p>直接上源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">  <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">HttpServletRequest</span> <span class="variable">requestToUse</span> <span class="operator">=</span> request;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">      <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">        requestToUse = <span class="keyword">new</span> <span class="title class_">HttpMethodRequestWrapper</span>(request, method);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查当前请求参数是否为<code>POST</code>，并且当前请求是否存在错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="literal">null</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>获取指定参数，<code>this.methodParam</code>其实就是<code>_method</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br></pre></td></tr></table></figure>

<p>检查该参数是否不为空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (StringUtils.hasLength(paramValue)) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>无论是小写还是大些，全部转为大些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br></pre></td></tr></table></figure>

<p>检查是否兼容当前请求方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =</span><br><span class="line">      Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),</span><br><span class="line">            HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br></pre></td></tr></table></figure>

<p>这里重新包装了一下<code>HttpServletRequest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">requestToUse = <span class="keyword">new</span> <span class="title class_">HttpMethodRequestWrapper</span>(request, method);</span><br></pre></td></tr></table></figure>

<p>因为它是以<code>POST</code>的方式请求进来的，所以<code>HttpServletReqest</code>提供的<code>getMethod</code>方法获取的是一个<code>POST</code>而不是对应的<code>PUT</code>、<code>DELETE</code>，所以需要重新将<code>method</code>改成对应的请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(request);</span><br><span class="line">    <span class="built_in">this</span>.method = method;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.method;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后放行了过滤器链<code>wrapper</code>，以后我们开发使用<code>Rest</code>风格请求时，<code>HttpServletRequest</code>其实是<code>SpringBoot</code>给我们包装的。</p>
<p><code>filterChain.doFilter(requestToUse, response);</code></p>
<h4 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h4><p>SpringBoot处理请求是在<code>DispatcherServlet</code> <code>FrameworkServlet</code> <code>HttpServlet</code></p>
<p>在<code>processRequest</code>方法中处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Process this request, publishing an event regardless of the outcome.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> #doService&#125; template method.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">  <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">  <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">  <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">  <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">  <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">  <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">  asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">  initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doService(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">    failureCause = ex;</span><br><span class="line">    <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    failureCause = ex;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">    <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">      requestAttributes.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">    logResult(request, response, failureCause, asyncManager);</span><br><span class="line">    publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>try</code>中又调用了<code>doService</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class="doctag">@link</span> #doDispatch&#125;</span></span><br><span class="line"><span class="comment">	 * for the actual dispatching.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  logRequest(request);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">  <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">  Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">    attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">    <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">        attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">  request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">  request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">  request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">  request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">    <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">      request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">    request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">RequestPath</span> <span class="variable">previousRequestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath) &#123;</span><br><span class="line">    previousRequestPath = (RequestPath) request.getAttribute(ServletRequestPathUtils.PATH_ATTRIBUTE);</span><br><span class="line">    ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doDispatch(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">      <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">      <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">        restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ServletRequestPathUtils.setParsedRequestPath(previousRequestPath, request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个方法中又有一个<code>doDispatch</code>方法，这个才是最核心的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Process the actual dispatching to the handler.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The handler will be obtained by applying the servlet&#x27;s HandlerMappings in order.</span></span><br><span class="line"><span class="comment">	 * The HandlerAdapter will be obtained by querying the servlet&#x27;s installed HandlerAdapters</span></span><br><span class="line"><span class="comment">	 * to find the first that supports the handler class.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;All HTTP methods are handled by this method. It&#x27;s up to HandlerAdapters or handlers</span></span><br><span class="line"><span class="comment">	 * themselves to decide which methods are acceptable.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">  <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      processedRequest = checkMultipart(request);</span><br><span class="line">      multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">      mappedHandler = getHandler(processedRequest);</span><br><span class="line">      <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">        noHandlerFound(processedRequest, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">      <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">      <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">      mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      applyDefaultViewName(processedRequest, mv);</span><br><span class="line">      mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      dispatchException = ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">      <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">      <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">      dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">    triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                           <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">      <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">      <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">      <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">        cleanupMultipart(processedRequest);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>org.springframework.web.servlet.DispatcherServlet -&gt; doDispatch()</p>
</blockquote>
<p>查找哪个<code>Controller</code>能处理当前请求，<code>com.upyou.hall.controller.HelloController#saveUser()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure>

<p>进到这个方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line">      <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line">      <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现有一个<code>this.handlerMappings</code>，这个属性保存的是请求的映射规则。其中<code>RequestMappingHandlerMapping</code> 就保存了所有<code>@RequestMapping</code>和<code>handler</code>的映射规则。<img src="http://qiniu-note-image.ctong.top/note/images/202112271049137.png" alt="handlerMapping"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049148.png" alt="所有请求路径"></p>
<p>进入<code>mapping.getHandler(request);</code> -&gt;&gt; <code>getHandlerInternal(request);</code> -&gt;&gt; <code>super.getHandlerInternal(request);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Look up a handler method for the given request.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">lookupPath</span> <span class="operator">=</span> initLookupPath(request);</span><br><span class="line">  <span class="built_in">this</span>.mappingRegistry.acquireReadLock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> lookupHandlerMethod(lookupPath, request);</span><br><span class="line">    <span class="keyword">return</span> (handlerMethod != <span class="literal">null</span> ? handlerMethod.createWithResolvedBean() : <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mappingRegistry.releaseReadLock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拿到当前请求的路径<code>/user</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lookupPath</span> <span class="operator">=</span> initLookupPath(request);</span><br></pre></td></tr></table></figure>

<p>防止并发请求查询<code>mappingRegistry</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.mappingRegistry.acquireReadLock();</span><br></pre></td></tr></table></figure>

<p>进入<code>HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  List&lt;Match&gt; matches = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  List&lt;T&gt; directPathMatches = <span class="built_in">this</span>.mappingRegistry.getMappingsByDirectPath(lookupPath);</span><br><span class="line">  <span class="keyword">if</span> (directPathMatches != <span class="literal">null</span>) &#123;</span><br><span class="line">    addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (matches.isEmpty()) &#123;</span><br><span class="line">    addMatchingMappings(<span class="built_in">this</span>.mappingRegistry.getRegistrations().keySet(), matches, request);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!matches.isEmpty()) &#123;</span><br><span class="line">    <span class="type">Match</span> <span class="variable">bestMatch</span> <span class="operator">=</span> matches.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      Comparator&lt;Match&gt; comparator = <span class="keyword">new</span> <span class="title class_">MatchComparator</span>(getMappingComparator(request));</span><br><span class="line">      matches.sort(comparator);</span><br><span class="line">      bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(matches.size() + <span class="string">&quot; matching mappings: &quot;</span> + matches);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Match match : matches) &#123;</span><br><span class="line">          <span class="keyword">if</span> (match.hasCorsConfig()) &#123;</span><br><span class="line">            <span class="keyword">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Match</span> <span class="variable">secondBestMatch</span> <span class="operator">=</span> matches.get(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> bestMatch.getHandlerMethod().getMethod();</span><br><span class="line">          <span class="type">Method</span> <span class="variable">m2</span> <span class="operator">=</span> secondBestMatch.getHandlerMethod().getMethod();</span><br><span class="line">          <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">            <span class="string">&quot;Ambiguous handler methods mapped for &#x27;&quot;</span> + uri + <span class="string">&quot;&#x27;: &#123;&quot;</span> + m1 + <span class="string">&quot;, &quot;</span> + m2 + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.getHandlerMethod());</span><br><span class="line">    handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line">    <span class="keyword">return</span> bestMatch.getHandlerMethod();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> handleNoMatch(<span class="built_in">this</span>.mappingRegistry.getRegistrations().keySet(), lookupPath, request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>lookupPath</code>在<code>mappingRegistry</code>中找能够处理这个路径的<code>handler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;T&gt; directPathMatches = <span class="built_in">this</span>.mappingRegistry.getMappingsByDirectPath(lookupPath);</span><br></pre></td></tr></table></figure>

<p>发现它找到了两个，同路径但不同的请求类型</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049142.png" alt="mappingRegistry查询结果"></p>
<p>其实就是通过请求方式和路径参数在<code>RequestMapping</code>中找到对应的<code>Mapping</code>添加到<code>matches</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addMatchingMappings(directPathMatches, matches, request);</span><br></pre></td></tr></table></figure>

<p>如果无法在<code>RequestMapping</code>中找到，再通过请求方式和路径参数找所有HandlerMapping，如果找到则将其添加到<code>matches</code>中，这所有包括了资源路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addMatchingMappings(<span class="built_in">this</span>.mappingRegistry.getRegistrations().keySet(), matches, request);</span><br></pre></td></tr></table></figure>

<p>拿到第一个<code>Mapping</code>,因为这极有可能是最适合处理当前请求的<code>Mapping</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Match</span> <span class="variable">bestMatch</span> <span class="operator">=</span> matches.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>当匹配到多个结果之后，检查是不是同个请求方式、路径注册了两个处理器，如果是则抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>SpringBoot默认配置了<code>RequestMappingHandlerMapping</code></li>
</ul>
<h3 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h3><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>  <code>@PathVariable</code> <code>@RequestHeader</code> <code>@ModelAttribute</code> <code>@RequestParam</code> <code>@MatrixVariable</code> <code>@CookieValue</code> <code>@RequestBody</code></p>
<h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><p>获取动态径上的数据<br>  <code>@RequestParam(&quot;id&quot;)、@RequestParam(&quot;token&quot;)</code>分别是获取 <code>&#123;id&#125;</code> <code>&#123;token&#125;</code>位置的值，也就是说他们是动态的，</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index/&#123;id&#125;/get/&#123;token&#125;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">handleHallo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@PathVariable(&quot;token&quot;)</span> String token)</span> &#123;</span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">  map.put(<span class="string">&quot;map&quot;</span>, id);</span><br><span class="line">  map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  请求<code>localhost:8888/index/1024/get/2048/info</code></p>
<p>  结果</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1024&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2048&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><p>获取指定请求头</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleHallo</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> userAgent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  输出<code>PostmanRuntime/7.26.10</code></p>
<p>  如果被标注的类型为<code>java.util.Map、org.springframework.util.MultiValueMap、org.springframework.http.HttpHeaders</code>那么SpringBoot可以给你拿到所有的请求头</p>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>获取请求参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleHallo</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  请求<code>localhost:8888/index?userName=UpYou</code></p>
<p>  输出：<strong>UpYou</strong></p>
<p>  如果<code>@RequestParam</code>没有指定获取那个参数，并且被标注的类型为<code>Map&lt;String, String&gt;</code>，该变量将拿到所有的请求参数</p>
<h4 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><p>获取<code>cookie</code><br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleHallo</span><span class="params">(<span class="meta">@CookieValue(&quot;token&quot;)</span> String token)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  如果被标注的类型是<code>Cookie</code>，那么它将获取指定cookie的所有信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CookieValue(&quot;token&quot;)</span> Cookie token</span><br></pre></td></tr></table></figure>

<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>获取球体「POST」</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleHallo</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UpYou&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h4><p>获取到当前请求的域对象中的指定属性</p>
<p>  做一个请求，在这个请求中设置域对象的属性，然后转发到<code>/success</code>请求中处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8638687587976398521L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HelloController</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">handleHallo</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toDo</span><span class="params">(<span class="meta">@RequestAttribute(&quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  输出结果<code>UpYou</code></p>
<h4 id="MatrixVariable"><a href="#MatrixVariable" class="headerlink" title="@MatrixVariable"></a>@MatrixVariable</h4><p>矩阵变量，它绑定在路径变量中。<br>  <code>/xxx/&#123;path&#125;?xxx=xxx&amp;xxx=xxx</code>这个叫做查询字符串，可以使用<code>@RequestParam</code>获取</p>
<p>  <code>/xxx/&#123;path;low=34;brand=byd,audi,yd&#125;</code>这个是矩阵变量</p>
<blockquote>
<p>例如前端cookie被禁用了，session里面的内容怎么使用 ，这时候可以使用矩阵变量进行传递：<code>/xxx;jsessionid=xxx</code></p>
</blockquote>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get/sell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">index</span><span class="params">(<span class="meta">@MatrixVariable(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(&quot;name&quot;)</span> List&lt;String&gt; name)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">    map.put(<span class="string">&quot;brand&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  请求<code>/get/sell;age=18;name=UpYou,ctong</code></p>
<p>  报错了，原因是SpringBoot默认禁用了矩阵变量，需要手动开启。</p>
<p>  这种情况下需要定制化开启，SpringBoot提供了两种方式</p>
<p>  <strong>第一种</strong><br>  声明<code>WebMvcConfigurer</code>改变默认底层组件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span></span><br><span class="line">  <span class="keyword">implements</span> <span class="title class_">Serializable</span>, WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3281050128601582429L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WebConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启矩阵变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configurer 路径匹配规则配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">    <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">    <span class="comment">// 设置不移除分号后边的内容</span></span><br><span class="line">    urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">    configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  <strong>第二种</strong></p>
<p>  组册<code>WebMvcConfigurer</code>类型的组件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">      <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">      urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">      configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>  开启矩阵变量之后，重新请求发现变成了404，原因是<code>@GetMapping(&quot;/get/sell&quot;)</code><strong>不能直接写sell</strong>，需要写成路径变量的形式。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get/&#123;path&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">matrix</span><span class="params">(<span class="meta">@MatrixVariable(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@MatrixVariable(&quot;name&quot;)</span> List&lt;String&gt; name,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">    map.put(<span class="string">&quot;brand&quot;</span>, name);</span><br><span class="line">    map.put(<span class="string">&quot;path&quot;</span>, path);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  输出<code>&#123;&quot;brand&quot;:[&quot;UpYou&quot;,&quot;ctong&quot;],&quot;path&quot;:&quot;sell&quot;,&quot;age&quot;:18&#125;</code></p>
<p>  如果你遇到了这种路径：<code>/get/1;age=18/2;age=18</code>一个路径中有多个相同矩阵变量。这时候需要使用<code>@MatrixVariable</code>提供的<code>pathVar</code>参数指定路径</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get/&#123;path&#125;/&#123;boss&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">matrixTwo</span><span class="params">(<span class="meta">@PathVariable(&quot;path&quot;)</span> String path,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@PathVariable(&quot;boss&quot;)</span> String boss,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;path&quot;)</span> Integer pathAge,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;boss&quot;)</span> Integer bossAge)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pathAge&quot;</span>, pathAge);</span><br><span class="line">    map.put(<span class="string">&quot;bossAge&quot;</span>, bossAge);</span><br><span class="line">    map.put(<span class="string">&quot;path&quot;</span>, path);</span><br><span class="line">    map.put(<span class="string">&quot;boss&quot;</span>, boss);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  输出： <code>&#123;&quot;pathAge&quot;:18,&quot;path&quot;:&quot;path&quot;,&quot;boss&quot;:&quot;boss&quot;,&quot;bossAge&quot;:48&#125;</code></p>
<h4 id="各种参数类型解析原理"><a href="#各种参数类型解析原理" class="headerlink" title="各种参数类型解析原理"></a>各种参数类型解析原理</h4><blockquote>
<p>如果需要查看路径请求处理原理，可以到<code> org.springframework.web.servlet.DispatcherServlet</code>下查看，这是处理请求的入口</p>
</blockquote>
<p>走到<code>DispatcherServlet</code>&#x3D;&#x3D;&gt; <code>doDispatch</code> </p>
<p>找到能处理该请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure>

<p>由于SpringBoot底层需要使用反射机制去调用这个方法，而方法中有各种各样的注解、请求参数，例如<code>PathVariable</code>，<code>@RequestParam</code>等，由于该步骤非常麻烦，所以需要为当前Handler找一个适配器<code>HandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>

<p>在getHandlerAdapter方法中，SpringBoot默认为我们提供了四种适配器。分别用来完成不同的功能。</p>
<ol>
<li>支持<code>@RequestMapping</code></li>
<li>支持函数式编程</li>
</ol>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049154.png" alt="适配器"></p>
<p>匹配支持的<code>Handler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (HandlerAdapter adapter : <span class="built_in">this</span>.handlerAdapters) &#123;</span><br><span class="line">   <span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后通过适配器去处理这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>

<h4 id="参数处理器"><a href="#参数处理器" class="headerlink" title="参数处理器"></a>参数处理器</h4><p>进入<code>ha.handle</code>，这一段，执行目标方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br></pre></td></tr></table></figure>

<p>再进入<code>invokeHandlerMethod</code> </p>
<p>这是一个参数解析器，将来目标参数值是什么，全都是由这些参数解析器来决定，例如参数标注了<code>@RequestParam</code>，那么就使用图中第一个解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>SpringBootMVC目标方法能写多少种参数类型，全部取决于参数解析器。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049158.png" alt="参数解析器"></p>
<p><code>supportsParameter</code>检查是否支持解析这种参数，如果支持就调用<code>resolveArgument</code>进行解析处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">         NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="返回值处理器"><a href="#返回值处理器" class="headerlink" title="返回值处理器"></a>返回值处理器</h4><p>这是得到返回值支持的处理器，也就是说，SpringBoot会工具反射去调用对应的方法，这会得到一个返回值，那么会通过这个返回值进行处理，处理完之后返回给客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) &#123;</span><br><span class="line">  invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="执行处理器"><a href="#执行处理器" class="headerlink" title="执行处理器"></a>执行处理器</h4><p>在这开始执行对应的方法，可以在我们目标方法与<code>invokeAndHandle</code>方法中打一个断点，当<code>invokeAndHandle</code>执行放行之后开始执行目标方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br></pre></td></tr></table></figure>

<p>进到<code>invokeAndHandle</code>，在这才是真正的执行，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>

<p>进<code>invokeForRequest</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                               Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">&quot;Arguments: &quot;</span> + Arrays.toString(args));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取方法所有参数的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049358.png" alt="方法所有参数值"></p>
<h5 id="如何确定目标方法每一个参数值"><a href="#如何确定目标方法每一个参数值" class="headerlink" title="如何确定目标方法每一个参数值"></a>如何确定目标方法每一个参数值</h5><p><code>org.springframework.web.method.support.InvocableHandlerMethod</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">                                           Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">  <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">    <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">    <span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];</span><br><span class="line">    parameter.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">    args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">    <span class="keyword">if</span> (args[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exMsg</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span> (exMsg != <span class="literal">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">          logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到所有参数的详细信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br></pre></td></tr></table></figure>

<p>查找是否有解析器支持解析当前这种类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入<code>supportsParameter</code> &#x3D;&#x3D;&gt; <code>getArgumentResolver</code></p>
<p>判断方式是通过<code>for</code>循环来进行逐个对比得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title function_">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">   <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">   <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="built_in">this</span>.argumentResolvers) &#123;</span><br><span class="line">         <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">            result = resolver;</span><br><span class="line">            <span class="built_in">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="解析这个参数的值"><a href="#解析这个参数的值" class="headerlink" title="解析这个参数的值"></a>解析这个参数的值</h5><p>通过得到的解析器来解析这个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br></pre></td></tr></table></figure>

<p>进入<code>resolveArgument</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                              NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getArgumentResolver(parameter);</span><br><span class="line">  <span class="keyword">if</span> (resolver == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported parameter type [&quot;</span> +</span><br><span class="line">                                       parameter.getParameterType().getName() + <span class="string">&quot;]. supportsParameter should be called first.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取参数解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HandlerMethodArgumentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getArgumentResolver(parameter);</span><br></pre></td></tr></table></figure>

<p>使用了<code>resolver.resolveArgument</code>进行解析</p>
<p>进入<code>resolveArgument</code></p>
<p>拿到当前参数的基本信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NamedValueInfo</span> <span class="variable">namedValueInfo</span> <span class="operator">=</span> getNamedValueInfo(parameter);</span><br><span class="line"><span class="type">MethodParameter</span> <span class="variable">nestedParameter</span> <span class="operator">=</span> parameter.nestedIfOptional();</span><br></pre></td></tr></table></figure>

<p>通过对应的解析器获取对应值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">arg</span> <span class="operator">=</span> resolveName(resolvedName.toString(), nestedParameter, webRequest);</span><br></pre></td></tr></table></figure>

<p>进入<code>resolveName</code></p>
<blockquote>
<p>注意，这是一个<code>PathVariableMethodArgumentResolver</code>解析器，其它解析器基本也是这种操作</p>
</blockquote>
<p>由于之前已经将请求参数放进请求域中，所以这里直接从请求域中拿了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">resolveName</span><span class="params">(String name, MethodParameter parameter, NativeWebRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  Map&lt;String, String&gt; uriTemplateVars = (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class="line">    HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">  <span class="keyword">return</span> (uriTemplateVars != <span class="literal">null</span> ? uriTemplateVars.get(name) : <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后将设置好的值全部返回，执行<code>Handler</code></p>
<h3 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h3><p>WebRequest、ServletRequest、MultipartRequest、HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、Zoneld</p>
<blockquote>
<p><code>ServletRequestMethodArgumentResolve</code>解析器支持解析以上大部分参数</p>
</blockquote>
<h3 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h3><p>Map、Model、Errors&#x2F;BindingResult、RedirectAttributes、ServletResponse、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p>
<ul>
<li><p>如果给<code>Map、Model</code>放数据，会被默认存放在<code>request</code>请求域中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/params&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">params</span><span class="params">(Map&lt;String, Object&gt; map,</span></span><br><span class="line"><span class="params">                     Model model,</span></span><br><span class="line"><span class="params">                     HttpServletRequest request,</span></span><br><span class="line"><span class="params">                     HttpServletResponse response)</span> &#123;</span><br><span class="line">  map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">success</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">  HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  stringObjectHashMap.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">  stringObjectHashMap.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">  <span class="keyword">return</span> stringObjectHashMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出<code>&#123;&quot;name&quot;:&quot;UpYou&quot;,&quot;age&quot;:18&#125;</code></p>
<blockquote>
<p>Map类型的参数使用MapMethodProcessor解析器解析。这将会返回mavContainer.getModel() &#x3D;&#x3D;&gt;&gt; BindingAwareModelMap，它既是Model也是Map</p>
<p>Model类型与Map类型的处理都是一致的，最终调用的都是mavContainer.getModel()</p>
</blockquote>
</li>
<li><p><code>RedirectAttributes</code>重定向携带的数据</p>
</li>
</ul>
<h3 id="自定义类型参数绑定原理"><a href="#自定义类型参数绑定原理" class="headerlink" title="自定义类型参数绑定原理"></a>自定义类型参数绑定原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据绑定：页面提交的请求数据（GET、POST、PUT、DELETE）都可以和对象属性进行绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> person 请求数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 请求数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">saveUser</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7514130876563463491L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String[] interest;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2248757905577331865L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049496.png" alt="请求结果"></p>
<h4 id="POJO-封装过程"><a href="#POJO-封装过程" class="headerlink" title="POJO 封装过程"></a>POJO 封装过程</h4><p>自定义类型参数是通过<code>ServletModelAttributeMethodProcessor</code>参数解析器来进行解析的。</p>
<p>判断方式：判断当前类型是否为简单类型，如果不是，则支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||</span><br><span class="line">          (<span class="built_in">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSimpleProperty</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">  Assert.notNull(type, <span class="string">&quot;&#x27;type&#x27; must not be null&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> isSimpleValueType(type) || type.isArray() &amp;&amp; isSimpleValueType(type.getComponentType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSimpleValueType</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Void.class != type &amp;&amp; Void.TYPE != type &amp;&amp; (ClassUtils.isPrimitiveOrWrapper(type) || Enum.class.isAssignableFrom(type) || CharSequence.class.isAssignableFrom(type) || Number.class.isAssignableFrom(type) || Date.class.isAssignableFrom(type) || Temporal.class.isAssignableFrom(type) || URI.class == type || URL.class == type || Locale.class == type || Class.class == type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解析器调用<code>resolveArgument</code>方法对这个参数进行解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                    NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  Assert.state(mavContainer != <span class="literal">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class="line">  Assert.state(binderFactory != <span class="literal">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ModelFactory.getNameForParameter(parameter);</span><br><span class="line">  <span class="type">ModelAttribute</span> <span class="variable">ann</span> <span class="operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">  <span class="keyword">if</span> (ann != <span class="literal">null</span>) &#123;</span><br><span class="line">    mavContainer.setBinding(name, ann.binding());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">    attribute = mavContainer.getModel().get(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Create attribute instance</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BindException ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isBindExceptionRequired(parameter)) &#123;</span><br><span class="line">        <span class="comment">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class="line">      <span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class="line">        attribute = Optional.empty();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        attribute = ex.getTarget();</span><br><span class="line">      &#125;</span><br><span class="line">      bindingResult = ex.getBindingResult();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bindingResult == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Bean property binding and validation;</span></span><br><span class="line">    <span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line">    <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">    <span class="keyword">if</span> (binder.getTarget() != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">        bindRequestParameters(binder, webRequest);</span><br><span class="line">      &#125;</span><br><span class="line">      validateIfApplicable(binder, parameter);</span><br><span class="line">      <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(binder.getBindingResult());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line">    <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">      attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    bindingResult = binder.getBindingResult();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class="line">  Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">  mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">  mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果当前<code>request</code>容器中存在这个属性，则从容器中获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">  attribute = mavContainer.getModel().get(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>否则就将这个对象<code>new</code>出来<code>Person</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049672.png" alt="截屏2021-04-02 00.43.17"></p>
<p><code>WebDataBinder</code>是一个web数据绑定组件，将请求参数的值绑定到指定的<code>JavaBean</code>中，指定的<code>JavaBean</code>就是<code>attribute</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br></pre></td></tr></table></figure>

<p><code>WebDataBinder</code>利用它里面的<code>converters</code>将请求数据转换成指定的数据类型，再次封装到<code>JavaBean</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049686.png" alt="WebDataBinder结果"></p>
<p>将请求中的数据映射到<code>binder</code>中的<code>target</code>，也就是<code>attribute</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">   bindRequestParameters(binder, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049036.png" alt="数据映射到attribute"></p>
<p>映射值的源码在<code>org.springframework.beans.AbstractPropertyAccessor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyValues</span><span class="params">(PropertyValues pvs, <span class="type">boolean</span> ignoreUnknown, <span class="type">boolean</span> ignoreInvalid)</span></span><br><span class="line">  <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;PropertyAccessException&gt; propertyAccessExceptions = <span class="literal">null</span>;</span><br><span class="line">  List&lt;PropertyValue&gt; propertyValues = (pvs <span class="keyword">instanceof</span> MutablePropertyValues ?</span><br><span class="line">                                        ((MutablePropertyValues) pvs).getPropertyValueList() : Arrays.asList(pvs.getPropertyValues()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ignoreUnknown) &#123;</span><br><span class="line">    <span class="built_in">this</span>.suppressNotWritablePropertyException = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (PropertyValue pv : propertyValues) &#123;</span><br><span class="line">      <span class="comment">// setPropertyValue may throw any BeansException, which won&#x27;t be caught</span></span><br><span class="line">      <span class="comment">// here, if there is a critical failure such as no matching field.</span></span><br><span class="line">      <span class="comment">// We can attempt to deal only with less serious exceptions.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        setPropertyValue(pv);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (NotWritablePropertyException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ignoreUnknown) &#123;</span><br><span class="line">          <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Otherwise, just ignore it and continue...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (NullValueInNestedPathException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ignoreInvalid) &#123;</span><br><span class="line">          <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Otherwise, just ignore it and continue...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (PropertyAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (propertyAccessExceptions == <span class="literal">null</span>) &#123;</span><br><span class="line">          propertyAccessExceptions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        propertyAccessExceptions.add(ex);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ignoreUnknown) &#123;</span><br><span class="line">      <span class="built_in">this</span>.suppressNotWritablePropertyException = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we encountered individual exceptions, throw the composite exception.</span></span><br><span class="line">  <span class="keyword">if</span> (propertyAccessExceptions != <span class="literal">null</span>) &#123;</span><br><span class="line">    PropertyAccessException[] paeArray = propertyAccessExceptions.toArray(<span class="keyword">new</span> <span class="title class_">PropertyAccessException</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PropertyBatchUpdateException</span>(paeArray);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义Converter原理"><a href="#自定义Converter原理" class="headerlink" title="自定义Converter原理"></a>自定义Converter原理</h4><p>使用<strong>WebMVC</strong>拓展的方式添加&#x2F;修改配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3281050128601582429L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WebConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>WebMvcConfigurer</code>实现<code>addFormatters</code>方法添加<code>Converter</code></p>
<p>使用<code>FormattersRegister</code>提供的<code>addConverter</code>方法来添加</p>
<p><code>String source</code>这是前端传过来的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3281050128601582429L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WebConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;registry&quot;</span>);</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String, Pet&gt;() &#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> Pet <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如前端传了个<code>name=xxx,xxx,xxx</code>，其中<code>xxx,xxx,xxx</code>是数组，你需要根据你规定规则来进行解析，例如有这么一个实体：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2248757905577331865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>name</code>是数组的第一位，<code>age</code>是数组的第二位，而程序是不知道你的规则的，需要你自定义<code>Converter</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pet <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isEmpty(source)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">  String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">  pet.setAge(split[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="数据响应与内容协商"><a href="#数据响应与内容协商" class="headerlink" title="数据响应与内容协商"></a>数据响应与内容协商</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049041.png" alt="数据响应流程"></p>
<h4 id="响应JSON"><a href="#响应JSON" class="headerlink" title="响应JSON"></a>响应JSON</h4><p>如果想要响应JSON，可以使用web场景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>web场景默认帮我们引入了<code>json</code>场景<code>spring-boot-starter-json</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，有了以上场景就不代表我们每个请求都有了处理JSON的能力，需要配合<code>@ResponseBody</code>来进行使用。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseBodyController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3392266298591310673L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ResponseBodyController</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/get-person&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> Person <span class="title function_">getPerson</span><span class="params">()</span> &#123;</span><br><span class="line">		String[] likes = &#123;<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">    pet.setName(<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line"></span><br><span class="line">    person.setAge(<span class="number">18</span>);</span><br><span class="line">    person.setInterest(likes);</span><br><span class="line">    person.setName(<span class="string">&quot;UpYou&quot;</span>);</span><br><span class="line">    person.setPet(pet);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="返回值解析器"><a href="#返回值解析器" class="headerlink" title="返回值解析器"></a>返回值解析器</h5><p>在<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod()</code>方法中，使用返回值解析起来解析我们方法的返回值。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049264.png" alt="返回值解析器"></p>
<p>在<code>org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle()</code>方法中执行目标方法，得到该方法的返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>

<p>若返回值不是一个<strong>String&#x2F;null</strong>类型，则使用<code>this.returnValueHandlers.handleReturnValue</code>方法来进行处理返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">      returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br></pre></td></tr></table></figure>

<p>断点走到<code>this.returnValueHandlers.handleReturnValue</code>方法中…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">                              ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br><span class="line">  <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class="line">  &#125;</span><br><span class="line">  handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>selectHandler</code>来获取受支持的返回值处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br></pre></td></tr></table></figure>

<p>走到<code>selectHandler</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title function_">selectHandler</span><span class="params">(<span class="meta">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isAsyncValue</span> <span class="operator">=</span> isAsyncReturnValue(value, returnType);</span><br><span class="line">  <span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="built_in">this</span>.returnValueHandlers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查是否为异步返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isAsyncValue</span> <span class="operator">=</span> isAsyncReturnValue(value, returnType);</span><br></pre></td></tr></table></figure>

<p>遍历每个返回值处理器，检查哪个支持这种返回值类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="built_in">this</span>.returnValueHandlers) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class="line">    <span class="keyword">return</span> handler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是异步返回值，SpringBoot为提供能为其处理的处理器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断当前返回值处理器是否支持当前返回值，若当前处理器能够处理，则将其返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handler.supportsReturnType(returnType)</span><br></pre></td></tr></table></figure>

<p>拿到支持的处理器之后，调用该处理器的<code>handleReturnValue</code>方法处理返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br></pre></td></tr></table></figure>

<p>最终找到了<code>RequestResponseBodyMthodProcessor</code>。这个返回值解析器支持解析被标注了<code>@ResponseBody</code>的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">                              ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span><br><span class="line">  <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class="line"></span><br><span class="line">  mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">ServletServerHttpRequest</span> <span class="variable">inputMessage</span> <span class="operator">=</span> createInputMessage(webRequest);</span><br><span class="line">  <span class="type">ServletServerHttpResponse</span> <span class="variable">outputMessage</span> <span class="operator">=</span> createOutputMessage(webRequest);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">  writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拿到返回值解析器之后，使用消息转换器进行输出到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br></pre></td></tr></table></figure>

<p>在这个方法中，通过请求头<code>Accept</code> 匹配服务端能不能生产浏览器能处理的内容，浏览器通过指定请求头发送浏览器能处理的类型，其中<code>*/*</code>表示所有内容都能尝试处理。服务器会根据浏览器能处理的数据类型进行匹配，如果找到多个能处理的类型，则通过浏览器提供的类型权重进行匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">writeWithMessageConverters</span><span class="params">(<span class="meta">@Nullable</span> T value, MethodParameter returnType,</span></span><br><span class="line"><span class="params">			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span><br><span class="line">			<span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049460.png" alt="浏览器能支持的内容"></p>
<h4 id="消息转换器原理（HttpMssageConverter）"><a href="#消息转换器原理（HttpMssageConverter）" class="headerlink" title="消息转换器原理（HttpMssageConverter）"></a>消息转换器原理（HttpMssageConverter）</h4><h5 id="MessageConverter-规范"><a href="#MessageConverter-规范" class="headerlink" title="MessageConverter 规范"></a>MessageConverter 规范</h5><p><code>HttpMessageConverter</code>是一个规范消息转换器的一个接口</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049533.png" alt="HttpMssageConverter规范"></p>
<p><code>canRead</code>方法检查当前转换器是否能支持读取这个类型</p>
<p><code>canWrite</code>检查当前转换器是否支持写入这种类型</p>
<h5 id="默认MessageConverter"><a href="#默认MessageConverter" class="headerlink" title="默认MessageConverter"></a>默认MessageConverter</h5><p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049700.png" alt="SpringBoot默认的MessageConverter"></p>
<ol start="0">
<li><p>只支持Byte类型</p>
</li>
<li><p>只支持String类型</p>
</li>
<li><p>只支持String类型</p>
</li>
<li><p>只支持Resource类型</p>
</li>
<li><p>只支持ResourceRegion类型</p>
</li>
<li><p>Source支持以下类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DOMSource.class</span><br><span class="line">SAXSource.class</span><br><span class="line">StAXSource.class</span><br><span class="line">StreamSource.class</span><br><span class="line">Source.class</span><br></pre></td></tr></table></figure>
</li>
<li><p>AllEncompassing只支持MultiValueMap类型</p>
</li>
<li><p>支持所有类型，也就是<code>*/*</code></p>
</li>
<li><p>同上</p>
</li>
<li><p>支持注解XmlRootElement方式的xml</p>
</li>
</ol>
<p>当拿到匹配的转换器后，调用转换器中的<code>write</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="keyword">final</span> T t, <span class="meta">@Nullable</span> <span class="keyword">final</span> Type type, <span class="meta">@Nullable</span> MediaType contentType,</span></span><br><span class="line"><span class="params">                        HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> outputMessage.getHeaders();</span><br><span class="line">  addDefaultHeaders(headers, t, contentType);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (outputMessage <span class="keyword">instanceof</span> StreamingHttpOutputMessage) &#123;</span><br><span class="line">    <span class="type">StreamingHttpOutputMessage</span> <span class="variable">streamingOutputMessage</span> <span class="operator">=</span> (StreamingHttpOutputMessage) outputMessage;</span><br><span class="line">    streamingOutputMessage.setBody(outputStream -&gt; writeInternal(t, type, <span class="keyword">new</span> <span class="title class_">HttpOutputMessage</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> OutputStream <span class="title function_">getBody</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> outputStream;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> HttpHeaders <span class="title function_">getHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    writeInternal(t, type, outputMessage);</span><br><span class="line">    outputMessage.getBody().flush();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前转换器是一个支持Json的转换器，所以数据返回值时需要将请求头设置为<code>content-type: &#39;application/json&#39;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> outputMessage.getHeaders();</span><br><span class="line">addDefaultHeaders(headers, t, contentType);</span><br></pre></td></tr></table></figure>

<p>最后调用<code>writeInternal</code>方法，将返回数据写出去。</p>
<p>在<code>writeInternal</code>中，<code>objectWriter.writeValue</code>将数据转为json，<code>generator.flush();</code>将数据写到<code>outputMessage</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objectWriter.writeValue(generator, value);</span><br><span class="line">writeSuffix(generator, object);</span><br><span class="line">generator.flush();</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049909.png" alt="flush之后的Response"></p>
<h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><blockquote>
<p>根据客户端的接收能力不同，返回不同媒体类型的数据</p>
</blockquote>
<h5 id="引入xml依赖"><a href="#引入xml依赖" class="headerlink" title="引入xml依赖"></a>引入xml依赖</h5><p><strong>千万别指定版本，启动会报错</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;version&gt;2.12.3&lt;/version&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="测试返回json和xml"><a href="#测试返回json和xml" class="headerlink" title="测试返回json和xml"></a>测试返回json和xml</h5><p>只需要改变请求头中Accept字段，该字段是http协议中规定的，用于告诉服务器当前客户端可以接受处理的数据类型。</p>
<h5 id="内容协商-1"><a href="#内容协商-1" class="headerlink" title="内容协商"></a>内容协商</h5><p>主要逻辑在<code>org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters</code>方法中</p>
<ol>
<li><p>检查当前响应头中是否已经有媒体类型<code>MediaType</code>，这个媒体类型可能是在自定义拦截器中被设置的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MediaType</span> <span class="variable">selectedMediaType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">MediaType</span> <span class="variable">contentType</span> <span class="operator">=</span> outputMessage.getHeaders().getContentType();</span><br></pre></td></tr></table></figure>


</li>
<li><p>获取客户端支持的类型，也就是请求头<code>Accept</code>中的内容例如<code>application/xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br></pre></td></tr></table></figure>


</li>
<li><p>循环当前系统所有的<code>MessageConverter</code>，检查哪个支持解析当前返回值类型。最后将这些支持的媒体类型进行统计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br></pre></td></tr></table></figure>


</li>
<li><p>匹配处理当前返回值最佳的<code>MessageConverter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line">   <span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line">      <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">         mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>将匹配出来的<code>MessageConverter</code>进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br></pre></td></tr></table></figure>


</li>
<li><p>进行最佳匹配，最后拿到的只能有一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class="line">  <span class="keyword">if</span> (mediaType.isConcrete()) &#123;</span><br><span class="line">    selectedMediaType = mediaType;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class="line">    selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>最后再进行内容协商的最佳匹配，再使用匹配出来的最佳converter，再调用它进行转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="built_in">this</span>.messageConverters) &#123;</span><br><span class="line">  <span class="type">GenericHttpMessageConverter</span> <span class="variable">genericConverter</span> <span class="operator">=</span> (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter ?</span><br><span class="line">                                                  (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (genericConverter != <span class="literal">null</span> ?</span><br><span class="line">      ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class="line">      converter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class="line">    body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class="line">                                       (Class&lt;? <span class="keyword">extends</span> <span class="title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),</span><br><span class="line">                                       inputMessage, outputMessage);</span><br></pre></td></tr></table></figure>


</li>
<li><p>最后响应出去，就得到了它<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271049978.png" alt="内容协商响应的结果"></p>
</li>
</ol>
<h5 id="开启浏览器参数方式内容协商功能"><a href="#开启浏览器参数方式内容协商功能" class="headerlink" title="开启浏览器参数方式内容协商功能"></a>开启浏览器参数方式内容协商功能</h5><p>为了方便内容协商，开启基于请求参数的内容协商功能。在<code>application.yaml</code>中开启</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="comment"># 开启参数方式的内容协商</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>开启之后只需要通过<code>format</code>参数就能更改返回值类型，例如</p>
<p><code>&#123;&#123;api&#125;&#125;/get-person?format=xml</code></p>
<p><code>&#123;&#123;api&#125;&#125;/get-person?format=xml</code></p>
<p>开启基于参数的内容协商功能之后，底层的内容协商管理器多了一个基于参数的内容协商策略，它只支持两种类型：<code>json</code>和<code>xml</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049008.png" alt="内容协商管理器"></p>
<h5 id="自定义MessageConverter"><a href="#自定义MessageConverter" class="headerlink" title="自定义MessageConverter"></a>自定义MessageConverter</h5><blockquote>
<p>若需要自定义任何<code>SpringMVC</code>的配置，去<code>WebMvcAutoConfiguration</code>类中参考</p>
</blockquote>
<h6 id="根据请求头处理的MessageConverter"><a href="#根据请求头处理的MessageConverter" class="headerlink" title="根据请求头处理的MessageConverter"></a>根据请求头处理的MessageConverter</h6><p>若需要添加自定义<code>MessageConverter</code>需要实现<code>WebMvcConfigurer</code>接口中的<code>extendMessageConverters</code>方法，这个方法是用来拓展<code>MessgeConverter</code>的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3281050128601582429L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WebConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">MyConverter</span>());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过往<strong>SpringMVC</strong>提供的<code>List&lt;HttpMessageConverter&lt;?&gt;&gt; converters</code>中添加数据，这是一个<code>MessageConverter</code>集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">converters.add(<span class="keyword">new</span> <span class="title class_">MyConverter</span>());</span><br></pre></td></tr></table></figure>

<p>实现一个<code>MessageConverter</code></p>
<ul>
<li><code>canRead(Class&lt;?&gt; clazz, MediaType mediaType)</code> 是否支持读<ul>
<li>底层通过调用这个方法来判断当前<code>MessageConverter</code>是否支持处理读取</li>
</ul>
</li>
<li><code>canWrite(Type type, Class&lt;?&gt; clazz, MediaType mediaType)</code>是否支持写<ul>
<li>底层通过这个方法判断是否支持处理浏览器支持的类型</li>
</ul>
</li>
<li><code>getSupportedMediaTypes(Class&lt;?&gt; clazz)</code>获取支持的类型<ul>
<li>底层通过请求过来的请求头<code>Accept</code>对比，当前<code>MessageConverter</code>是否支持该类型，例如:<code>application/json</code></li>
</ul>
</li>
<li><code>write(Person person, Type type, MediaType contentType, HttpOutputMessage outputMessage)</code>将数据处理并写入<code>outputMessage</code><ul>
<li>如果当前<code>MessageConverter</code>被匹配到了，则用这个<code>MessageConverter</code>处理数据</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyConverter</span> <span class="keyword">implements</span> <span class="title class_">GenericHttpMessageConverter</span>&lt;Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(Person person, Type type, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span></span><br><span class="line">    IOException,</span><br><span class="line">  HttpMessageNotWritableException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> person.toString();</span><br><span class="line">    <span class="type">byte</span>[] bytes = data.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">body</span> <span class="operator">=</span> outputMessage.getBody();</span><br><span class="line">    body.write(bytes);</span><br><span class="line">    body.flush();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Type type, Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果返回值为Persion，则支持处理</span></span><br><span class="line">    <span class="keyword">return</span> clazz.isAssignableFrom(Person.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/c-tong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意实现的是<code>GenericHttpMessageConverter</code>而不再是<code>HttpMessageConverter</code></p>
<p>我按照教程走，发现我定义的无效，原来是底层改成了<code>GenericHttpMessageConverter</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049481.png" alt="匹配MessageConverter代码"></p>
</blockquote>
<p>重新发送请求之后结果就是我们自定义的<code>MessageConverter</code>处理返回的结果</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049488.png" alt="使用自定义MessageConverter处理结果"></p>
<h6 id="根据参数处理的MessageConverter"><a href="#根据参数处理的MessageConverter" class="headerlink" title="根据参数处理的MessageConverter"></a>根据参数处理的MessageConverter</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3281050128601582429L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WebConfig</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> &#123; ... &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加<code>strategies</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class="line"></span><br><span class="line">  WebMvcConfigurer.<span class="built_in">super</span>.configureContentNegotiation(configurer);</span><br><span class="line">  Map&lt;String, MediaType&gt; mediaTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">  mediaTypes.put(<span class="string">&quot;ctong&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/c-tong&quot;</span>));</span><br><span class="line">  mediaTypes.put(<span class="string">&quot;json&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/json&quot;</span>));</span><br><span class="line">  mediaTypes.put(<span class="string">&quot;xml&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/xml&quot;</span>));</span><br><span class="line">  <span class="comment">/// 基于参数的Strategy</span></span><br><span class="line">  <span class="type">ContentNegotiationStrategy</span> <span class="variable">parameterStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParameterContentNegotiationStrategy</span>(mediaTypes);</span><br><span class="line">  <span class="comment">/// 基于请求头的Strategy</span></span><br><span class="line">  <span class="type">HeaderContentNegotiationStrategy</span> <span class="variable">headerStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeaderContentNegotiationStrategy</span>();</span><br><span class="line"></span><br><span class="line">  List&lt;ContentNegotiationStrategy&gt; strategy = Arrays.asList(parameterStrategy, headerStrategy);</span><br><span class="line">  <span class="comment">/// 全部添加到Strategies</span></span><br><span class="line">  configurer.strategies(strategy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有添加<code>Header</code>的<code>MessageConverter</code>，则无法根据请求头中的<code>Aeecpt</code>进行匹配，最后无论<code>Aeecpt</code>是什么，都将当作<code>*/*</code>来进行使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HeaderContentNegotiationStrategy</span> <span class="variable">headerStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeaderContentNegotiationStrategy</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果我们添加了自定义的功能，则可能会将SpringBoot底层定义好的功能覆盖，导致默认功能失效。</p>
</blockquote>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>处理请求时，若是需要判断用户是否登录，若是没有登录，就禁止用户访问。这种操作可以使用拦截器来处理，或者也可以使用原生servlet的filter来处理。</p>
<p>在SpringBoot中，<code>HandlerInterceptor</code>是请求拦截器接口，它有三个方法可实现</p>
<ol>
<li><code>preHandle</code> 预先处理</li>
<li><code>postHandle</code>目标方法执行完成后处理</li>
<li><code>afterCompletion</code> 页面渲染后处理</li>
</ol>
<h3 id="定义拦截器"><a href="#定义拦截器" class="headerlink" title="定义拦截器"></a>定义拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7221439597788131747L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="comment">// 是否登录</span></span><br><span class="line">    <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;loginUser&quot;</span>) != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义拦截器后，需要将拦截器放到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">4663219618421154965L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WebConfig</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">      .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">      .excludePathPatterns(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/fonts/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">    WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>addPathPatterns</code> 过滤路径，<code>/**</code>表示过滤所有路径</li>
<li><code>excludePathPatterns</code> 放行路径，对指定的路径进行放行，也就是不拦截。</li>
</ul>
<h3 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h3><p>当发送一个请求到服务端后，spring的<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>方法会根据这个请求进行匹配一个<strong>HandlerExecutionChain</strong>。里面包含了可以处理当前请求的handler，其中有一个interceptorList属性，它是一个拦截器链。可以看到，spring中有两个默认拦截器，而<code>LoginInterceptor</code>是我们自定义的拦截器。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049629.png" alt="截屏2021-07-02 下午3.46.37"></p>
<p>在<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>中有这么几行代码。<code> mappedHandler.applyPreHandle</code> 执行所有拦截器的<code>preHandler</code>方法，<code>ha.handle</code>是执行执行目标方法，<code>applyPostHandle</code>是执行所有拦截器中的<code>postHandle</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure>

<p>在<code>mappedHandler.applyPreHandle</code>方法中，通过循环容器中的所有拦截器，并执行所有<code>preHandler()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.interceptorList.size(); i++) &#123;</span><br><span class="line">    <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">    <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) &#123;</span><br><span class="line">      triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.interceptorIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.web.servlet.HandlerExecutionChain#applyPreHandle</code></p>
</blockquote>
<p>如果有拦截器没有放行，则会调用<code>triggerAfterCompletion(request, response, null);</code>方法，这个方法中会执行所有已经执行<code>preHandler</code>的拦截器中的<code>afterCompletion()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      interceptor.afterCompletion(request, response, <span class="built_in">this</span>.handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.web.servlet.HandlerExecutionChain#triggerAfterCompletion</code></p>
</blockquote>
<p>当目标方法执行完毕之后也就是<code>ha.handle</code>方法执行完毕后开始执行<code>mappedHandler.applyPostHandle</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span></span><br><span class="line">  <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">    interceptor.postHandle(request, response, <span class="built_in">this</span>.handler, mv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.web.servlet.HandlerExecutionChain#applyPostHandle</code></p>
</blockquote>
<p>值得注意的是，无论请求发生任何异常，都会执行所有已执行拦截器的<code>afterCompletion</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049188.png" alt="截屏2021-07-02 下午5.02.17"></p>
<p>当请求执行结束后，执行所有已执行拦截器的<code>afterCompletion</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049191.png" alt="截屏2021-07-02 下午11.00.16"></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>若需要上传文件，请求头中的<code>Content-Type</code>必须为<code>multipart/form-data</code>。可以使用<code>@RequestPart</code>解析<code>multipart/form-data</code>中的参数，<code>@RequestParam</code>也可以完成此操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;, userName=&#123;&#125;, headerImg=&#123;&#125;, photos=&#123;&#125;&quot;</span>,</span><br><span class="line">           email, userName, headerImg.getSize(), photos.length);</span><br><span class="line">  <span class="type">String</span> <span class="variable">srcPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/ctong/Desktop/&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 保存图片到本地</span></span><br><span class="line">  <span class="keyword">if</span> (!headerImg.isEmpty()) &#123;</span><br><span class="line">    headerImg.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(srcPath+headerImg.getOriginalFilename()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (photos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!photo.isEmpty()) &#123;</span><br><span class="line">        photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(srcPath + photo.getOriginalFilename()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你上传的图片大小超过了默认的<code>1MB</code>就会出现以下错误。需要在<strong>application.yaml配置文件</strong>中自定义文件大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size exceeded; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.impl.FileSizeLimitExceededException: The field photos exceeds its maximum permitted size of <span class="number">1048576</span> bytes.] with root cause</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure>



<h3 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h3><p>文件上传自动配置类 &#x3D;&gt; <code>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</code></p>
<ul>
<li><p>在<code>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration#multipartResolver</code>中自动配置好了文件上传解析器「<strong>StandardServletMultipartResolver</strong>」。</p>
</li>
<li><p>在<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>方法中判断当前请求是否是文件上传请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">processedRequest = checkMultipart(request);</span><br></pre></td></tr></table></figure>

<p>在<code>checkMultipart</code>中通过判断请求头的<code>ContentType</code>是否为<code>multipart/</code>开头，如果是则当前请求为文件上传请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMultipart</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(), <span class="string">&quot;multipart/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>org.springframework.web.multipart.support.StandardServletMultipartResolver#isMultipart</code></p>
</blockquote>
<p>最后通过<code>this.multipartResolver.resolveMultipart(request);</code>封装一个<code>MultipartHttpServletRequest</code></p>
<blockquote>
<p><code>org.springframework.web.multipart.support.StandardServletMultipartResolver#resolveMultipart</code></p>
</blockquote>
<p><code>checkMultipart</code>完成后判断<code>processedRequest</code>和<code>request</code>是否相等，如果不相等则视为文件上传请求。因为在<code>checkMultipart</code>方法中，如果是一个文件上传请求，他会将request包装成一个<strong>StandardServletMultipartResolver</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">multipartRequestParsed = (processedRequest != request);</span><br></pre></td></tr></table></figure>


</li>
<li><p>通过<code>org.springframework.web.multipart.support.MultipartResolutionDelegate#resolveMultipartArgument</code> 获取<code>MultiValueMap&lt;String, MultipartFile&gt;</code>中的参数。这个<strong>Map</strong>在一开始解析文件上传请求的时候就已经将文件流封装为<code>MultipartFile</code>保存在<code>MultiValueMap</code>中，而<code>RequestPartMethodArgumentResolver</code>解析器只是负责从<code>MultiValueMap</code>中把参数拿出来。</p>
</li>
</ul>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul>
<li><p>默认情况下，SpringBoot提供<code>/error</code>处理所有错误的映射</p>
</li>
<li><p>对于机器客户端，它将生成JSON响应，其中包含错误Http状态和异常消息的详细信息，对于浏览器客户端，则响应一个<strong>whitelabel</strong>错误视图，以HTML格式呈现相同的数据。<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271049199.png" alt="截屏2021-07-03 下午4.49.23"></p>
</li>
<li><p>要对其进行自定义，需要添加<code>View</code>解析为<code>error</code><br>要完全替换默认行为，可以实现<code>ErrorController</code>并注册该类型的Bean定义，或添加<code>ErrorAttributes</code>类型的组件以使用现有机制替换其内容。</p>
</li>
<li><p><code>error/</code>下的4xx、5xx页面会被自动解析<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271049536.png" alt="截屏2021-07-03 下午4.53.08"></p>
</li>
</ul>
<h3 id="定制错误处理"><a href="#定制错误处理" class="headerlink" title="定制错误处理"></a>定制错误处理</h3><ul>
<li>自定义错误页<ul>
<li>error&#x2F;404.html</li>
<li>error&#x2F;5xx.html</li>
</ul>
</li>
<li>@ControllerAdvice + @ExceptionHandler处理异常</li>
<li>实现Handler Exception Resolver处理异常</li>
</ul>
<h3 id="异常处理自动配置原理"><a href="#异常处理自动配置原理" class="headerlink" title="异常处理自动配置原理"></a>异常处理自动配置原理</h3><p>自动配置异常处理规则在这个类中<code>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</code> </p>
<p>这个类就是一个普通的<code>Controller</code>，如果没有在配置文件中指定错误路径<code>server.error.path</code>，那么则使用默认的错误路径<code>/error</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在这个类中，有两个方法响应这个请求</p>
<ol>
<li><p><code>org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">  <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">  Map&lt;String, Object&gt; model = Collections</span><br><span class="line">    .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">  response.setStatus(status.value());</span><br><span class="line">  <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line">  <span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果当前请求是普通浏览器客户端，则使用这个方法处理，否则使用下面那个方法。当一个请求过来的时候，通过<code>resolveErrorView</code>方法获取视图解析器，默认解析器只有一个<code>DefaultErrorViewResolver</code>，而在这个视图解析器中通过<code>org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver#resolve</code>方法得到一个视图，在这个方法内部，已经钉死了模版位置</p>
<p><code>String errorViewName = &quot;error/&quot; + viewName;</code></p>
<p>下一步获取可解析这个模板的模板解析器<code>this.templateAvailabilityProviders.getProvider</code>如果在这一步找不到可以解析这个模板的解析器，那么则返回一个可以通过<strong>html</strong>解析器进行解析的<code>ModelAndView</code>。</p>
<blockquote>
<p>这个<code>ModelAndView</code>并不是一个真正的视图，它是一个视图“模型”</p>
</blockquote>
<p>得到这些信息之后，其它步骤就是普通的解析。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049663.png" alt="截屏2021-07-05 21.45.01"></p>
</li>
<li><p><code>org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">  <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(status);</span><br><span class="line">  &#125;</span><br><span class="line">  Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个其实和第一个一样，只不过返回类型变成一个普通的实体<code>ResponseEntity</code>，这个试图最终会以JSON的形式展示。</p>
<h3 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h3><p><strong>“没搞清楚&#x2F;error在哪转定义”</strong></p>
<h2 id="Web原生组件注入（Servlet、Filter、Listener）"><a href="#Web原生组件注入（Servlet、Filter、Listener）" class="headerlink" title="Web原生组件注入（Servlet、Filter、Listener）"></a>Web原生组件注入（Servlet、Filter、Listener）</h2><h3 id="使用ServletApi"><a href="#使用ServletApi" class="headerlink" title="使用ServletApi"></a>使用ServletApi</h3><p>spring boot支持原生servlet的<code>@WebFilter</code>、<code>@WebServlet</code> 、<code>@WebListener</code>，它需要通过<code>@ServletComponentScan</code>注解对指定包进行扫描。</p>
<h4 id="WebServlet"><a href="#WebServlet" class="headerlink" title="@WebServlet"></a>@WebServlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">      writer.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意，使用原生Servlet之后，无法被SpringBoot的拦截器所拦截</strong></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049875.png" alt="截屏2021-07-08 14.48.34"></p>
<h4 id="WebFilter"><a href="#WebFilter" class="headerlink" title="@WebFilter"></a>@WebFilter</h4><p>使用原生servlet的filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;原生过滤器初始化&quot;</span>);</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;原生过滤器开始执行&quot;</span>);</span><br><span class="line">        <span class="comment">/// 放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;原生过滤器销毁&quot;</span>);</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原生servlet的filter也无法拦截spring boot的请求</strong></p>
<h4 id="WebListener"><a href="#WebListener" class="headerlink" title="@WebListener"></a>@WebListener</h4><p>监听servlet是否启动成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyServletContextListener</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;MyServletContextListener监听到项目初始化完成&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;MyServletContextListener监听到项目被销毁&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="ServletComponentScan"><a href="#ServletComponentScan" class="headerlink" title="@ServletComponentScan"></a>@ServletComponentScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(basePackages = &quot;com.ctong.learnspringboot&quot;)</span> <span class="comment">// 指定包进行扫描，将原生Servlet注入到Spring</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LearnSpringBootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      SpringApplication.run(LearnSpringBootApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="使用RegistrationBean"><a href="#使用RegistrationBean" class="headerlink" title="使用RegistrationBean"></a>使用RegistrationBean</h3><p>除了通过<code>@WebServlet</code>、<code>@WebFilter</code>、<code>@WebListener</code>外，Springboot还提供了它自己的注册方式，<code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code>、<code>ServletListenerRegistrationBean</code>。使用<code>RegistrationBean</code>无需通过<code>ServletComponentScan</code>进行扫描，因为它本身就是一个<code>Component</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRegisterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyRegisterConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringBoot提供的多种原生Servlet注入方式之一</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ServletRegistrationBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ServletRegistrationBean&lt;MyServlet&gt; <span class="title function_">servletRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>();</span><br><span class="line">    <span class="comment">// ServletRegistrationBean 第一个参数代表需要注入的servlet， 第二个参数是一个数组，表示这些url都通过这个servlet进行处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(myServlet, <span class="string">&quot;/my&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringBoot 提供的多种原生Filter注入方式之一</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> FilterRegistrationBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MyFilter</span> <span class="variable">myFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFilter</span>();</span><br><span class="line">    <span class="comment">// 拦截指定servlet</span></span><br><span class="line">    FilterRegistrationBean&lt;MyFilter&gt; filter = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;(myFilter, servletRegistrationBean());</span><br><span class="line">    List&lt;String&gt; patterns = Arrays.asList(<span class="string">&quot;/css/*&quot;</span>, <span class="string">&quot;/js/*&quot;</span>, <span class="string">&quot;/fonts/*&quot;</span>, <span class="string">&quot;/images/*&quot;</span>);</span><br><span class="line">    filter.setUrlPatterns(patterns);</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringBoot 提供的多种原生Listener注入方式之一</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ServletListenerRegistrationBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ServletListenerRegistrationBean&lt;MyServletContextListener&gt; <span class="title function_">servletContextListenerRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MyServletContextListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServletContextListener</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(listener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在SpringBoot底层中，也是通过原生Servlet进行编写，StringBoot中默认Servlet处理的路径是<code>/</code>，源码在<code>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DispatcherServletConfiguration#dispatcherServlet</code>。</p>
<p>其实和我们注入原生Servlet是一样的<code>org.springframework.web.servlet.DispatcherServlet#doService</code>，他这个<code>doService</code>等价于<code>javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)</code>方法</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049332.png" alt="Shot_20210708_153831"></p>
<p>在tomcat中，若是存在多个servlet，它会进行<strong>精确匹配</strong>，例如有两个servlet，A处理<code>/</code>路径，B处理<code>/my</code>路径。用户端发送一个<code>/my</code>请求过来例如：127.0.0.1:80&#x2F;my&#x2F;login。那么tomcat就会使用B的规则去处理这个请求。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049327.png" alt="截屏2021-07-08 15.22.34"></p>
<h2 id="嵌入式Servlet容器"><a href="#嵌入式Servlet容器" class="headerlink" title="嵌入式Servlet容器"></a>嵌入式Servlet容器</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.embedded-container.application-context">官网文档传送门</a></p>
<h3 id="切换嵌入式Servlet容器"><a href="#切换嵌入式Servlet容器" class="headerlink" title="切换嵌入式Servlet容器"></a>切换嵌入式Servlet容器</h3><p>Spring Boot 内嵌了一个tomcat服务器，除了tomcat，它还支持其它的<code>WebServlet</code>，例如<code>Jetty</code>、<code>Undertow</code>。SpringBoot是通过<code>org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext</code>容器启动并寻找<code>org.springframework.boot.web.servlet.server.ServletWebServerFactory</code></p>
<h3 id="切换servlet服务器"><a href="#切换servlet服务器" class="headerlink" title="切换servlet服务器"></a>切换servlet服务器</h3><p>由于SpringBoot的web场景内嵌了tomcat，所以需要将tomcat剔除然后导入我们需要的servlet服务器。在导入之前，需要排除springboot默认引入的tomcat服务器，因为tomcat服务器的优先级最高。如果不排除会导致我们指定的服务器无法被添加进容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 排除默认导入的tomcat --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>排除tomcat依赖后导入我们需要的服务器即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入undertow服务器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><ul>
<li>spring boot应用启动发现当前是web应用。web场景包会自动导入tomcat</li>
<li>web应用会创建一个web版的ioc容器<code>org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext</code></li>
<li>当这个容器启动的时候会自动寻找<code>org.springframework.boot.web.servlet.server.ServletWebServerFactory</code></li>
<li>Spring Boot 底层有很多WebServlet工厂：<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, <code>UndertowServletWebServerFactory</code> 他们分别对应<code>tomcat</code>、<code>jetty</code>、<code>undertow</code></li>
<li>在底层有一个自动配置类，里面导入了默认的WebServlet<br><code>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</code>。在这个自动配置类中导入了<code>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration</code>配置类，在这个类中动态判断系统中到底导入了哪个个Web服务器的包（默认tomcat）<code>TomcatServletWebServerFactory</code></li>
<li>在<code>org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory</code>中创建出tomcat服务器并启动。</li>
</ul>
<h3 id="定制servlet容器"><a href="#定制servlet容器" class="headerlink" title="定制servlet容器"></a>定制servlet容器</h3><ol>
<li>实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code>接口，通过<code>customize</code>方法将配置文件的值和<code>ServletWebServerFactory</code>中相关的属性进行绑定。</li>
<li>修改配置文件，<code>server.xxx</code>，与<code>servlet</code>相关的配置都在<code>server.xxx</code>下，具体可以查看<code>org.springframework.boot.autoconfigure.web.ServerProperties</code></li>
<li>添加<code>org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory</code>组件到容器中，这种方式相当于</li>
</ol>
<h2 id="定制化原理"><a href="#定制化原理" class="headerlink" title="定制化原理"></a>定制化原理</h2><h3 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h3><ul>
<li><p>修改配置文件</p>
</li>
<li><p>实现xxx Customizer类</p>
</li>
<li><p>编写自定义的配置类xxxConfiguration，通过<code>@Bean</code>添加或替换容器中默认的组件</p>
</li>
<li><p>web应用实现<code>WebMvcConfiguration</code>即可定制化web功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@EnableWebMvc</code> + <code>WebMvcConfiguration</code>。这种方式将全面接管SpringMvc，所有规则全部自己重新配置。实现定制和功能的拓展</p>
<ul>
<li><p>原理</p>
<ol>
<li><p><code>WebMvcAutoConfiguration</code>是SpringMvc默认的自动配置类，其中配置了静态资源规则、欢迎页等规则…</p>
</li>
<li><p><code>@EnableWebMvc</code>中会导入<code>DelegatingWebMvcConfiguration</code>，它继承了<code>WebMvcConfigurationSupport</code></p>
</li>
<li><p><code>DelegatingWebMvcConfiguration</code>的作用是只保证SpringMvc最基本的使用</p>
<ol>
<li>这个配置类会把系统中所有的<code>WebMvcConfiguration</code>拿过来。所有的功能定制都是这些<code>WebMvcConfiguration</code>合起来的结果</li>
<li>自动配置了一些非常底层的组件。<code>RequestMapping</code>、<code>HandlerMapping</code>，这些组件依赖的组件都是从容器中获取</li>
</ol>
</li>
<li><p>在<code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</code>中，有一个生效条件<code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>当<code>WebMvcConfigurationSupport.class</code>不存在时生效</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>导入所需场景，例如<code>starter-web</code> -&gt;&gt; </p>
<p>之后这个starter场景会导入xxxAutoConfiguration自动配置类 -&gt;&gt;</p>
<p>在这个自动配置类中会使用@Bean导入一系列组件 -&gt;&gt;</p>
<p>在组件中的默认配置都会跟xxxProperties进行绑定 -&gt;&gt;</p>
<p>最后xxProperties又和配置文件进行绑定</p>
</li>
</ol>
<h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints">官网相关文档</a></p>
<h3 id="SpringBoot-Actuator"><a href="#SpringBoot-Actuator" class="headerlink" title="SpringBoot Actuator"></a>SpringBoot Actuator</h3><p>未来每一个微服务在云上部署后，需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我门每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>引入actuator场景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://localhost:8080/actuator//*/">http://localhost:8080/actuator/\*\</a>*</p>
</li>
<li><p>Web下默认暴露的端点只有<code>health</code>和<code>info</code>，可以在配置中暴露所有端点信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actuator 监控指标</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment"># 默认开启所有监控端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 以web方式暴露所有监控端点</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p><a href="https://github.com/codecentric/spring-boot-admin">https://github.com/codecentric/spring-boot-admin</a></p>
<h3 id="Actuator-Endpoint"><a href="#Actuator-Endpoint" class="headerlink" title="Actuator Endpoint"></a>Actuator Endpoint</h3><p>常用的Endpoint有</p>
<ul>
<li>Health<br>监控状况</li>
<li>Metrics<br>运行时指标</li>
<li>Loggers<br>日志记录</li>
</ul>
<h4 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h4><p>健康检查端点，一般用在云平台，平台会定时检查应用的健康状况。需要Health Endpoint为平台返回当前应用的一系列组件健康状况集合。</p>
<ul>
<li>health endpoint 返回的结果，应该是一系列健康检查后的一个汇总报告</li>
<li>很多的健康检查默认已经自动配好了，比如：数据库，redis等</li>
<li>可以自定义添加健康检查机制</li>
</ul>
<p>开启指定端点详细信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actuator 监控指标</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> <span class="comment"># 显示详细</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049555.png" alt="截屏2021-07-14 15.04.50"></p>
<h4 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h4><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到：</p>
<ul>
<li>通过Metrics对接多种监控系统</li>
<li>简化核心Metrics开发</li>
<li>添加自定义Metrics或者扩展已有Metrics</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049574.png" alt="截屏2021-07-14 15.10.09"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049845.png" alt="截屏2021-07-14 15.11.13"></p>
<h3 id="管理Endpoint"><a href="#管理Endpoint" class="headerlink" title="管理Endpoint"></a>管理Endpoint</h3><h4 id="开启与禁用Endpoint"><a href="#开启与禁用Endpoint" class="headerlink" title="开启与禁用Endpoint"></a>开启与禁用Endpoint</h4><p>默认情况下，endpoint是全部开启的，若需要指定开启，需要全部关闭后再开启指定端点</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actuator 监控指标</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span> <span class="comment"># 关闭全部端点</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> <span class="comment"># 显示详细信息</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启端点</span></span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">metrics:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h3 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><h4 id="定制Health信息"><a href="#定制Health信息" class="headerlink" title="定制Health信息"></a>定制Health信息</h4><p>实现<code>HealthIndicator</code>接口或者<code>AbstractHealthIndicator</code>抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComponentHealthIndicator</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5066467685531996717L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ComponentHealthIndicator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">      builder.status(Status.UP);</span><br><span class="line">      map.put(<span class="string">&quot;count&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      map.put(<span class="string">&quot;ms&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      builder.status(Status.OUT_OF_SERVICE);</span><br><span class="line">      map.put(<span class="string">&quot;err&quot;</span>, <span class="string">&quot;连接超时&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;ms&quot;</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    builder.withDetail(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>).withDetails(map);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049017.png" alt="image-20210714154234818"></p>
<h4 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h4><p>定制info有两种方法，一种是在application.yaml配置文件中定义 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">@project.version@</span> <span class="comment"># 获取pom文件中的版本信息</span></span><br><span class="line">  <span class="attr">autor:</span> <span class="string">Clover</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">19</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049192.png" alt="截屏2021-07-14 15.45.20"></p>
<p>第二种方式，可以实现<code>InfoContributor</code>接口的方式实现，第二种优先级高于配置文件方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppInfoContributor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, InfoContributor &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2489956740668578470L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">AppInfoContributor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; info = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    info.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Clover.You&quot;</span>);</span><br><span class="line">    info.put(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>);</span><br><span class="line">    info.put(<span class="string">&quot;version&quot;</span>, <span class="string">&quot;1.0.0.1&quot;</span>);</span><br><span class="line">    builder.withDetails(info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h4><h5 id="增加定制Metrics"><a href="#增加定制Metrics" class="headerlink" title="增加定制Metrics"></a>增加定制Metrics</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2783841528321793923L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计数指标</span></span><br><span class="line">  <span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">LoginController</span><span class="params">(MeterRegistry meter)</span> &#123;</span><br><span class="line">    <span class="comment">// 注册自定义计数指标，记录登录方法调用了几次</span></span><br><span class="line">    counter = meter.counter(<span class="string">&quot;com.ctong.learnspringboot.controller.LoginController.login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpSession session, User user)</span> &#123;</span><br><span class="line">    <span class="comment">// 增加计数</span></span><br><span class="line">    counter.increment();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册成功后，访问localhost:8080&#x2F;actuator&#x2F;metrics就可以看见我们自定义的新指标</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049497.png" alt="image-20210714162110608"></p>
<p>计数会随着<code>counter.increment();</code>方法的调用而增加</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271049795.png" alt="截屏2021-07-14 16.22.11"></p>
<h4 id="定义Endpoint"><a href="#定义Endpoint" class="headerlink" title="定义Endpoint"></a>定义Endpoint</h4><p>SpringBoot给我们定义了非常多的监控端点，一旦我们引入 了复杂场景，可能需要自定义监控端点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;diy&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEndpoint</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1370368576988354134L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ReadOperation</span></span><br><span class="line">  <span class="keyword">public</span> Map <span class="title function_">getDockerInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.singletonMap(<span class="string">&quot;docker&quot;</span>, <span class="string">&quot;docker started...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@WriteOperation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopDocker</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;docker stopped....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<blockquote>
<p>   SpringBoot由多种解析器组成</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCache</title>
    <url>/2022/01/07/SpringCache/</url>
    <content><![CDATA[<h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache">官方文档</a> <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache">https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache</a></p>
<ul>
<li>Spring 从3.1开始定义了 <code>org.springframework.cache.Cache</code> 和 <code>org.springframework.cache.CacheManager</code> 接口来统一不同的缓存技术并支持使用 JCache（JSR-107）注解简化我们开发。</li>
<li>Cache 接口为缓存的组件规范定义，包含缓存的各种操作集合。Cache 接口下 Spring 提供了各种 xxxCache 的实现，如 <code>RedisCache</code>，<code>EhCacheCache</code>，<code>ConcurrentMapCache</code> 等。</li>
<li>每次调用需要缓存功能的方法时，Spring 会检查指定参数的指定目标方法是否已经被调用过，如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户，下次调用直接从缓存中获取。</li>
<li>使用 Spring 缓存抽象时我们需要关注以下两点<ol>
<li>确定方法需要被缓存以及他们的缓存策略。</li>
<li>从缓存中读取之前缓存存储的数据</li>
</ol>
</li>
</ul>
<h2 id="SpringBoot-整合-SpringCache"><a href="#SpringBoot-整合-SpringCache" class="headerlink" title="SpringBoot 整合 SpringCache"></a>SpringBoot 整合 SpringCache</h2><p>引入 SpringCache 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入你缓存的开发场景，例如 Redis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>引入 SpringCache 后，他自动配置了哪些内容？</p>
<p><code>CacheAutoConfiguration</code> 会导入 <code>RedisCacheConfiguration</code> 。在<code>RedisCacheConfiguration</code> 中，自动配置了一个 Redis 缓存管理器</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201070918420.png" alt="RedisCacheConfiguration自动配置"></p>
<p>益于SpringBoot自动配置，我们需要配置的东西非常少</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置 redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.226</span><span class="number">.128</span></span><br><span class="line">  <span class="comment"># SpringCache配置</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">  <span class="comment"># 指定缓存类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure>

<p>最后需要手动开启缓存功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallProductApplication</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>最后使用指定注解就能完成指定操作</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>SpringCache 如下注解为我们提供缓存的操作</p>
<ul>
<li><code>@Cacheable</code> 触发将数据保存到缓存的操作。<ul>
<li>如果缓存中有数据，被标注的方法不调用。</li>
<li>key 默认自动生成：<code>缓存名字::SimpleKey []</code> ，如 <code>category::SimpleKey []</code> 。</li>
<li>缓存值默认使用 jdk 序列化机制将序列化后的数据存到缓存。</li>
<li>默认过期时间是 <code>-1</code>。</li>
</ul>
</li>
<li><code>@CacheEvict</code> 将数据从缓存删除。</li>
<li><code>@CachePut</code> 沉浸式更新缓存。</li>
<li><code>@Caching</code> 组合多个缓存操作。</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h3><p>代表当前方法的结果需要缓存，如果缓存中有，那么被标注的方法不进行调用。如果缓存中没有，那么会调用被标注的方法得到放回结果，最后将结果放到缓存中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询一级分类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;CategoryEntity&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/26 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &#123;&quot;category&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLeve1Category</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;getLeve1Category调用....&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;cat_level&quot;</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一次调用，此时缓存中无数据</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201070950674.png" alt="第一次调用"></p>
<p>检查缓存</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201070951931.png" alt="缓存结果"></p>
<p>第二次调用这个接口，我们这个方法并没有调用，而是直接去缓存中将数据获取出来</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201070953222.png" alt="第二次调"></p>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>指定生成的缓存使用自定义的 key。如果需要自定义key，可以使用 <code>key</code> 属性，他使用 SpEL 表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &#123;&quot;category&quot;&#125;, key = &quot;&#x27;leve1Category&#x27;&quot;)</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202201071012469.png" alt="自定义key">指定缓存数据的过期时间，<code>@Cacheable</code> 注解并没有提供什么属性让我们自定义过期时间，但是可以在配置文件中指定 Redis 的 <strong>ttl</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="comment"># 单位是毫秒</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">300000</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202201071016596.png" alt="自定义过期时间"></p>
<p>将数据保存为 JSON 格式，需要搞清楚原理，<code>CacheAutoConfiguration</code> 通过<code>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheConfigurationImportSelector</code> 导入了 <code>RedisCacheConfiguration</code> ，在 <code>RedisCacheConfiguration</code> 中自动配置了 <code>RedisCacheManager</code> ，<code>RedisCacheManager</code>初始化了所有缓存，初始化是按照配置文件中 <code>cache.cache-names</code> 配置的名字进行初始化。在初始化时最重要的是</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201071038476.png" alt="cacheManager"></p>
<p>他决定用来使用那个缓存配置。如果需要改缓存配置只需要在容器中放一个 <code>org.springframework.data.redis.cache.RedisCacheConfiguration</code> 即可。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.ctong.gulimall.product.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.cache.CacheProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * █████▒█      ██  ▄████▄   ██ ▄█▀     ██████╗ ██╗   ██╗ ██████╗</span></span><br><span class="line"><span class="comment"> * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒      ██╔══██╗██║   ██║██╔════╝</span></span><br><span class="line"><span class="comment"> * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░      ██████╔╝██║   ██║██║  ███╗</span></span><br><span class="line"><span class="comment"> * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄      ██╔══██╗██║   ██║██║   ██║</span></span><br><span class="line"><span class="comment"> * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄     ██████╔╝╚██████╔╝╚██████╔╝</span></span><br><span class="line"><span class="comment"> * ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒     ╚═════╝  ╚═════╝  ╚═════╝</span></span><br><span class="line"><span class="comment"> * ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span></span><br><span class="line"><span class="comment"> * ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span></span><br><span class="line"><span class="comment"> * ░     ░ ░      ░  ░</span></span><br><span class="line"><span class="comment"> * Copyright 2022 Clover You.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 缓存配置</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> 2621869236@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-01-07 11:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> &#123;</span><br><span class="line">    <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">    config = config.serializeKeysWith(</span><br><span class="line">      RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    config = config.serializeValuesWith(</span><br><span class="line">      RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>())</span><br><span class="line">    );</span><br><span class="line">    CacheProperties.<span class="type">Redis</span> <span class="variable">redisProperties</span> <span class="operator">=</span> cacheProperties.getRedis();</span><br><span class="line">    <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="literal">null</span>) &#123;</span><br><span class="line">      config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">      config = config.prefixCacheNameWith(redisProperties.getKeyPrefix());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">      config = config.disableCachingNullValues();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">      config = config.disableKeyPrefix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要指定一个唯一的标识，每一个需要缓存的数据我们都来指定要放到那个名字的缓存中「缓存分区（按照业务类型）」</p>
</blockquote>
<h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h3><p>当被标注的方法执行完后，删除指定的缓存，这可以做一个缓存失效模式。</p>
<p>可以在更新某个数据时将数据从缓存中删除，等下次请求进来获取数据缓存中就是一个新的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集联更新分类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category 分类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/27 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;category&quot;, key = &quot;&#x27;leve1Category&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCascade</span><span class="params">(CategoryEntity category)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.updateById(category);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(category.getName())) &#123;</span><br><span class="line">    categoryBrandRelationService.updateCategory(category.getCatId(), category.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h3><p>例如我们需要删除多个缓存，当我们需要将多个 <code>@CacheEvict</code> 组合起来一起操作时，就需要 <code>@Caching</code> 。当然他除了 <code>@CacheEvict</code> ，还支持 <code>@CachePut</code>和<code>@Cacheable</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集联更新分类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category 分类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/27 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Caching(evict = &#123;</span></span><br><span class="line"><span class="meta">  @CacheEvict(value = &quot;category&quot;, key = &quot;&#x27;leve1Category&#x27;&quot;),</span></span><br><span class="line"><span class="meta">  @CacheEvict(value = &quot;category&quot;, key = &quot;&#x27;getCatalogJson&#x27;&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCascade</span><span class="params">(CategoryEntity category)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.updateById(category);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(cat egory.getName())) &#123;</span><br><span class="line">    categoryBrandRelationService.updateCategory(category.getCatId(), category.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><code>@Cacheable</code> 默认情况下时有缓存击穿问题的，如果需要解决缓存击穿问题，需要修改 <code>sync</code> 属性的默认值，默认为 <code>false</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &#123;&quot;category&quot;&#125;, key = &quot;&#x27;leve1Category&#x27;&quot;, sync = true)</span></span><br></pre></td></tr></table></figure>

<p>可以看到，默认加的是本地锁，不过这已经足够了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> &lt;T&gt; T <span class="title function_">getSynchronized</span><span class="params">(Object key, Callable&lt;T&gt; valueLoader)</span> &#123;</span><br><span class="line">  <span class="type">ValueWrapper</span> <span class="variable">result</span> <span class="operator">=</span> get(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) result.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  T value;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    value = valueLoader.call();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValueRetrievalException</span>(key, valueLoader, e);</span><br><span class="line">  &#125;</span><br><span class="line">  put(key, value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常规数据「读多写少，即时性、一致性要求不高的数据」完全可以使用SpringCache。特殊数据需要自己特殊设计，例如使用Redisson操作分布式锁等等</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Alibaba-Sentinel - 学习笔记</title>
    <url>/2022/03/21/SpringCloud-Alibaba-Sentinel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SpringCloud-Alibaba-Sentinel-学习笔记"><a href="#SpringCloud-Alibaba-Sentinel-学习笔记" class="headerlink" title="SpringCloud Alibaba-Sentinel - 学习笔记"></a>SpringCloud Alibaba-Sentinel - 学习笔记</h1><h2 id="熔断降级和限流"><a href="#熔断降级和限流" class="headerlink" title="熔断降级和限流"></a>熔断降级和限流</h2><h3 id="1-什么是熔断？"><a href="#1-什么是熔断？" class="headerlink" title="1.什么是熔断？"></a>1.什么是熔断？</h3><p>A 服务调用 B 服务的某个功能，由于网络不稳定或者 B 服务压力大，导致业务处理能力降低响应慢。如果这样的次数太多，可以直接把 B 服务断了（A 不再请求 B），凡是调用 B 的直接返回降级数据，不必等待 B 的超长执行。这样 B 的故障问题就不会级联影响到 A。</p>
<h3 id="2-什么是降级？"><a href="#2-什么是降级？" class="headerlink" title="2.什么是降级？"></a>2.什么是降级？</h3><p>整个网站处于流量高峰期，服务器压力剧增，可以根据当前业务情况及流量，对一些服务和页面进行尤策略的降级停止服务，所有的调用直接返回降级数据。以此缓解服务器资源的压力，以保证核心业务的正常运行，同时也保证了客户和大部分客户能得到正确的响应。</p>
<h3 id="3-什么是限流"><a href="#3-什么是限流" class="headerlink" title="3. 什么是限流"></a>3. 什么是限流</h3><p>对打入服务的请求流量进行控制，使服务能够承担不超过自己能力的流量压力。</p>
<more/>

<h3 id="4-异同"><a href="#4-异同" class="headerlink" title="4. 异同"></a>4. 异同</h3><ul>
<li>相同点<ol>
<li>为了保证集群大部分服务的可用性和可靠性，防止崩溃，关闭特定业务以保证资源可用</li>
<li>用户最终都是体验到某个功能不可用</li>
</ol>
</li>
<li>不同点<ol>
<li>熔断时被调用方故障，触发的系统主动规则</li>
<li>降级是基于全局考虑，停止一些正常服务，释放资源</li>
</ol>
</li>
</ul>
<h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h2><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意在依赖导入的时候，可能会产生 <code>com.alibaba.fastjson</code> 依赖冲突，好像是引入了两个这个依赖，把它忽略就好</strong></p>
<blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    用于限流、熔断、降级    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>下载对应版本的 sentinel-dashboard 【<a href="https://github.com/alibaba/Sentinel/releases%E3%80%91%E5%B0%BD%E9%87%8F%E4%B8%8E%E4%BD%A0%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84sentinel%E7%89%88%E6%9C%AC%E4%B8%80%E8%87%B4%EF%BC%8C%E5%90%A6%E5%88%99%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%9C%89%E5%85%B6%E5%AE%83%E9%97%AE%E9%A2%98">https://github.com/alibaba/Sentinel/releases】尽量与你项目中下载的sentinel版本一致，否则可能会有其它问题</a></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181604926.png" alt="sentinel依赖版本"></p>
<p>下载好 dashboard 后启动它，如果端口冲突就修改 <code>--server.prot</code> 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar --server.prot=8080</span><br></pre></td></tr></table></figure>

<p>启动 dashboard 后在需要保护的项目中加入配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 sentinel dashboard 路径</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="string">172.16.156.128:8080</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.port</span>=<span class="string">8719</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 spring.cloud.sentinel.transport.port 端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。比如 Sentinel 控制台添加了一个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。</p>
</blockquote>
<p>访问你项目中任意一个路径再打开 dashboard 就可以看到对应的信息</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181609099.png" alt="dashboard"></p>
<h2 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h2><p>打开 dashboard 对指定路径设置流控规则</p>
<p>点击 【蔟点链路 —&gt; 流控】 然后对指定的路径进行设置</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181613103.png" alt="流程01"></p>
<p>设置好规则后点击新增即可</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181615564.png" alt="流程02"></p>
<p>以上规则是一秒只能处理一个请求，如果处理了多个，那么就直接返回失败，例如：</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181621625.gif" alt="流控演示"></p>
<p>点击【流控规则】可以看到你添加的所有规则，我刚刚添加的规则就可以在这看到</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181617998.png" alt="规则列表"></p>
<p><strong>但是现在有个问题，就是当我的服务重启后，规则就失效了</strong></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203181625425.png" alt="规则列表"></p>
<h3 id="自定义降级数据"><a href="#自定义降级数据" class="headerlink" title="自定义降级数据"></a>自定义降级数据</h3><p>Sentinel 的默认降级数据是一个 <code>Blocked by Sentinel (flow limiting)</code> </p>
<blockquote>
<p>默认是这个类实现：<code>com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.DefaultBlockExceptionHandler</code></p>
</blockquote>
<p>如果需要自定义，可以在容器中放一个自定义的 <code>BlockExceptionHandler</code> 即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CustomBlockException</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span><br><span class="line"><span class="params">                     HttpServletResponse httpServletResponse,</span></span><br><span class="line"><span class="params">                     BlockException e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    httpServletResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    httpServletResponse.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> httpServletResponse.getWriter();</span><br><span class="line">    <span class="type">R</span> <span class="variable">error</span> <span class="operator">=</span> R.error(BizCodeEnum.TO_MANY_REQUEST);</span><br><span class="line">    writer.println(JSON.toJSONString(error));</span><br><span class="line">    log.info(<span class="string">&quot;限流: ===&gt;&gt; &#123;&#125;&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202203200856881.png" alt="测试结果"></p>
<p><strong>注意：由于我使用的是2021版本的，旧版需要使用 <code>WebCallbackManager.setUrlBlockHandler(xxx);</code>  来设置</strong></p>
<h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><p><strong>默认当前环境就是微服务：SpringCloud + SpringCloudAlibaba + SpringFeign</strong></p>
<p>例如单A服务调用B服务时可能会出现错误导致一系列问题，在引入熔断保护后，在第一次调用失败时Sentinel会将B服务进行隔离（断路保护），下次再调用该服务时会直接执行降级方法。防止在出现问题后导致的服务崩溃现象。</p>
<h3 id="调用方的熔断保护"><a href="#调用方的熔断保护" class="headerlink" title="调用方的熔断保护"></a>调用方的熔断保护</h3><p>例如我有这么一个远程接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;gulimall-seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SeckillFeignService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过商品id查询当前商品是否参与秒杀活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@email</span> cloveryou02@163.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/16 9:25 上午</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sku/seckill/&#123;skuId&#125;&quot;)</span></span><br><span class="line">    R <span class="title function_">getSkuSeckillInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给 Feign 接口添加一个降级实现，注意该实现一定要添加到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.ctong.gulimall.product.feign.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> top.ctong.gulimall.common.exception.BizCodeEnum;</span><br><span class="line"><span class="keyword">import</span> top.ctong.gulimall.common.utils.R;</span><br><span class="line"><span class="keyword">import</span> top.ctong.gulimall.product.feign.SeckillFeignService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeckillFeignServiceFallBack</span> <span class="keyword">implements</span> <span class="title class_">SeckillFeignService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过商品id查询当前商品是否参与秒杀活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skuId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@email</span> cloveryou02@163.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/16 9:25 上午</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getSkuSeckillInfo</span><span class="params">(Long skuId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnum.UNKNOWN_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加完降级实现后再在远程接口中 <code>@FeignClient</code> 的 <code>fallback</code> 参数来指定这个降级实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;gulimall-seckill&quot;, fallback = SeckillFeignServiceFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SeckillFeignService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>把远程服务停掉模拟宕机，再发送请求检查远程返回的数据</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201613419.png" alt="降级数据"></p>
<h3 id="调用方手动指定降级策略"><a href="#调用方手动指定降级策略" class="headerlink" title="调用方手动指定降级策略"></a>调用方手动指定降级策略</h3><p>可以在 sentinel-dashboard 中手动指定降级规则，这种方式比较灵活，并且支持多种策略，例如 RT 策略，可以根据每秒调用比例来就行降级，例如每秒进来5个请求，这些请求如果都不在指定时间内完成（毫秒），那么就触发降级策略，过了指定保护后，会尝试几次去调用远程</p>
<p>在指定远程链路上点击【降级】</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201635927.png" alt="image-20220320163541779"></p>
<p>设置好规则后点击【新增】保存</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201639927.png" alt="设置熔断规则"></p>
<blockquote>
<p>比例阈值：自己设定的 ， 慢调用次数 &#x2F; 调用次数&#x3D;比例阈值</p>
<p>来源于：<a href="https://blog.csdn.net/w1234567465/article/details/119649203">https://blog.csdn.net/w1234567465/article/details/119649203</a></p>
</blockquote>
<p>测试如下图</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201707398.gif" alt="熔断保护演示"></p>
<p>在指定时间内慢调次数达到比例阈，那么就开启熔断保护（降级处理并触发熔断回调），在保护期间，超过熔断时长后，会稍稍放一些请求过去，如果请求还是不达标，那么继续隔离。</p>
<h2 id="自定义受保护资源"><a href="#自定义受保护资源" class="headerlink" title="自定义受保护资源"></a>自定义受保护资源</h2><h3 id="代码定义"><a href="#代码定义" class="headerlink" title="代码定义"></a>代码定义</h3><p>任何一个我们需要保护的代码片段都是资源，可以使用 <code>SphU.entry(&quot;自定义资源名&quot;)</code> 定义一段资源，当被限流时 <code>try</code> 中被保护的资源并不会执行，而是抛出一个 <code>BlockException</code> 异常，我们只需要处理这个异常就好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current-seckiil-skus&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getCurrentSeckiilSkus</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> SphU.entry(<span class="string">&quot;current-seckiil-skus&quot;</span>)) &#123;</span><br><span class="line">        List&lt;SeckillSkuRedisTo&gt; list = seckillService.getCurrentSeckiilSkus();</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">        <span class="comment">// &#123;code: 10003, msg: &quot;当前服务器正忙&quot;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnum.TO_MANY_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在对应的服务中点击【降级&#x2F;限流规则】再新增一个对应的规则【新增降级规则】</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201928119.png" alt="新增降级规则"></p>
<p><strong>一定要注意资源名，一定要是 <code>SphU.entry</code> 里指定的资源名</strong>，设置完后点【新增就好了】</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201931116.png" alt="新增降级规则"></p>
<p>就放结果好了，不搞gif了</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203201942712.png" alt="结果"></p>
<h3 id="注解定义资源"><a href="#注解定义资源" class="headerlink" title="注解定义资源"></a>注解定义资源</h3><p>可以使用 sentinel 提供的 <code>@SentinelResource</code> 注解来定义一个资源，和使用代码定义的方式差不多，不过需要在本类指定一个降级处理方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current-seckiil-skus&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;current-seckiil-skus&quot;, blockHandler = &quot;blockHandler&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getCurrentSeckiilSkus</span><span class="params">()</span> &#123;</span><br><span class="line">  List&lt;SeckillSkuRedisTo&gt; list = seckillService.getCurrentSeckiilSkus();</span><br><span class="line">  <span class="keyword">return</span> R.ok().setData(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降级处理方法</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">blockHandler</span><span class="params">(BlockException e)</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;限流了！！&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> R.error(BizCodeEnum.TO_MANY_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不指定资源名称，那么也可以使用方法全类名作为资源名也是可以的</p>
<p><code>top.ctong.gulimall.seckill.controller.SeckillController:getCurrentSeckiilSkus()</code></p>
<p><strong>官方给出的注解参数</strong></p>
<p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p>
<ul>
<li><code>value</code>：资源名称，必需项（不能为空）</li>
<li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>
<li><code>blockHandler</code> &#x2F; <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>
<li><code>fallback</code> &#x2F; <code>fallbackClass</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul>
<li>返回值类型必须与原函数返回值类型一致；</li>
<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>
<li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>
</ul>
</li>
<li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul>
<li>返回值类型必须与原函数返回值类型一致；</li>
<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>
<li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>
</ul>
</li>
<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li>
</ul>
<p>1.8.0 版本开始，<code>defaultFallback</code> 支持在类级别进行配置。</p>
<blockquote>
<p>注：1.6.0 之前的版本 fallback 函数只针对降级异常（<code>DegradeException</code>）进行处理，<strong>不能针对业务异常进行处理</strong>。</p>
</blockquote>
<h2 id="网关限流"><a href="#网关限流" class="headerlink" title="网关限流"></a>网关限流</h2><p>使用网关限流效果更加明显，因为请求直接就在网关层拦截，根本就不需要转到其他服务。</p>
<p>Sentinel 支持目前主流的网关，如：Spring Cloud Gateway、Netflix和Zuul等。</p>
<p>可以根据请求属性进行解析，例如某个请求带或者没带某个属性进行限流和网关规则管理、网关规则检查、调用参数组装、自定义API分组管理、API路径匹配。</p>
<p>引入以下Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入依赖后添加一些配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">172.16</span><span class="number">.156</span><span class="number">.128</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再发起一个请求稍等一会刷新 sentinel-dashboard 就可以看见对应模块了</p>
<p>Sentinel 1.6.3 引入了网关流控控制台的支持，用户可以直接在 Sentinel 控制台上查看 API Gateway 实时的 route 和自定义 API 分组监控，管理网关规则和 API 分组配置。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210811471.png" alt="网关控制台"></p>
<p>对网关层新建一个流控规则，资源名可以是路由规则名，例如以下路由配置，<code>id</code> 就是路由规则名，同时可用于在 Sentinel 中作为资源名</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">ware_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-ware</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/ware/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">coupon_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-coupon</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/coupon/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210819802.png" alt="新增网关流控规则"></p>
<p>测试结果：</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210822392.png" alt="结果"></p>
<h3 id="针对请求属性"><a href="#针对请求属性" class="headerlink" title="针对请求属性"></a>针对请求属性</h3><p>同时也可以针对请求属性进行匹配，例如请求头、参数等信息。</p>
<p>如以下规则，如果携带了 <code>token</code> 参数，并且其值为 <strong>1</strong> ，那么就限制该请求，否则放行</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210828398.png" alt="针对请求属性"></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210830177.png" alt="测试结果"></p>
<h3 id="Api分组"><a href="#Api分组" class="headerlink" title="Api分组"></a>Api分组</h3><p>可以通过将多个路径分成一组，然后对这个组统一进行限流</p>
<p>可以到【API管理】中点击【新增自定义API】进行设置</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210835002.png" alt="API分组"></p>
<p>新增好分组后再添加一个限流规则，注意这里的<strong>API类型</strong>选择API分组</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210838826.png" alt="新建对分组的限流规则"></p>
<p>再测试这两个API，都可以限制住</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210839309.png" alt="测试结果"></p>
<h3 id="自定义回调数据"><a href="#自定义回调数据" class="headerlink" title="自定义回调数据"></a>自定义回调数据</h3><p>如果需要修改限流后的返回数据，需要使用 <code>GatewayCallbackManager</code> 来进行设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelGatewayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SentinelGatewayConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        GatewayCallbackManager.setBlockHandler(<span class="keyword">new</span> <span class="title class_">BlockRequestHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> &#123;</span><br><span class="line">                <span class="type">R</span> <span class="variable">error</span> <span class="operator">=</span> R.error(BizCodeEnum.TO_MANY_REQUEST);</span><br><span class="line">                <span class="keyword">return</span> ServerResponse.ok().body(Mono.just(error), R.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202203210855126.png" alt="降级数据"></p>
<h3 id="参数相关"><a href="#参数相关" class="headerlink" title="参数相关"></a>参数相关</h3><ul>
<li><code>GatewayFlowRule</code>：网关限流规则，针对 API Gateway 的场景定制的限流规则，可以针对不同 route 或自定义的 API 分组进行限流，支持针对请求中的参数、Header、来源 IP 等进行定制化的限流。</li>
<li><code>ApiDefinition</code>：用户自定义的 API 定义分组，可以看做是一些 URL 匹配的组合。比如我们可以定义一个 API 叫 <code>my_api</code>，请求 path 模式为 <code>/foo/**</code> 和 <code>/baz/**</code> 的都归到 <code>my_api</code> 这个 API 分组下面。限流的时候可以针对这个自定义的 API 分组维度进行限流。</li>
</ul>
<p>其中网关限流规则 <code>GatewayFlowRule</code> 的字段解释如下：</p>
<ul>
<li><code>resource</code>：资源名称，可以是网关中的 route 名称或者用户自定义的 API 分组名称。</li>
<li><code>resourceMode</code>：规则是针对 API Gateway 的 route（<code>RESOURCE_MODE_ROUTE_ID</code>）还是用户在 Sentinel 中定义的 API 分组（<code>RESOURCE_MODE_CUSTOM_API_NAME</code>），默认是 route。</li>
<li><code>grade</code>：限流指标维度，同限流规则的 <code>grade</code> 字段。</li>
<li><code>count</code>：限流阈值</li>
<li><code>intervalSec</code>：统计时间窗口，单位是秒，默认是 1 秒。</li>
<li><code>controlBehavior</code>：流量整形的控制效果，同限流规则的 <code>controlBehavior</code> 字段，目前支持快速失败和匀速排队两种模式，默认是快速失败。</li>
<li><code>burst</code>：应对突发请求时额外允许的请求数目。</li>
<li><code>maxQueueingTimeoutMs</code>：匀速排队模式下的最长排队时间，单位是毫秒，仅在匀速排队模式下生效。</li>
<li><code>paramItem</code>：参数限流配置。若不提供，则代表不针对参数进行限流，该网关规则将会被转换成普通流控规则；否则会转换成热点规则。其中的字段：<ul>
<li><code>parseStrategy</code>：从请求中提取参数的策略，目前支持提取来源 IP（<code>PARAM_PARSE_STRATEGY_CLIENT_IP</code>）、Host（<code>PARAM_PARSE_STRATEGY_HOST</code>）、任意 Header（<code>PARAM_PARSE_STRATEGY_HEADER</code>）和任意 URL 参数（<code>PARAM_PARSE_STRATEGY_URL_PARAM</code>）四种模式。</li>
<li><code>fieldName</code>：若提取策略选择 Header 模式或 URL 参数模式，则需要指定对应的 header 名称或 URL 参数名称。</li>
<li><code>pattern</code>：参数值的匹配模式，只有匹配该模式的请求属性值会纳入统计和流控；若为空则统计该请求属性的所有值。（1.6.2 版本开始支持）</li>
<li><code>matchStrategy</code>：参数值的匹配策略，目前支持精确匹配（<code>PARAM_MATCH_STRATEGY_EXACT</code>）、子串匹配（<code>PARAM_MATCH_STRATEGY_CONTAINS</code>）和正则匹配（<code>PARAM_MATCH_STRATEGY_REGEX</code>）。（1.6.2 版本开始支持）</li>
</ul>
</li>
</ul>
<blockquote>
<p>Url 限流可以根据 【自定义降级数据】章节的配置统一返回。其它方式需要指定</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC中文字符乱码</title>
    <url>/2022/01/02/SpringMVC%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用SpringMVC在返回一个字符串时发生了中文乱码问题。<code>produces</code>属性无效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/nihao&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>36</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 01 Aug 2021 12:20:21 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clover&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"></span></span><br></pre></td></tr></table></figure>

<p>添加常用的过滤器<code>org.springframework.web.filter.CharacterEncodingFilter</code>依然无法解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h2><p>最后查看源码时发现问题出现在处理内容协商的时候，SpringMVC使用了一个叫做<code>org.springframework.http.converter.StringHttpMessageConverter</code>的转换器进行处理<code>java.lang.String</code>。在这个处理器中，有个一默认的编码格式，它甚至使用了<code>final</code>修饰…..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;ISO-8859-1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>并且，通过Postman或者REST Client发送请求时，<code>Accept</code>默认是<code>*/*</code>。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>注册一个<code>StringHttpMessageConverter</code>，注册之后不再使用SpringMVC默认的。它可以将<code>produces</code>设置为<code>Content-Type</code>。也就是说<code>@RequestMapping</code>的<code>produces</code>属性生效了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Accept-Charset</span><span class="punctuation">: </span>...</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>37</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 01 Aug 2021 13:09:35 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clover&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"></span></span><br></pre></td></tr></table></figure>



<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>Accept问题，SpringMVC的默认<code>StringHttpMessageConverter</code>处理的是<code>*/*</code>，那手动设置一个Accept尽可能避开它…..</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">&#123;&#123;url&#125;&#125;/nihao</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/plain;charset=utf-8</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>38</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 01 Aug 2021 13:20:16 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clover&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSession 基本原理</title>
    <url>/2022/02/15/SpringSession-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="SpringSession-基本原理"><a href="#SpringSession-基本原理" class="headerlink" title="SpringSession 基本原理"></a>SpringSession 基本原理</h1><ol>
<li><p><code>@EnableRedisHttpSession</code> 引入了一个 <code>RedishttpSessionConfiguration</code> 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(RedisHttpSessionConfiguration.class)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>RedishttpSessionConfiguration</code> 配置中注册了一个 <code>RedisIndexedSessionRepository</code> bean。这是一个 Redis 操作 Session 的bean。</p>
<blockquote>
<p>org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration#sessionRepository</p>
</blockquote>
</li>
</ol>
<span id="more"></span>
<ol start="3">
<li><p><code>RedisHttpSessionConfiguration</code> 继承了 <code>SpringHttpSessionConfiguration</code> 这个配置</p>
</li>
<li><p>在 <code>SpringHttpSessionConfiguration</code> 配置中注册了一个 <code>SessionRepositoryFilter</code> bean。</p>
<blockquote>
<p>org.springframework.session.config.annotation.web.http.SpringHttpSessionConfiguration#springSessionRepositoryFilter</p>
</blockquote>
</li>
<li><p><code>SessionRepositoryFilter</code> 继承了一个 <code>Filter</code> 。由此得出，该 Bean 是一个 <strong>Servlet 过滤器</strong>，每个请求过来都需要经过这个过滤器，而这个过滤器调用了 <code>doFilterInternal</code> 方法。</p>
</li>
</ol>
<p>经过以上步骤可以判断出，<code>doFilterInternal</code> 是SpringSession的核心代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   request.setAttribute(SESSION_REPOSITORY_ATTR, <span class="built_in">this</span>.sessionRepository);</span><br><span class="line"></span><br><span class="line">   <span class="type">SessionRepositoryRequestWrapper</span> <span class="variable">wrappedRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionRepositoryRequestWrapper</span>(request, response);</span><br><span class="line">   <span class="type">SessionRepositoryResponseWrapper</span> <span class="variable">wrappedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionRepositoryResponseWrapper</span>(wrappedRequest,</span><br><span class="line">         response);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      filterChain.doFilter(wrappedRequest, wrappedResponse);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      wrappedRequest.commitSession();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getSession"><a href="#getSession" class="headerlink" title="getSession"></a>getSession</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">indexPage</span><span class="params">(HttpSession session)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">indexPage</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">  <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol>
<li><p>调用 <code>getSession()</code> 后会调用 <code>SessionRepositoryRequestWrapper</code> 中的 <code>getSession(boolean)</code> 方法</p>
</li>
<li><p>在当前 request 上下文中获取一个 session，如果有那么将这个session返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSessionWrapper</span> <span class="variable">currentSession</span> <span class="operator">=</span> getCurrentSession();</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果没有，那么就通过 <code>getRequestedSession()</code> 方法获取一个session。</p>
<blockquote>
<p>org.springframework.session.web.http.SessionRepositoryFilter.SessionRepositoryRequestWrapper#getRequestedSession</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">S</span> <span class="variable">requestedSession</span> <span class="operator">=</span> getRequestedSession();</span><br></pre></td></tr></table></figure>

<ol>
<li><p>查询sessionid，这个sessionid其实就是在 <strong>cookie 中拿到的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; sessionIds = SessionRepositoryFilter.<span class="built_in">this</span>.httpSessionIdResolver.resolveSessionIds(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历看看哪一个 sessionid 可以拿到session</p>
</li>
<li><p>通过 <code>SessionRepository</code> 根据这个sessionid去 redis 查</p>
</li>
<li><p>如果有则将session缓存、退出循环并标记已找到session</p>
</li>
</ol>
</li>
<li><p>如果获取到session那么久将session返回，如果没有就创建一个 RedisSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">S</span> <span class="variable">session</span> <span class="operator">=</span> SessionRepositoryFilter.<span class="built_in">this</span>.sessionRepository.createSession();</span><br><span class="line">currentSession = <span class="keyword">new</span> <span class="title class_">HttpSessionWrapper</span>(session, getServletContext());</span><br><span class="line"><span class="keyword">return</span> currentSession;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>org.springframework.session.SessionRepository#createSession </p>
</blockquote>
<p>最终创建了一个 <code>RedisSession</code> 返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> RedisSession <span class="title function_">createSession</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">MapSession</span> <span class="variable">cached</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapSession</span>();</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.defaultMaxInactiveInterval != <span class="literal">null</span>) &#123;</span><br><span class="line">      cached.setMaxInactiveInterval(Duration.ofSeconds(<span class="built_in">this</span>.defaultMaxInactiveInterval));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">RedisSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisSession</span>(cached, <span class="literal">true</span>);</span><br><span class="line">   session.flushImmediateIfNecessary();</span><br><span class="line">   <span class="keyword">return</span> session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h2><p><code>setAttribute</code> 方法调用之后，并不会立刻保存到 redis，而是先缓存到本地的一个</p>
<p><code>MapSession</code> ，在请求结束之后才调用包装后的 request 中的 <code>commitSession</code> 方法保存</p>
<blockquote>
<p>org.springframework.session.web.http.SessionRepositoryFilter.SessionRepositoryRequestWrapper#commitSession</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String attributeName, Object attributeValue)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.cached.setAttribute(attributeName, attributeValue);</span><br><span class="line">   <span class="built_in">this</span>.delta.put(getSessionAttrNameKey(attributeName), attributeValue);</span><br><span class="line">   flushImmediateIfNecessary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要设置后立刻保存，那么可以添加以下配置（不是）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.session.redis.flush-mode</span>=<span class="string">immediate</span></span><br></pre></td></tr></table></figure>

<p>是需要在启用SpringSession时开启（特喵的骗人…）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableRedisHttpSession(flushMode = FlushMode.IMMEDIATE)</span></span><br></pre></td></tr></table></figure>

<p>添加这个配置后 <code>flushImmediateIfNecessary</code> 就能够生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">flushImmediateIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (RedisIndexedSessionRepository.<span class="built_in">this</span>.flushMode == FlushMode.IMMEDIATE) &#123;</span><br><span class="line">      save();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h2><p>其实就是在本地缓存的 <code>MapSession</code> 里拿数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MapSession cached;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; delta = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span> &#123;</span><br><span class="line">  checkState();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.session.getAttribute(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getAttribute</span><span class="params">(String attributeName)</span> &#123;</span><br><span class="line">  <span class="type">T</span> <span class="variable">attributeValue</span> <span class="operator">=</span> <span class="built_in">this</span>.cached.getAttribute(attributeName);</span><br><span class="line">  <span class="keyword">if</span> (attributeValue != <span class="literal">null</span></span><br><span class="line">      &amp;&amp; RedisIndexedSessionRepository.<span class="built_in">this</span>.saveMode.equals(SaveMode.ON_GET_ATTRIBUTE)) &#123;</span><br><span class="line">    <span class="built_in">this</span>.delta.put(getSessionAttrNameKey(attributeName), attributeValue);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> attributeValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Spring</tag>
        <tag>Session</tag>
        <tag>SpringSession</tag>
        <tag>原理解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring与SpringMVC整合</title>
    <url>/2022/01/02/Spring%E4%B8%8ESpringMVC%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>SpringMVC和Spring整合的目的是为了分工明确。例如：SpringMVC的配置文件就来配置和网站转发逻辑以及网站功能有关的配置，如：视图解析器、文件上传解析器、支持ajax….</p>
<p>而Spring的配置文件用来配置和业务有关的，如：事物控制、数据源….</p>
<h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><p>可以在<code>resources</code>文件夹下创建三个配置文件:<code>include-config.xml</code>、<code>spring-config</code>、<code>springmvc-confg</code></p>
<p>在<code>include-config.xml</code>配置文件中使用spring提供的<code>import</code>标签引入并合并另外两个配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-config.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;springmvc-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就搞定了。。。</p>
<h1 id="Spring和SpringMVC分容器"><a href="#Spring和SpringMVC分容器" class="headerlink" title="Spring和SpringMVC分容器"></a>Spring和SpringMVC分容器</h1><p>Spring管理业务逻辑组件，SpringMVC管理控制器组件</p>
<p>在<code>SpringMVC</code>配置文件中指定扫描对象并且禁用默认规则</p>
<ul>
<li><code>type</code> 指定排除方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.ctong.springmvc&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>Spring</code> 配置文件中指定接管所有业务逻辑组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.ctong.springmvc&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后需要在<code>web.xml</code>文件中启动两个容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/2022/01/02/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SpringMVC学习笔记"><a href="#SpringMVC学习笔记" class="headerlink" title="SpringMVC学习笔记"></a>SpringMVC学习笔记</h1><ul>
<li>使用Spring来实现Web模块，简化Web开发</li>
<li>Spring为展现层提供的基于MVC设计理念的优秀的Web框架，是目前最主流的MVC框架之一</li>
<li>Spring3.0后全面超越Struts2，成为最优秀的MVC框架</li>
<li>SpringMVC通过一套MVC注解，让POJO(Plain Old Java Object&#x2F;普通的Java对象)成为处理请求的控制器，而无需实现任何接口</li>
<li>支持REST风格的URL请求</li>
<li>采用了松散耦合可插拔组件结构，比其他MVC框架更具扩展性和灵活性</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/R-C.4008554c694ec2cc55d912974aea6dd8.png" alt="MVC流程图"></p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><ul>
<li><p>SpringMVC是Spring的Web模块。所有模块的运行都是依赖核心模块（IOC）</p>
<ol>
<li><p>核心容器模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commons-logging-1.1.3.jar</span><br><span class="line">spring-aop-4.0.0.RELEASE.jar</span><br><span class="line">spring-beans-4.0.0.RELEASE.jar</span><br><span class="line">spring-context-4.0.0.RELEASE.jar</span><br><span class="line">spring-core-4.0.0.RELEASE.jar</span><br><span class="line">spring-expression-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>


</li>
<li><p>Web模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-web-4.0.0.RELEASE.jar</span><br><span class="line">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>SpringMVC思想是有一个前端控制器能拦截所有请求并智能派发。这个前端控制器是一个<strong>Servlet</strong>。所以它应该在web.xml中配置这个servlet拦截所有请求。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置SpringMVC DispatcherServlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--   contextConfigLocation: 指定配置文件路径     --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /*和/都是拦截所有请求。但/*的范围更大，还会拦截*.jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>创建一个MVC项目</p>
<h3 id="编写处理器"><a href="#编写处理器" class="headerlink" title="编写处理器"></a>编写处理器</h3><p>新建一个类<code>top.ctong.controller.MyFirstController</code>，需要使用注解的方式告诉Spring这个是一个处理器，可以处理请求。</p>
<p>可以使用注解的方式，这需要<code>context</code>名称空间和进行包扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFirstController</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>在SpringMVC中，<code>@Controller</code>不能随便加，它会被区分为处理器。当然，你也不能使用其它注解代替<code>@Controller</code>注解。</p>
<p>接下在写一个方法来处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myFirstRequest</span><span class="params">()</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Hello World！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>昨晚这些后还不够，你还要告诉SpringMVC你这个方法处理哪个请求，这时可以使用<code>@RequestMapping</code>。这个注解有一个<code>value</code>属性，这个属性用来指定你需要处理的路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myFirstRequest</span><span class="params">()</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>用浏览器发送这个请求后后端得到打印结果<code>localhost:[your port]/hello</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World！</span><br></pre></td></tr></table></figure>



<h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>你的方法直接返回一个字符串，SpringMVC会自动进行转发，Servlet会根据这个路径尝试去资源中找对应的资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转发到欢迎页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> /welcome.jsp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/welcome&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcomePage</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/pages/welcome.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-29%2021.03.11.png" alt="welcome页转发结果"></p>
<h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p>如果我们要转发视图，需要返回视图的具体路径，但我们页面都是在同一个目录下<code>/WEB-INF/pages</code>。可以让视图解析器自动帮我们加上，而且页面都是<code>jsp</code>，也可以通过视图解析器配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置视图解析器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springf ramework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--  前缀  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--  后缀  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转发到欢迎页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> /welcome.jsp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/welcome&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcomePage</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>客户端发送请求</li>
<li>来到tomcat服务器</li>
<li>SpringMVC的前端控制器收到所有请求</li>
<li>来看请求地址和<code>@RequestMapping</code>标注的哪个匹配，来找到使用哪个类的哪个方法</li>
<li>前端控制器找到了目标处理器和目标方法，直接利用反射执行目标方法</li>
<li>方法执行完成之后会有一个返回值，SpringMVC认为这个返回值就是要去的页面地址</li>
<li>拿到方法返回值以后，用视图解析器进行拼接字符串得到完整的页面地址</li>
<li>拿到页面地址，前端控制器帮我们转发到页面</li>
</ol>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p><code>@RequestMapping</code>注解其实就是告诉SpringMVC这个方法用来处理什么请求。在控制器的类定义及方法定义处都可标注</p>
<ul>
<li>类定义处<br>提供初步的请求映射信息，相对于WEB应用的根目录</li>
<li>方法处<br>提供进一步的细分映射信息，相对于类定义处的URL，若类定义处未标注<code>@RequestMapping</code>，则方法处标记的URL相对于WEB应用的根目录</li>
</ul>
<blockquote>
<p><code>DispatcherServlet</code>截获请求后，就通过控制器上的<code>@RequestMapping</code>提供的映射信息确定请求所对应的处理方法。</p>
</blockquote>
<h3 id="标注在类上"><a href="#标注在类上" class="headerlink" title="标注在类上"></a>标注在类上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/request_mapping&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingTestController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试RequestMapping</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> welcome.jsp</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;testRequestMapping输出了···&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-07-30%2011.06.59.png" alt="标注在类上的RequestMapping测试结果"></p>
<h3 id="规定请求方式"><a href="#规定请求方式" class="headerlink" title="规定请求方式"></a>规定请求方式</h3><p><code>@RequestMapping</code>默认可以处理所有方式的请求，若需要限定请求方式，可以通过<code>method</code>属性指定。</p>
<p>它支持这么多种请求方式<code>GET</code> <code>HEAD</code> <code>POST</code> <code>PUT</code> <code>PATCH</code> <code>DELETE</code> <code>OPTIONS</code> <code>TRACE</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试RequestMapping的method属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/testRequestMappingMethod&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMappingMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时发送GET请求时，发生405错误</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;rquest_mapping_api&#125;&#125;/test_request_mapping_method</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">405</span> Method Not Allowed</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Allow</span><span class="punctuation">: </span>POST</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>689</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 04:18:44 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<p>使用对应请求方式请求通过</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;rquest_mapping_api&#125;&#125;/test_request_mapping_method</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=FD4CF51D92D3A2105958A5AE4DC6DF54; Path=/SpringMvcHelloWorld_war_exploded; HttpOnly</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1222</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 04:21:09 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>





<h3 id="规定请求参数"><a href="#规定请求参数" class="headerlink" title="规定请求参数"></a>规定请求参数</h3><p>在<code>@RequestMapping</code>中，有个<code>params</code>参数，它用于规定请求中必须存在指定参数。它还支持简单表达式</p>
<ul>
<li><code>param1</code>表示请求必须包含名为<code>param1</code>的参数</li>
<li><code>!param1</code>表示请求必须不携带<code>param1</code>参数</li>
<li><code>param1=xxx</code>表示请求必须包含<code>param1</code>参数，并且值为<code>xxx</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试RequestMapping的method属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test_request_mapping_params&quot;, method = RequestMethod.POST,</span></span><br><span class="line"><span class="meta">                params = &#123;&quot;userName&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMappingParam</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果当前请求没有携带指定参数，那么返回响应404</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;rquest</span> _mapping_api&#125;&#125;/test_request_mapping_params <span class="string">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">404</span> Not Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>649</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 04:34:58 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<p>携带参数后正常访问</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;rquest_mapping_api&#125;&#125;/test_request_mapping_params?userName=CLOVER</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1222</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 04:38:43 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<p>使用<code>非</code>表达式后，这个请求直接404</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">404</span> Not Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>649</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 04:42:16 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>



<h3 id="规定请求头"><a href="#规定请求头" class="headerlink" title="规定请求头"></a>规定请求头</h3><p>根据你的规则定制请求头参数，如果不满足你的规则，那么返回404。用法与<a href="###%E8%A7%84%E5%AE%9A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0">规定请求参数</a>一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定请求头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test_request_mapping_headers&quot;, headers = &#123;&quot;author&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMappingHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;rquest_mapping_api&#125;&#125;/test_request_mapping_headers</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">author</span><span class="punctuation">: </span>clover</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1222</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 04:59:04 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>



<h3 id="Ant风格的URL"><a href="#Ant风格的URL" class="headerlink" title="Ant风格的URL"></a>Ant风格的URL</h3><p>Ant风格资源地址支持3中匹配符</p>
<ul>
<li><code>?</code> 匹配文件名中的一个字符</li>
<li><code>*</code> 匹配文件名中的任意字符</li>
<li><code>**</code> 匹配多层路径</li>
</ul>
<p><code>@RequestMapping</code>还支持Ant风格的URL</p>
<ul>
<li><code>/user/*/createUser</code>匹配<code>/user/aaa/createUser</code>、<code>/user/bbb/createUser</code>等URL</li>
<li><code>/user/**/createUser</code>匹配<code>/user/createUser</code>、<code>/user/aaa/bbb/createUser</code>等URL</li>
<li><code>/user/createUser??</code>匹配<code>/user/createUseraaa</code>、<code>/user/createUser/bb</code>等URL</li>
</ul>
<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><ul>
<li>带占位符的URL是Spring3.0新增的功能，该功能在SpringMVC向REST目标挺进发中过程中具有里程碑的意义</li>
<li>通过<code>@PathVariable</code>可以将URL中占位符参数绑定到控制器处理方法的入参中。URL中的<code>&#123;xxx&#125;</code>占位符可以通过<code>@PathVariable(“xxx”)</code>绑定到操作方法的入参中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPathVariable</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id=&quot;</span>+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;path_variable&#125;&#125;/delete/2020-13</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 05:49:34 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">id</span><span class="operator">=</span><span class="number">2020</span>-<span class="number">13</span></span></span><br></pre></td></tr></table></figure>

<p><em>路径上的占位符只能占一层路径</em></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/&#123;&#123;path_variable&#125;&#125;/delete/hia/2020-13</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">404</span> Not Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>649</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 05:56:05 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>



<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><ul>
<li>REST 即Representational State Transfer。（资源）表现层状态转化。<strong>是目前最流行的一种互联网软件架构。</strong>它结构清晰、符合标准、易于理解、扩展方便，所以才能得到越来越多网站的采用</li>
<li>资源（Resources）网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌、一种服务，总之就是一个具体的存在。可以用一个URL（统一资源定位符）指向它，每种资源对应一个特定的URL。需要获取这个资源，访问它的URL就可以。因此URL即为每一个资源独一无二的识别符。</li>
<li>表现层（Representational）把具体资源呈现出来的形式，叫做它的表现层。比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式</li>
<li>状态转化（State Transfer）每发出一个请求，就代表客户端和服务器的一次交互过程。HTTp协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”。而这种转化是建立在表现层之上的。所以就是“表现层状态转化”。具体说就是<strong>HTTP协议里面，四哥表示操作方式的动词：GET、POST、PUT、DELETE。他们分别对应四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。</strong></li>
</ul>
<blockquote>
<p>REST风格URL：<code>/资源名/资源标识符</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestStyleController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;userId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get user: &quot;</span> + userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;userId&#125;&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable</span> String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update user: &quot;</span> + userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;userName&#125;&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@PathVariable</span> String userName, String pass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add user: &quot;</span> + userName + <span class="string">&quot;; pass: &quot;</span> + pass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;userName&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete user: &quot;</span> + userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GET方式</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/rest/user/8848</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>14</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 06:37:58 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="keyword">get</span> <span class="keyword">user</span>: <span class="number">8848</span></span></span><br></pre></td></tr></table></figure>



<p>POST方式</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">&#123;&#123;url&#125;&#125;/rest/user/clover?pass=123</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>25</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 06:38:38 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-llvm"><span class="keyword">add</span> user: clover<span class="comment">; pass: 123</span></span></span><br></pre></td></tr></table></figure>



<p>PUT方式</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">&#123;&#123;url&#125;&#125;/rest/user/8848</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>17</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 06:38:49 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-n1ql"><span class="keyword">update</span> <span class="keyword">user</span>: <span class="number">8848</span></span></span><br></pre></td></tr></table></figure>



<p>DELETE方式</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="string">&#123;&#123;url&#125;&#125;/rest/user/8848</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>17</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 31 Jul 2021 06:39:11 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-n1ql"><span class="keyword">delete</span> <span class="keyword">user</span>: <span class="number">8848</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>高版本tomcat（8.0+）jsp页面只允许GTE、POST、HEAD请求访问</p>
</blockquote>
<h2 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h2><p>由于每一种请求方式、请求类型的不同，需要从不同的地方获取参数，此时可以使用SpringMVC提供的几个注解从指定位置获取参数。</p>
<h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>默认方式获取请求参数，可以在方法上写一个和请求参数名相同的变量，SpringMVC会根据这个变量的变量名获取到对应的请求参数，<strong>如果获取不到这个参数值，那么默认null。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/not_request_param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">noRequestParam</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/param/not_request_param?userName=Clover</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userName=Clover</span><br></pre></td></tr></table></figure>

<p>通过<code>@RequestParam</code>注解，可以指定获取请求参数的值。如果不指定<code>value</code>那么默认<code>value</code>就是被标注的参数的参数名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/request_param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">requestParam</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;userName=&quot;</span> + userName);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/param/request_param?userName=Clover</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userName=Clover</span><br></pre></td></tr></table></figure>

<p>如果指定参数不存在，那么会出现400的请求错误，被当前注解标注的参数，表示该参数是必须的。可以通过<code>required</code>属性声明当前参数并不是必须的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">requestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;...&quot;, required = false)</span> ...)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>当<code>required</code>属性为<code>false</code>时，可以通过<code>defaultValue</code>来为当前变量设置一个默认值。如果请求没有携带指定参数，那么就会使用<code>defaultValue</code>中定义的值作为参数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">requestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;...&quot;, required = false, defaultValue = &quot;Clover&quot;)</span> ...)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>





<h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>用于获取请求头中的某个key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestHeader的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/request_header&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">requestHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;author&quot;)</span> String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;author=&quot;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/param/request_header</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">author</span><span class="punctuation">: </span>Clover</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">author=Clover</span><br></pre></td></tr></table></figure>

<p>用法与<code>@RequestParam</code>一致</p>
<h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h3><p>获取指定cookie值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestHeader的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cookie_value&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">cookieValue</span><span class="params">(<span class="meta">@CookieValue(&quot;cookieName&quot;)</span> String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;cookieName=&quot;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/param/cookie_value</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>cookieName=&quot;Clover cookie&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cookieName=Clover cookie</span><br></pre></td></tr></table></figure>

<p>用法与<code>@RequestParam</code>一致</p>
<h3 id="POJO参数"><a href="#POJO参数" class="headerlink" title="POJO参数"></a>POJO参数</h3><p>如果我们的请求参数是一个POJO，那么SpringMVC会自动为这个POJO赋值</p>
<ul>
<li>将POJO中的每一个属性，从request中获取出来并封装。</li>
<li>支持集联封装</li>
<li>请求参数的参数名要和对象中的属性名一一对应</li>
</ul>
<p>pojo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short stock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short sales;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 街道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/pojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">usePOJO</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    System.out.println(book);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">&#123;&#123;url&#125;&#125;/param/pojo</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"><span class="language-dts">bookN<span class="attr">ame</span><span class="operator">=</span>SpringMVC<span class="variable">&amp;author</span>=Clover<span class="variable">&amp;price</span>=<span class="number">9.99</span><span class="variable">&amp;stock</span>=<span class="number">2048</span><span class="variable">&amp;sales</span>=<span class="number">1024</span><span class="variable">&amp;address</span>.<span class="attr">province</span><span class="operator">=</span>广东省<span class="variable">&amp;address</span>.<span class="attr">city</span><span class="operator">=</span>广州市<span class="variable">&amp;address</span>.<span class="attr">street</span><span class="operator">=</span>xxx街道</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;bookName&quot;:&quot;SpringMVC&quot;,&quot;author&quot;:&quot;Clover&quot;,&quot;price&quot;:9.99,&quot;stock&quot;:2048,&quot;sales&quot;:1024,&quot;address&quot;:&#123;&quot;province&quot;:&quot;广东省&quot;,&quot;city&quot;:&quot;广州市&quot;,&quot;street&quot;:&quot;xxx街道&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="原生API"><a href="#原生API" class="headerlink" title="原生API"></a>原生API</h3><p>SpringMVC支持原生API参数例如：<code>HttpServletRequest</code>、<code>HttpSession</code>等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/primitiveAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">primitiveAPI</span><span class="params">(HttpSession session, HttpServletRequest request)</span> &#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;session&quot;</span>,<span class="string">&quot;hi!&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;req&quot;</span>, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/param/primitiveAPI</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Welcome~~~&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;Request: $&#123;requestScope.req&#125;&lt;/h1&gt;&lt;br/&gt;</span><br><span class="line">  &lt;h1&gt;Session: $&#123;sessionScope.session&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-08-01%2015.08.20.png" alt="原生API写入结果"></p>
<p>原生API也只能传个别的，并不是全部都能传：</p>
<ul>
<li><code>HttpServletRequest</code></li>
<li><code>HttpServletResponse</code></li>
<li><code>HttpSession</code></li>
<li><code>java.security.Principal</code></li>
<li><code>Locale</code></li>
<li><code>InputStream</code></li>
<li><code>OutputStream</code></li>
<li><code>Reader</code></li>
<li><code>Writer</code></li>
</ul>
<h2 id="SpringMVC解决中文乱码"><a href="#SpringMVC解决中文乱码" class="headerlink" title="SpringMVC解决中文乱码"></a>SpringMVC解决中文乱码</h2><p>如果遇到<code>POST</code>中文乱码问题，可以使用SpringMVC中提供的<code>org.springframework.web.filter.CharacterEncodingFilter</code>过滤器。过滤字符编码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC提供的字符编码过滤器 设置字符编码 解决中文乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--    解决请求乱码    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--    解决响应乱码    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h2><p>SpringMVC除了在方法上传入原生的request和session外，还能在方法上传入Map、Model、或者ModelMap。给这些参数里面保存的所有数据都会被放在请求域中。可以通过JSP页面获取</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/byMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">byMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;使用了Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;output/displayData&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Map会被放在request域对象中</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;pageContext域对象: $&#123;pageContext.msg&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>



<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/byModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">byModel</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;使用了Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;output/displayData&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Model会被放在request域中</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;request域对象: $&#123;requestScope.msg&#125;&lt;/h1&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="ModelMap"><a href="#ModelMap" class="headerlink" title="ModelMap"></a>ModelMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/byModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">byModel</span><span class="params">(ModelMap model)</span> &#123;</span><br><span class="line">    model.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;使用了ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;output/displayData&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样会放在域对象</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;request域对象: $&#123;requestScope.msg&#125;&lt;/h1&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>除了使用以上三种类型作为方法参数外，还可以将方法返回值设置为<code>ModelAndView</code>。它既包含视图信息也包含模型数据。而且数据是放在请求域中的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/byModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">byModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;output/displayData&quot;</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;byModelAndView&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;request域对象: $&#123;requestScope.msg&#125;&lt;/h1&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p>给BindingAwareModelMap中保存的数据，或者ModelAndView中保存的数据，同时也给session中保存一份。</p>
<p>它只能写在类上，并且它有两个属性</p>
<ol>
<li><code>value</code> 保存数据时要给session中放的数据的key</li>
<li><code>types</code> 保存数据时，如果这个数据的类型与<code>types</code>中的类型一致才保存。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes(&quot;msg&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/output&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputDataController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/byMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">byMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;使用了Map&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;output/displayData&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;request域对象: $&#123;requestScope.msg&#125;&lt;/h1&gt;&lt;br/&gt;</span><br><span class="line">&lt;h1&gt;session域对象: $&#123;sessionScope.msg&#125;&lt;/h1&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><p>这个注解可以标注在两处位置：方法上、方法参数上</p>
<ul>
<li>参数：取出model中保存的数据</li>
<li>方法上：每次有请求过来时，被标注的方法都会先于目标方法运行。在此可以保存一些必要信息到request域对象中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟查询数据库数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/byModelAttribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">byModelAttribute</span><span class="params">(<span class="meta">@ModelAttribute(&quot;user&quot;)</span> User user)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user ==========&gt;&gt;&gt;&gt;&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;output/displayData&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user ==========&gt;&gt;&gt;&gt;&gt; &#123;&quot;name&quot;:&quot;Clover&quot;,&quot;sex&quot;:&quot;男&quot;,&quot;age&quot;:19&#125;</span><br></pre></td></tr></table></figure>

<p><code>@ModelAttribute</code>还有一个功能，就是，如果前端传了这个参数，那么就使用前端的参数将对应属性进行覆盖。</p>
<p>例如这个请求，我传了一个<code>name</code>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx/output/byModelAttribute?name=Ali总裁</span><br></pre></td></tr></table></figure>

<p>后台打印结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user ==========&gt;&gt;&gt;&gt;&gt; &#123;&quot;name&quot;:&quot;Ali总裁&quot;,&quot;sex&quot;:&quot;男&quot;,&quot;age&quot;:19&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DispatcherServlet-分析"><a href="#DispatcherServlet-分析" class="headerlink" title="DispatcherServlet 分析"></a>DispatcherServlet 分析</h2><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/DispatcherServlet.png" alt="DispatcherServlet继承图"></p>
<h3 id="请求大致处理流程"><a href="#请求大致处理流程" class="headerlink" title="请求大致处理流程"></a>请求大致处理流程</h3><p>发送请求时，这个请求会被<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>方法处理。</p>
<ul>
<li><p>检查当前请求是否为文件上传请求，如果是文件上传请求，重新包装<code>request</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = processedRequest != request;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据请求地址到所有Controller中找，看哪个Controller能处理当前请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>handlerMappings</code>保存了所有的handler映射信息。在ioc容器创建Controller对象的时候，扫描每个处理器都能处理什么请求，然后将其保存在HandlerMapping的handlerMap中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (HandlerMapping hm : <span class="built_in">this</span>.handlerMappings) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查当前handler是否支持处理这个<code>request</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> hm.getHandler(request);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果支持处理当前请求那么就将匹配到的handler直接返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>如果没有找到或者说没有handler能处理这个请求，那么就抛出异常或者转发到404页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="literal">null</span> || mappedHandler.getHandler() == <span class="literal">null</span>) &#123;</span><br><span class="line">   noHandlerFound(processedRequest, response);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拿到这个handler的适配器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>

<ul>
<li><p>循环便利所有的<code>handlerAdapters</code>，默认情况下只有三个adapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (HandlerAdapter ha : <span class="built_in">this</span>.handlerAdapters)&#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过调用每个Adapter的<code>supports</code>方法确定当前adpter是否支持处理这个<strong>handler</strong></p>
</li>
</ul>
</li>
<li><p>适配器执行目标方法。将目标方法执行完成后的返回结果作为视图名，设置保存到<code>ModelAndView</code>中。目标方法无论怎么写，最终适配器执行完成后都会将执行结果封装成<code>ModelAndView</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据方法最终执行完成后封装的ModelAndView转发到对应页面，并且ModelAndView中的数据可以从请求域中获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="SpringMVC九大组件"><a href="#SpringMVC九大组件" class="headerlink" title="SpringMVC九大组件"></a>SpringMVC九大组件</h3><p><code>org.springframework.web.servlet.DispatcherServlet</code>中有九大组件。SpringMVC在工作的时候都是由这些组件来完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 文件上传解析器 */</span></span><br><span class="line"><span class="keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 区域信息解析器「国际化」 */</span></span><br><span class="line"><span class="keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 主题解析器 */</span></span><br><span class="line"><span class="keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerMappings used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** handler适配器 */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** SpringMVC强大的异常解析器 */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** RequestToViewNameTranslator used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** SpringMVC中允许重定向携带数据的功能*/</span></span><br><span class="line"><span class="keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 视图解析器 */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>他们都有一个共同点：他们都是接口</p>
<blockquote>
<p>接口就是规范</p>
</blockquote>
<p>SpringMVC九大组件在<code>org.springframework.web.servlet.DispatcherServlet#onRefresh</code>方法中进行初始化。在初始化过程中，全部组件都是从ioc容器中获取，但如果ioc容器中没有这个组件，就使用默认策略。这个默认策略都在<code>spring-webmvc-4.0.0.RELEASE.jar!/org/springframework/web/servlet/DispatcherServlet.properties</code>文件中定义好了</p>
<h3 id="执行目标方法源码分析"><a href="#执行目标方法源码分析" class="headerlink" title="执行目标方法源码分析"></a>执行目标方法源码分析</h3><p>目标方法<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>。</p>
<ul>
<li><p>跳过其它，<strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查当前这个类(controller)是否已经被缓存在<code>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#sessionAnnotatedClassesCache</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">annotatedWithSessionAttributes</span> <span class="operator">=</span> <span class="built_in">this</span>.sessionAnnotatedClassesCache.get(clazz);</span><br></pre></td></tr></table></figure>


</li>
<li><p>如果这个类的指定注解状态没有被缓存，那么就去检查这个类是否存在这个注解<code>@SessionAttributes</code>。最后将检查结果缓存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (annotatedWithSessionAttributes == <span class="literal">null</span>) &#123;</span><br><span class="line">  annotatedWithSessionAttributes = (AnnotationUtils.findAnnotation(clazz, SessionAttributes.class) != <span class="literal">null</span>);</span><br><span class="line">  <span class="built_in">this</span>.sessionAnnotatedClassesCache.put(clazz, annotatedWithSessionAttributes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它代码不管，直接跳到最后一行，<strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> invokeHandlerMethod(request, response, handler);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取方法解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletHandlerMethodResolver</span> <span class="variable">methodResolver</span> <span class="operator">=</span> getMethodResolver(handler);</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据解析器解析当前请求，检查哪个方法能够处理处理当前请求，最后拿到一个<code>Method</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> methodResolver.resolveHandlerMethod(request);</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据方法解析器创建一个方法执行器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletHandlerMethodInvoker</span> <span class="variable">methodInvoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletHandlerMethodInvoker</span>(methodResolver);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个<code>org.springframework.validation.support.BindingAwareModelMap</code>，之前使用<code>ModelAttribute</code>获取的什么Map、Model、ModelMap就是使用的是它。貌似它<strong>非常重要、非常重要、非常重要</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExtendedModelMap</span> <span class="variable">implicitModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindingAwareModelMap</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行目标方法，利用反射执行期间确定参数值、提前执行<code>ModelAttribute</code>等所有操作都在这个方法中完成  <strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodInvoker.invokeHandlerMethod(handlerMethod, handler, webRequest, implicitModel);</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查调用的方法是否为桥接方法，如果是，那么尽可能找到原方法(不清楚是不是这个逻辑)。<a href="https://www.cnblogs.com/heihaozi/p/14142671.html">可以到这里了解桥接方法是什么</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">handlerMethodToInvoke</span> <span class="operator">=</span> BridgeMethodResolver.findBridgedMethod(handlerMethod);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取SessionAttribute指定的名字。如果有，那么将它的值保存到<code>implicitModel</code>。看到这这貌似是一个域对象？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String attrName : <span class="built_in">this</span>.methodResolver.getActualSessionAttributeNames()) &#123;</span><br><span class="line">   <span class="type">Object</span> <span class="variable">attrValue</span> <span class="operator">=</span> <span class="built_in">this</span>.sessionAttributeStore.retrieveAttribute(webRequest, attrName);</span><br><span class="line">   <span class="keyword">if</span> (attrValue != <span class="literal">null</span>) &#123;</span><br><span class="line">      implicitModel.addAttribute(attrName, attrValue);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取这个controller中是否存在被<code>@ModelAttribute</code>标注的类，并循环它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method attributeMethod : <span class="built_in">this</span>.methodResolver.getModelAttributeMethods()) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取到这个被标注的方法<code>@ModelAttribute</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">attributeMethodToInvoke</span> <span class="operator">=</span> BridgeMethodResolver.findBridgedMethod(attributeMethod);</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定方法执行是所需要的所有参数的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] args = resolveHandlerArguments(attributeMethodToInvoke, handler, webRequest, implicitModel);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前方法中<code>@ModelAttribute</code>的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(attributeMethod, ModelAttribute.class).value();</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>@ModelAttribute</code>的值判断如果当前域对象中存在这个属性，那么就跳出当前循环。在这里证明了，被<code>@ModelAttribute</code>标注的方法无法覆盖域对象中存在的属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(attrName) &amp;&amp; implicitModel.containsAttribute(attrName)) &#123;</span><br><span class="line">	<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始执行这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">attrValue</span> <span class="operator">=</span> attributeMethodToInvoke.invoke(handler, args);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果<code>@ModelAttribute</code>注解没有制定value，那么就使用返回值类型名称的小驼峰作为value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(attrName)) &#123;</span><br><span class="line">   Class&lt;?&gt; resolvedType = GenericTypeResolver.resolveReturnType(attributeMethodToInvoke, handler.getClass());</span><br><span class="line">   attrName = Conventions.getVariableNameForReturnType(attributeMethodToInvoke, resolvedType, attrValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后把目标方法的返回值添加到<code>BindingAwareModelMap</code>中，以attrName作为key。到此<code>ModelAttribute</code>执行结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!implicitModel.containsAttribute(attrName)) &#123;</span><br><span class="line">   implicitModel.addAttribute(attrName, attrValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>确定目标方法执行时所需要的参数值 <strong>Step Into</strong>进去看看怎么为POJO赋值的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] args = resolveHandlerArguments(handlerMethodToInvoke, handler, webRequest, implicitModel);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取到所有参数。并且创建一个<code>Object[]</code>，用于接收对应的参数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt;[] paramTypes = handlerMethod.getParameterTypes();</span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[paramTypes.length];</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环处理所有参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到当前参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MethodParameter</span> <span class="variable">methodParam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodParameter</span>(handlerMethod, i);</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化<code>parameterNameDiscoverer</code>，为了后面获取参数名，这是Spring提供的工具</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodParam.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它不认识，跳过…</p>
</li>
<li><p>获取到参数中所有的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Annotation[] paramAnns = methodParam.getParameterAnnotations();</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环处理所有的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Annotation paramAnn : paramAnns) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据判断找到对应的注解，我当前这个方法有一个参数所POJO，它有一个注解<code>@ModelAttribute(&quot;user&quot;)</code>。它会根据对应注解进行对应操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (RequestParam.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (RequestHeader.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (RequestBody.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (CookieValue.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PathVariable.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ModelAttribute.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Value.class.isInstance(paramAnn)) &#123;...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (paramAnn.annotationType().getSimpleName().startsWith(<span class="string">&quot;Valid&quot;</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断是不是有重复注解，如果有那么抛出异常。在这里证明，在SpringMVC中注解只能使用一个，并且只能使用上一步标出来的那些注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (annotationsFound &gt; <span class="number">1</span>) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Handler parameter annotations are exclusive choices - &quot;</span> +</span><br><span class="line">         <span class="string">&quot;do not specify more than one such annotation on the same parameter: &quot;</span> + handlerMethod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果自定义类型没有注解的情况下处理流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (annotationsFound == <span class="number">0</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>检查是否为原生API，如果是就根据API赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">argValue</span> <span class="operator">=</span> resolveCommonArgument(methodParam, webRequest);</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查参数是否为Model类型，如果是就直接吧<code>implicitModel</code>丢过去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; paramType = methodParam.getParameterType();</span><br><span class="line"><span class="keyword">if</span> (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">   <span class="keyword">if</span> (!paramType.isAssignableFrom(implicitModel.getClass())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Argument [&quot;</span> + paramType.getSimpleName() + <span class="string">&quot;] is of type &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Model or Map but is not assignable from the actual model. You may need to switch &quot;</span> +</span><br><span class="line">            <span class="string">&quot;newer MVC infrastructure classes to use this argument.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   args[i] = implicitModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它类型不认识，不管…</p>
</li>
<li><p>判断如果是基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (BeanUtils.isSimpleProperty(paramType)) &#123;</span><br><span class="line">  paramName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上其它都不是，就把<code>attrName</code>初始化为空字符串</p>
</li>
</ul>
</li>
<li><p>这些不管</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (paramName != <span class="literal">null</span>) &#123;</span><br><span class="line">   args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (headerName != <span class="literal">null</span>) &#123;</span><br><span class="line">   args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (requestBodyFound) &#123;</span><br><span class="line">   args[i] = resolveRequestBody(methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cookieName != <span class="literal">null</span>) &#123;</span><br><span class="line">   args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pathVarName != <span class="literal">null</span>) &#123;</span><br><span class="line">   args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析POJO参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (attrName != <span class="literal">null</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>确定自定义类型参数的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> WebDataBinder <span class="title function_">resolveModelAttribute</span><span class="params">(String attrName, MethodParameter methodParam,</span></span><br><span class="line"><span class="params">      ExtendedModelMap implicitModel, NativeWebRequest webRequest, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Bind request parameter onto object...</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> attrName;</span><br><span class="line">  <span class="comment">// 如果指定注解的value值为空，那么就获取参数名给到attrName</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(name)) &#123;</span><br><span class="line">      name = Conventions.getVariableNameForParameter(methodParam);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 获取参数类型</span></span><br><span class="line">   Class&lt;?&gt; paramType = methodParam.getParameterType();</span><br><span class="line">  <span class="comment">// 目标对象的值</span></span><br><span class="line">   Object bindObject;</span><br><span class="line">  <span class="comment">// 判断implicitModel中是否有这个属性，如果有就直接赋值</span></span><br><span class="line">   <span class="keyword">if</span> (implicitModel.containsKey(name)) &#123;</span><br><span class="line">      bindObject = implicitModel.get(name);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//在session中获取对应的value，并且value类型要一致</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.methodResolver.isSessionAttribute(name, paramType)) &#123;</span><br><span class="line">      bindObject = <span class="built_in">this</span>.sessionAttributeStore.retrieveAttribute(webRequest, name);</span><br><span class="line">      <span class="keyword">if</span> (bindObject == <span class="literal">null</span>) &#123;</span><br><span class="line">         raiseSessionRequiredException(<span class="string">&quot;Session attribute &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; required - not found in session&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 如果以上几步都无法确定值，那么就使用反射创建一个对象</span></span><br><span class="line">      bindObject = BeanUtils.instantiateClass(paramType);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> createBinder(webRequest, bindObject, name);</span><br><span class="line">   initBinder(handler, name, binder, webRequest);</span><br><span class="line">   <span class="keyword">return</span> binder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>开始通过反射调用目标方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handlerMethodToInvoke.invoke(handler, args);</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>如果是自定义类型，那么赋值时只有两种结果，要么根据指定注解的value找，要么是空串</p>
</blockquote>
</li>
</ul>
<h2 id="视图和视图解析器"><a href="#视图和视图解析器" class="headerlink" title="视图和视图解析器"></a>视图和视图解析器</h2><h3 id="视图解析器-1"><a href="#视图解析器-1" class="headerlink" title="视图解析器"></a>视图解析器</h3><ul>
<li>请求处理方法执行后，最终返回一个<code>ModelAndView</code>对象。对于那些放回String、View或者ModelMap等类型的处理方法，SpringMVC也会在内部将他们装配成一个<code>ModelAndView</code>对象，它包含了逻辑名和模型对象的视图。</li>
<li>SpringMVC借助视图解析器（ViewResolver）得到最终的视图对象（View），最终的视图可以是JSP，也可能是Excel、JFreeChart等各种表现形式的视图</li>
<li>对于最终究竟采用哪种视图对象对模型数据进行渲染，处理器并不关心。处理器工作重点聚焦在生产模型数据的工作上，从而实现MVC的充分解耦。</li>
</ul>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li>视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户。</li>
<li>为了实现视图模型和具体实现技术的解耦，Spring定义了一个高度抽象的View接口<code>org.springframework.web.servlet.View</code></li>
<li>视图对象由视图解析器负责实例化。由于视图是无状态的，所以他们不会有线程安全问题。</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A7%86%E5%9B%BE%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="常用的视图实现类"></p>
<h3 id="转发-1"><a href="#转发-1" class="headerlink" title="转发"></a>转发</h3><p>使用<code>forward</code>将当前请求转发到一个指定的页面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/view_resolver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewResolverController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">view</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/pages/view_resolver/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/view_resolver</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=839F1BA4F614AEE5B2758EE57FCF0283; Path=/; HttpOnly</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-Hans-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1210</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 03 Aug 2021 07:55:28 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<p>使用<code>forward</code>前缀的转发不会由我们配置的视图解析器拼接字符串</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>使用<code>redirect</code>将一个请求重定向到另一个页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/view_resolver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewResolverController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redirect_page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirectPage</span><span class="params">()</span> &#123;</span><br><span class="line">        LogUtils.info(<span class="string">&quot;当前是/view_resolver/redirect_page&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view_resolver/redirectPage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redirect&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span> &#123;</span><br><span class="line">        LogUtils.info(<span class="string">&quot;当前是/view_resolver/redirect， 准备重定向...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/view_resolver/redirect_page&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/view_resolver/redirect</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-Hans-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1214</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 03 Aug 2021 08:49:00 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前是/view_resolver/redirect， 准备重定向...</span><br><span class="line">当前是/view_resolver/redirect_page</span><br></pre></td></tr></table></figure>

<p><code>/</code>代表从当前项目下开始</p>
<blockquote>
<p>有前缀的转发和重定向操作视图解析器就不会拼接配置的字符串</p>
</blockquote>
<h3 id="视图解析流程"><a href="#视图解析流程" class="headerlink" title="视图解析流程"></a>视图解析流程</h3><ol>
<li>方法执行后的返回值会作为页面地址参考，转发或重定向到页面</li>
<li>在配置了视图解析器的情况下可能会进行页面地址的拼接</li>
</ol>
<p>略过其他，直接定位到<code>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#invokeHandlerMethod</code>。</p>
<ul>
<li><p>在目标方法执行完后拿到返回值<code>redirect:/view_resolver/redirect_page</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodInvoker.invokeHandlerMethod(handlerMethod, handler, webRequest, implicitModel);</span><br></pre></td></tr></table></figure>
</li>
<li><p>无论返回值是什么，都会包装成为一个<code>ModelAndView</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> methodInvoker.getModelAndView(handlerMethod, handler.getClass(), result, implicitModel, webRequest);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>invokeHandlerMethod</code>这个方法执行完后直接回到<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code></p>
<ul>
<li><p>拿到包装好的ModelAndView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理<code>ModelAndView</code>。<strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果之前有什么错误，这里可以处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">      mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">      mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">      errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果没有什么错误就可以渲染页面，就看这个方法，其它不看，<strong>Step Into</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">render(mv, request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明一个空的<code>View</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">View view;</span><br></pre></td></tr></table></figure>

<p><code>View</code>与<code>ViewResolver</code>的关系： <code>ViewResolver</code>是一个接口，它里面只有一个方法 &#x3D;&#x3D;&gt; </p>
<p><code>View resolveViewName(String viewName, Locale locale) throws Exception;</code></p>
</li>
<li><p>如果还没有解析视图，那么就通过视图名称去解析它。<strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br></pre></td></tr></table></figure>
</li>
<li><p>我在配置文件中有配置到一个视图解析器，所以SpringMVC在启动的时候不会帮我们创建视图解析器。所以这里只获取到一个视图解析器。拿到视图解析器后，通过视图解析器来解析视图，解析失败时返回null。<strong>Step Out</strong>出去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (ViewResolver viewResolver : <span class="built_in">this</span>.viewResolvers) &#123;</span><br><span class="line">  <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">  <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果成功拿到一个视图解析器，那么就调用这个视图解析器的<code>render</code>方法.<strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>不认识忽略….在<code>render</code>方法的最后一步进行渲染<strong>Step Into</strong>进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">renderMergedOutputModel(mergedModel, request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>不认识….忽略</p>
</li>
<li><p>将Model中的所有属性暴露到request。实际上就是将所有的Map中的项目设置到request。<code>request.sertAttributre(Map.Key, Map.Value)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">exposeModelAsRequestAttributes(model, requestToExpose);</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定转发的路径，因为它是根据forward前缀给我们new了<code>InternalResourceView</code>。这是一个<strong>转发器</strong>？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dispatcherPath</span> <span class="operator">=</span> prepareForRendering(requestToExpose, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rd.forward(requestToExpose, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>完了…</p>
</li>
</ul>
<blockquote>
<p>视图解析器只是为了得到视图对象。视图对象才能真正的转发或重定向到页面视图对象才能真正的渲染视图</p>
</blockquote>
<h3 id="自定义视图和视图解析器"><a href="#自定义视图和视图解析器" class="headerlink" title="自定义视图和视图解析器"></a>自定义视图和视图解析器</h3><p><a href="https://github.com/YouChuantong/spring_learn_demo/tree/main/CustomViewAndViewResolver">源码到我GitHub上下载</a></p>
<p>在SpringMVC中，是通过视图解析器找到对应视图，最后是视图将数据输出。无论是jsp页面还是json数据，都是如此。所以第一步需要先写一个数据我们自己的视图解析器。</p>
<p>既然有<code>forward</code>前缀，那么我搞一个能<code>clover:</code>前缀的视图解析器。解析器需要实现<code>org.springframework.web.servlet.ViewResolver</code>接口并把它注册到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomViewResolver</span> <span class="keyword">implements</span> <span class="title class_">ViewResolver</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* 视图名称前缀 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VIEW_NAME_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;clover:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 空字符 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMPTY_STRING</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 日志记录 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyCustomViewResolver.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;resolveViewName执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(VIEW_NAME_PREFIX)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> viewName.replaceFirst(VIEW_NAME_PREFIX, EMPTY_STRING);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyCustomView</span>(uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>VIEW_NAME_PREFIX</code>属性就是我们的规则，通过判断控制器返回的字符串前缀是否是<code>clover:</code></p>
<p>。如果不是那么返回null，springmvc会继续找对应的视图解析器。解析成功之后将前缀截掉就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> viewName.replaceFirst(VIEW_NAME_PREFIX, EMPTY_STRING);</span><br></pre></td></tr></table></figure>

<p>符合我们定的规则，直接<code>new</code> 一个自定义的视图回去。接下来需要定义我们的视图。视图不需要让容器管理。视图需要实现<code>org.springframework.web.servlet.View</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomView</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, View &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8278828333781661446L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 视图名称 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String VIEW_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomView</span><span class="params">(String viewName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.VIEW_NAME = viewName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Content-Type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getContentType();</span><br><span class="line">        System.out.println(contentType);</span><br><span class="line">        <span class="keyword">return</span> contentType == <span class="literal">null</span> ? MediaType.APPLICATION_JSON_VALUE + <span class="string">&quot;;charset=utf-8;&quot;</span> : contentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渲染视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model BindingAwareModelMap对象「域对象」</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response response 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line">        <span class="built_in">this</span>.response = response;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="built_in">this</span>.response.getWriter()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.response.setContentType(getContentType());</span><br><span class="line">            writer.println(User.init());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(e.getMessage(), e.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个无参构造用来接收、保存视图名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MyCustomView</span><span class="params">(String viewName)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.VIEW_NAME = viewName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出就行了，不管这么多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">writer.println(User.init());</span><br></pre></td></tr></table></figure>



<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>页面提交的所有数据都是字符串，页面提交过来的数据必然牵扯到以下操作：</p>
<ol>
<li>数据绑定期间的数据类型转换<br> <code>String --&gt; Integer 或者String --&gt; Boolean</code></li>
<li>数据绑定期间的数据格式化问题，比如日期转换<br> <code>String=2017-12-15 ----&gt;&gt; Date=2017/12/15｜2017.12.15</code></li>
<li>数据校验<br> 前端提交的数据必须是合法的。所以前端不但需要校验，重要数据后端校验也是必须的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> User data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">19</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setBirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        data = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7826062904698679590L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;\&quot;name\&quot;:\&quot;&quot;</span>).append(name).append(<span class="string">&#x27;\&quot;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;,\&quot;sex\&quot;:\&quot;&quot;</span>).append(sex).append(<span class="string">&#x27;\&quot;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;,\&quot;age\&quot;:&quot;</span>).append(age);</span><br><span class="line">        sb.append(<span class="string">&quot;,\&quot;birth\&quot;:\&quot;&quot;</span>).append(birth).append(<span class="string">&#x27;\&quot;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;url&#125;&#125;/user/getUser?age=19&amp;name=clover&amp;birth=2020-08-05 11:03</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyDataController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>debug到这个方法中<code>org.springframework.web.method.annotation.ModelAttributeMethodProcessor#resolveArgument</code>。</p>
<ul>
<li><p>创建数据绑定器，绑定参数、类型转换、数据、数据格式化、校验等操作都是这个绑定器提供的服务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(request, attribute, name);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>ConversionService</code>：负责数据类型的转换以及格式化功能，处理不同类型，使用的是不同的Converter。默认有以下这么多个converter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;java.lang.Number -&gt; java.lang.Number : org.springframework.core.convert.support.NumberToNumberConverterFactory@6fc796e8&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.lang.Number : org.springframework.core.convert.support.StringToNumberConverterFactory@61006560&quot;</span><br><span class="line">&quot;java.lang.Number -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@653ffd98&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.lang.Character : org.springframework.core.convert.support.StringToCharacterConverter@203d6f5b&quot;</span><br><span class="line">&quot;java.lang.Character -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@731edd62&quot;</span><br><span class="line">&quot;java.lang.Number -&gt; java.lang.Character : org.springframework.core.convert.support.NumberToCharacterConverter@11d78d04&quot;</span><br><span class="line">&quot;java.lang.Character -&gt; java.lang.Number : org.springframework.core.convert.support.CharacterToNumberFactory@b1e619b&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.lang.Boolean : org.springframework.core.convert.support.StringToBooleanConverter@40129014&quot;</span><br><span class="line">&quot;java.lang.Boolean -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@45e2a0b9&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.lang.Enum : org.springframework.core.convert.support.StringToEnumConverterFactory@68f0baac&quot;</span><br><span class="line">&quot;java.lang.Enum -&gt; java.lang.String : org.springframework.core.convert.support.EnumToStringConverter@101a0c90&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.util.Locale : org.springframework.core.convert.support.StringToLocaleConverter@445cacb7&quot;</span><br><span class="line">&quot;java.util.Locale -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@14eb3bed&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.util.Properties : org.springframework.core.convert.support.StringToPropertiesConverter@79a3d606&quot;</span><br><span class="line">&quot;java.util.Properties -&gt; java.lang.String : org.springframework.core.convert.support.PropertiesToStringConverter@391d3b2e&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.util.UUID : org.springframework.core.convert.support.StringToUUIDConverter@180511ae&quot;</span><br><span class="line">&quot;java.util.UUID -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@55fc7510&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ArrayToCollectionConverter@32089a4f&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.CollectionToArrayConverter@621c136b&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ArrayToArrayConverter@52a4e6e7&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.CollectionToCollectionConverter@64c65d56&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.MapToMapConverter@126a7963&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ArrayToStringConverter@10efa70e&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.StringToArrayConverter@6589f82a&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ArrayToObjectConverter@33733520&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ObjectToArrayConverter@7213e34c&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.CollectionToStringConverter@1f29edd7&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.StringToCollectionConverter@354b1eb0&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.CollectionToObjectConverter@1fbbe70c&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ObjectToCollectionConverter@725f7e34&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ByteBufferConverter@22c862fd&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.ByteBufferConverter@22c862fd&quot;</span><br><span class="line">&quot;java.util.TimeZone -&gt; java.time.ZoneId : org.springframework.core.convert.support.TimeZoneToZoneIdConverter@4f9b568a&quot;</span><br><span class="line">&quot;java.time.ZoneId -&gt; java.util.TimeZone : org.springframework.core.convert.support.ZoneIdToTimeZoneConverter@f585bf2&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.IdToEntityConverter@67f2af3,org.springframework.core.convert.support.ObjectToObjectConverter@67416f4b&quot;</span><br><span class="line">&quot;org.springframework.core.convert.support.FallbackObjectToStringConverter@72fb4a2f&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.NumberFormat java.lang.Double -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Double: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.NumberFormat java.lang.Float -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Float: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.NumberFormat java.lang.Short -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Short: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.NumberFormat java.math.BigDecimal -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.math.BigDecimal: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.NumberFormat java.math.BigInteger -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.math.BigInteger: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.NumberFormat java.lang.Integer -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Integer: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@40e685fe,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.lang.Long: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@40e685fe,java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Long: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@3fb11849&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4331c15&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalDate: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.lang.String -&gt; java.time.LocalDate: org.springframework.format.datetime.standard.TemporalAccessorParser@33f73f8a&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.time.LocalTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@474a957f&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.lang.String -&gt; java.time.LocalTime: org.springframework.format.datetime.standard.TemporalAccessorParser@67574179&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@7b182a32&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.lang.String -&gt; java.time.LocalDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@711951b4&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.time.ZonedDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@626bc385&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.lang.String -&gt; java.time.ZonedDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@3fea1a38&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.time.OffsetDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.time.OffsetDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@599fe4d&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.OffsetDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.lang.String -&gt; java.time.OffsetDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@3e368bbb&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.time.OffsetTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.time.OffsetTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@27d0013&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.OffsetTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@2cb1819e,java.lang.String -&gt; java.time.OffsetTime: org.springframework.format.datetime.standard.TemporalAccessorParser@6da9f1be&quot;</span><br><span class="line">&quot;java.time.Instant -&gt; java.lang.String : org.springframework.format.datetime.standard.InstantFormatter@278801d0&quot;</span><br><span class="line">&quot;java.lang.String -&gt; java.time.Instant: org.springframework.format.datetime.standard.InstantFormatter@278801d0&quot;</span><br><span class="line">&quot;java.util.Date -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter@2de93dc9&quot;</span><br><span class="line">&quot;java.util.Date -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter@47feddff&quot;</span><br><span class="line">&quot;java.util.Calendar -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter@65f8f0bf&quot;</span><br><span class="line">&quot;java.util.Calendar -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter@219fb51&quot;</span><br><span class="line">&quot;java.lang.Long -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter@667a89ae&quot;</span><br><span class="line">&quot;java.lang.Long -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter@57dab1bb&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.util.Date -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@40e685fe&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.util.Date: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@40e685fe&quot;</span><br><span class="line">&quot;@org.springframework.format.annotation.DateTimeFormat java.util.Calendar -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@40e685fe&quot;</span><br><span class="line">&quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.util.Calendar: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@40e685fe&quot;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>validators</code>：是数据校验器默认情况下是不会有数据校验功能，所以当前这里是0</p>
</li>
<li><p><code>bindingResult</code>：负责保存以及解析数据绑定期间数据校验产生的错误</p>
</li>
</ul>
</li>
<li><p>使用绑定器对目标对象就行处理「入参」</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bindRequestParameters(binder, request);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<ul>
<li>SpringMVC将ServletRequest对象及目标方法的入参实例传给<code>WebDataBinderFactory</code>实例以创建DataBinder实例对象</li>
<li>DataBinder调用装配在SpringMVC上下文中的<code>ConversionService</code>组件进行数据类型转换、数据格式化工作。将Servlet中的请求信息填充到入参对象中。</li>
<li>调用<code>Validator</code>组件对已经绑定了请求消息的入参对象进行数据合法性校验，并最终生成数据绑定结果<code>BindingData</code>对象</li>
<li>SpringMVC抽取<code>BindingResult</code>中的入参对象和校验错误对象，将它们赋给处理方法的响应入参。</li>
</ul>
<h3 id="自定义类型转换"><a href="#自定义类型转换" class="headerlink" title="自定义类型转换"></a>自定义类型转换</h3><p><a href="https://github.com/YouChuantong/spring_learn_demo/tree/main/CustomConverter">源码下载地址</a></p>
<p>正常情况下，SpringMVC的默认入参是根据参数名到请求中去匹配，匹配上了就赋值。那么如果前端发了自定义格式<code>user=clover-19-sex-2020/08/05</code>，SpringMVC是无法解析的。这时需要自定义一个这种数据的类型转换器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyDataController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;user&quot;)</span> User user)</span> &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h4><ul>
<li>对属性对象的输入输出进行格式化，从其本质上讲依然属于“类型转换”的范畴。</li>
<li>Spring在格式化模块中定义了一个实现<code>ConventionService</code>接口的<code>FormattingConvertionService</code>实现类。该实现类扩展了<code>GenericConvertionService</code>，因此它既具有类型转换的功能，又具有格式化的功能。</li>
<li><code>FormattingConversionService</code>拥有一个<code>FormattingConversionServiceFactoryBean</code>工厂类，后者用于在Spring上下文中构造前者。</li>
</ul>
<h3 id="实现Converter"><a href="#实现Converter" class="headerlink" title="实现Converter"></a>实现Converter</h3><p>需要实现<code>org.springframework.core.convert.converter.Converter</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToUserConverter</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Converter&lt;String, User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5119628925082740825L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义类型转换器，String =====&gt;&gt; User。数据格式：clover-19-男-2021/08/05</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.hasText(source)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!source.contains(<span class="string">&quot;-&quot;</span>)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 通过&quot;-&quot;分割</span></span><br><span class="line">            String[] split = source.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">            <span class="type">Short</span> <span class="variable">age</span> <span class="operator">=</span> Short.parseShort(split[<span class="number">1</span>]);</span><br><span class="line">            <span class="type">Character</span> <span class="variable">sex</span> <span class="operator">=</span> split[<span class="number">2</span>].toCharArray()[<span class="number">0</span>];</span><br><span class="line">            <span class="type">Date</span> <span class="variable">da</span> <span class="operator">=</span> sdf.parse(split[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            user.setUserName(split[<span class="number">0</span>]);</span><br><span class="line">            user.setAge(age);</span><br><span class="line">            user.setBirthday(da);</span><br><span class="line">            user.setSex(sex);</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Converter是ConvertionService中的组件，Converter写好后，还需要将它注册到ConventionService。</p>
<p>那么如何注册到<code>ConventionService</code>呢</p>
<ul>
<li><code>ConversionService</code>是Spring类型转换体系的核心接口</li>
<li>可以利用<code>ConversionServiceFactoryBean</code>在Spring的IOC容器中定义一个<code>ConversionService</code>。Spring将自动识别出IOC容器中的<code>ConversionService</code>。并在Bean属性配置及SpringMVC处理方法入参绑定等场合使用它进行数据的转换。</li>
<li>可通过<code>ConversionServiceFactoryBean</code>的<code>converters</code>属性注册自定义的类型转换器。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  conversion-service告诉SpringMVC使用我们自己配置的类型转换组件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.ctong.bean.component.converter.StringToUserConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">&#123;&#123;url&#125;&#125;/user/getUser?user=clover-19-男-2021/08/05</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;clover&quot;</span><span class="punctuation">,</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">19</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h2 id="关于mvc-annotation-driven"><a href="#关于mvc-annotation-driven" class="headerlink" title="关于mvc:annotation-driven"></a>关于mvc:annotation-driven</h2><ul>
<li><code>&lt;mvc:annotation-driven&gt;</code>会自动注册<code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code>和<code>ExceptionHandlerExceptionResolver</code>三个bean</li>
<li>还将提供以下支持<ol>
<li>支持使用<code>ConversionService</code>实例对表单参数进行类型转换</li>
<li>支持使用<code>@NumberFormatAnnotation</code>、<code>@DateTimeFormat</code>注解完成数据类型的格式化。</li>
<li>支持使用<code>@Valid</code>注解对JavaBean实例进行JSR303验证</li>
<li>支持使用<code>@RequestBody</code>和<code>@ResponseBody</code>注解</li>
</ol>
</li>
</ul>
<p>在Spring中，有一个<code>org.springframework.beans.factory.xml.BeanDefinitionParser</code>接口，它的作用就是用来解析Spring中各种标签。而<code>org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser</code> 是它众多实现类中的其中一个，专门用来解析<code>&lt;mvc:annotation-driven&gt;</code>标签。</p>
<p>这个类解析时给容器中添加了好多好多好多组件…</p>
<h3 id="静态资源无法访问原理"><a href="#静态资源无法访问原理" class="headerlink" title="静态资源无法访问原理"></a>静态资源无法访问原理</h3><p>在加上<code>&lt;mvc:annotation-driven&gt;</code>后，发现静态资源无法访问，动态资源没问题。这时再加上一个<code>&lt;mvc:default-servlet-handler/&gt;</code>就都可以访问。</p>
<p>原因是默认情况下都没配置的时候动态资源可以访问，静态资源不能访问。在<code>HandlerMappings</code>组件中，保存了所有的请求信息，通过请求路径可以找到谁能处理当前请求，所以动态资源可以访问。<br>在加上<code>&lt;mvc:default-servlet-handler/&gt;</code>后，静态资源可以访问，而动态资源不能访问。其根本原因是，默认情况下，SpringMVC使用的是<code>RequestMappingHandlerMapping</code>，它里面保存了所有的映射信息。而加上<code>&lt;mvc:default-servlet-handler/&gt;</code>后，在<code>HandlerMapping</code>组件注册了一个<code>SimpleUrlHandlerMapping</code>。在这个HandlerMapping中，映射路径为<code>/**</code>，并且当前请求全部交给Tomcat处理。<strong>但是</strong>，<code>RequestMappingHandlerMapping</code>不见了。</p>
<p><code>&lt;mvc:default-servlet-handler/&gt;</code>标签是由<code>org.springframework.web.servlet.config.DefaultServletHandlerBeanDefinitionParser</code>进行解析。在里面给容器中添加了<code>SimpleUrlHandlerMapping.class</code>。在<code>DispatcherServlet</code> 的<code>initHandlerMappings</code> 方法中，如果找到一个<code>HandlerMpping.class</code>类型的Bean，那么就不使用默认策略。由此可得出其原因。</p>
<p>刚刚说了，<code>&lt;mvc:annotation-driven&gt;</code>由<code>org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser</code> 解析，里面创建了好多好多好多组件…这好多组件中，<code>RequestMappingHandlerMapping</code>就是其中之一。</p>
<h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>只做前端的校验是不安全的，重要的数据必须在后端进行校验：</p>
<ol>
<li><p>可以将用户传过来的数据进行校验，如果校验失败可以转发到相应页面进行处理或返回错误代码。</p>
</li>
<li><p>SpringMVC可以根据JSR303来做数据校验</p>
<blockquote>
<p>JSR303是java为Bean数据合法性校验提供的标准框架，它已经包含在	JavaEE6.0中。<br>JSR303通过在Bean属性上标注类似于<code>@NotNull</code>、<code>@Max</code>等标准的注解执行校验规则，并通过标准的验证接口对Bean进行验证</p>
</blockquote>
<table>
<thead>
<tr>
<th>注解</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Nnull</td>
<td>被标注的元素必须为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被标注的元素必须不为null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被标注的元素必须为true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被标注的元素必须为false</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>被标注的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>被标注的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@DecimaiMin(value)</td>
<td>被标注的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@DecimaiMax(value)</td>
<td>被标注的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@Size(max, min)</td>
<td>被标注的元素大小必须在指定的范围内</td>
</tr>
<tr>
<td>@Digits(integer, fraction)</td>
<td>被标注的元素必须是一个数字，其值必须在可接受的范围内</td>
</tr>
<tr>
<td>@Past</td>
<td>被标注的元素必须是一个过去的日期</td>
</tr>
<tr>
<td>@Future</td>
<td>被标注的元素必须是在一个未来的日期</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>被标注的元素必须符合指定的正则表达式</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="hibernate-validator"><a href="#hibernate-validator" class="headerlink" title="hibernate-validator"></a>hibernate-validator</h3><p>使用hibernate实现的数据校验api。<a href="http://hibernate.org/validator/releases/">下载地址：传送门</a></p>
<p>导入这些包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hibernate-validator-annotation-processor-5.0.3.Final.jar</span><br><span class="line">hibernate-validator-cdi-5.0.3.Final.jar</span><br><span class="line">hibernate-validator-5.0.3.Final.jar</span><br><span class="line">classmate-1.0.0.jar</span><br><span class="line">jboss-logging-3.1.1.GA.jar</span><br><span class="line">validation-api-1.1.0.Final.jar</span><br></pre></td></tr></table></figure>

<p>导入这些包之后就可以使用上面列出的注解，如果使用的tomcat是7.0以上，不需要导入<code>lib/required</code>文件夹中带有<code>el</code> 的jar包。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>只需要给javaBean的属性加上校验注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2000200405058799837L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Min(18)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Past</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在SpringMC封装对象的时候，使用<code>@Valid</code>告诉SpringMVC这个javaBean需要校验:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">testValidator</span><span class="params">(<span class="meta">@Valid</span> Employee employee)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>如果需要获取校验结果，那么在需要校验的参数后面<strong>紧跟</strong>一个<code>BindingResult</code>参数，这个参数封装了校验结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">testValidator</span><span class="params">(<span class="meta">@Valid</span> Employee employee, BindingResult result)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p><code>BindingResult</code>有几个比较常用的方法：</p>
<ul>
<li><code>hasErrors()</code> 检查验证结果是否有错误，如果有错误则返回<code>true</code>反之<code>false</code></li>
<li><code>getAllErrors()</code> 获取全部异常</li>
<li><code>getFieldErrors()</code>获取字段错误信息</li>
</ul>
<h2 id="SpringMVC响应JSON"><a href="#SpringMVC响应JSON" class="headerlink" title="SpringMVC响应JSON"></a>SpringMVC响应JSON</h2><p>导入这三个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jackson-annotations-2.1.5.jar</span><br><span class="line">jackson-core-2.1.5.jar</span><br><span class="line">jackson-databind-2.1.5.jar</span><br></pre></td></tr></table></figure>

<p>完事之后在你需要返回JSON的控制器中加上<code>@ResponseBody</code>，表示返回值不使用视图解析器处理，而是使用返回值解析器进行处理。如果返回的是一个对象，那么由Jackson包将返回值自动转为json格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hibernate-validator&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">testValidator</span><span class="params">(<span class="meta">@Valid</span> Employee employee, BindingResult result)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="JsonFormat"></a>JsonFormat</h3><p>在jackson中，除了能返回json外，他还提供了非常多的注解，jackson工作时使用对应处理器处理被这些注解标注的属性。而<code>JsonFormat</code>就是其中之一，具体可查看<code>com.fasterxml.jackson.annotation</code>包下的注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>

<p> 返回结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;empName&quot;</span><span class="punctuation">:</span><span class="string">&quot;你好&quot;</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;21312&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">1232</span><span class="punctuation">,</span><span class="attr">&quot;birth&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-15&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="ResponseBody"></a>ResponseBody</h2><p><code>@RequestBody</code>可以标注在类上，也可以标注在方法上。</p>
<ul>
<li>在类上：表示当前类中所有<code>RequestMapping</code>都使用返回值解析器的方式解析而不再使用视图解析器。</li>
<li>在方法上：表示当前<code>RequestMapping</code>使用返回值解析器的方式解析而不再使用视图解析器。</li>
</ul>
<p>它会把解析器处理好的数据放到响应体中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResponseBody响应数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/response-body&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">http://localhost:8080/springmvc_helloworld_war_exploded/validator/response-body</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>11</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 15 Aug 2021 01:11:44 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">hello world</span></span></span><br></pre></td></tr></table></figure>





<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h2><p><code>@RequestBody</code>用于获取一个请求的请求体（只有POST有请求体）</p>
<p>发送一个POST请求</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://localhost:8080/springmvc_helloworld_war_exploded/validator/request-body</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;empName&quot;</span><span class="punctuation">:</span><span class="string">&quot;你好&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;21312&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">1232</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;birth&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-15&quot;</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ResponseBody获取请求体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/request-body&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;employee: &#123;&#125;&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  08-15 08:57:45 employee: Employee(empName=你好, email=21312, age=1232, birth=Sun Aug 15 08:00:00 CST 2021)  (EmployeeController.java:70)</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 15 Aug 2021 00:57:45 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;empName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21312&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">1232</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;birth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-08-15&quot;</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>这种方式非常依赖<code>Content-Type</code>，如果你没告诉服务器你发送的是什么数据类型，那么服务器可能会出现异常。因为SpringMVC是根据请求头来匹配对应的解析器。</p>
<h2 id="HttpEntity"><a href="#HttpEntity" class="headerlink" title="HttpEntity"></a>HttpEntity</h2><p>可以获取请求中的大部分信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test-http-entity&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHttpEntity</span><span class="params">(HttpEntity&lt;String&gt; httpEntity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> httpEntity.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://localhost:8080/springmvc_helloworld_war_exploded/validator/test-http-entity</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>185</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 15 Aug 2021 01:20:15 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-inform7">&lt;,&#123;user-agent=<span class="comment">[vscode-restclient]</span>, accept-encoding=<span class="comment">[gzip, deflate]</span>, cookie=<span class="comment">[JSESSIONID=7938CB3D5740911ECD4697D79118757B]</span>, host=<span class="comment">[localhost:8080]</span>, connection=<span class="comment">[close]</span>, content-length=<span class="comment">[0]</span>&#125;&gt;</span></span><br><span class="line"><span class="language-inform7"></span></span><br></pre></td></tr></table></figure>



<h2 id="ResponseEntity"><a href="#ResponseEntity" class="headerlink" title="ResponseEntity"></a>ResponseEntity</h2><p> <code>ResponseEntity</code>可以将返回数据放在响应体中，并且支持自定义响应头和状态码。如果返回值是<code>ResponseEntity</code>，那就不要加<code>@ResponseBody</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test-response-entity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">testResponseEntity</span><span class="params">()</span>&#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;hello man!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, headers, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://localhost:8080/springmvc_helloworld_war_exploded/validator/test-response-entity</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=ISO-8859-1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 15 Aug 2021 01:32:48 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-erlang-repl">hello man!</span></span><br></pre></td></tr></table></figure>



<h2 id="SpringMVC文件下载"><a href="#SpringMVC文件下载" class="headerlink" title="SpringMVC文件下载"></a>SpringMVC文件下载</h2><p>主要是使用<code>ResponseEntity</code>定制响应头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFile(HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到项目真实路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">    <span class="comment">// 找到下载文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/WEB-INF/classes/a8154754ca508cf399952de76c60693f.jpg&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[fileInputStream.available()];</span><br><span class="line">    fileInputStream.read(bytes);</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.set(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=a8154754ca508cf399952de76c60693f.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件流返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>导入依赖包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commons-io-2.0.jar</span><br><span class="line">commons-fileupload-1.2.1.jar</span><br></pre></td></tr></table></figure>

<p>导入依赖包后在配置文件中配置文件上传解析器（文件上传解析器是SpringMVC九大组件之一）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  文件上传解析器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置文件上传最大大小    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024 * 1024 * 20&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置默认字符编码    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在SpringMVC中，只需要有一个<code>MultipartFile</code>类型的参数，并且<code>Content-Type</code>是<code>multipart/form-data</code>就可以得到上传的图片。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;userName&quot;, required = false)</span> String userName,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;file&quot;, required = false)</span> MultipartFile file)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;userName: ====&gt;&gt;&gt; &#123;&#125;&quot;</span>, userName);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;fileName: =====&gt;&gt;&gt; &#123;&#125;&quot;</span>, file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://localhost:8080/springmvc_helloworld_war_exploded/file/upload</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;userName&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">userName</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;file&quot;; filename=&quot;美少女.jpg&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: image/jpeg</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">&lt; /Users/clover/Desktop/美少女.jpg</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW--</span></span></span><br><span class="line"><span class="language-pgsql"></span></span><br></pre></td></tr></table></figure>

<p>控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  08-15 17:02:34 userName: ====&gt;&gt;&gt; userName  (FileController.java:71) </span><br><span class="line">INFO  08-15 17:02:58 fileName: =====&gt;&gt;&gt; file  (FileController.java:73) </span><br></pre></td></tr></table></figure>

<p>如果需要保存上传的文件，只需要使用<code>MultipartFile</code>中提供的<code>transferTo()</code>方法就能快速保存文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/clover/Desktop/&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>只需要将<code>MultipartFile</code>参数声明为数组或者<code>List</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(value = &quot;userName&quot;, required = false)</span> String userName,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;file&quot;, required = false)</span> MultipartFile[] files)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;userName: ====&gt;&gt;&gt; &#123;&#125;&quot;</span>, userName);</span><br><span class="line">    <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;fileName: =====&gt;&gt;&gt; &#123;&#125;&quot;</span>, file.getName());</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/clover/Desktop/&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://localhost:8080/springmvc_helloworld_war_exploded/file/upload</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line"></span><br><span class="line"><span class="language-awk">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span><br><span class="line"><span class="language-awk">Content-Disposition: form-data; name=<span class="string">&quot;userName&quot;</span></span></span><br><span class="line"><span class="language-awk"></span></span><br><span class="line"><span class="language-awk">userName</span></span><br><span class="line"><span class="language-awk">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span><br><span class="line"><span class="language-awk">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;0.jpg&quot;</span></span></span><br><span class="line"><span class="language-awk">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-awk"></span></span><br><span class="line"><span class="language-awk">&lt; <span class="regexp">/Users/</span>clover<span class="regexp">/Downloads/</span>f2215fb6a14e1c6742770c18b5166872.jpg</span></span><br><span class="line"><span class="language-awk">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span><br><span class="line"><span class="language-awk">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;1.jpg&quot;</span></span></span><br><span class="line"><span class="language-awk">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-awk"></span></span><br><span class="line"><span class="language-awk">&lt; <span class="regexp">/Users/</span>clover<span class="regexp">/Downloads/</span>a8154754ca508cf399952de76c60693f(<span class="number">1</span>).jpg</span></span><br><span class="line"><span class="language-awk">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span><br><span class="line"><span class="language-awk">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;2.jpg&quot;</span></span></span><br><span class="line"><span class="language-awk">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-awk"></span></span><br><span class="line"><span class="language-awk">&lt; <span class="regexp">/Users/</span>clover<span class="regexp">/Downloads/</span>wallpaper (<span class="number">1</span>).jpg</span></span><br><span class="line"><span class="language-awk">------WebKitFormBoundary7MA4YWxkTrZu0gW</span></span><br><span class="line"><span class="language-awk">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;3.jpg&quot;</span></span></span><br><span class="line"><span class="language-awk">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-awk"></span></span><br><span class="line"><span class="language-awk">&lt; <span class="regexp">/Users/</span>clover<span class="regexp">/Downloads/</span>wallpaper.jpg</span></span><br><span class="line"><span class="language-awk">------WebKitFormBoundary7MA4YWxkTrZu0gW--</span></span><br><span class="line"><span class="language-awk"></span></span><br></pre></td></tr></table></figure>







<h2 id="HttpMessageConverter-内容协商"><a href="#HttpMessageConverter-内容协商" class="headerlink" title="HttpMessageConverter(内容协商)"></a>HttpMessageConverter(内容协商)</h2><blockquote>
<p>更详细的原理、用法在我博客SpringBoot学习笔记中有记录</p>
</blockquote>
<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-08-15%2015.52.22.png" alt="HttpMessageConverter工作原理"></p>
<ul>
<li><code>HttpMessageConverter&lt;T&gt;</code>： 是Spring3.0新添加的一个接口，<strong>负责将请求信息转换为一个对象（类型为T），将对象输出为响应信息</strong></li>
<li><code>HttpMessageConverter&lt;T&gt;</code>接口定义的方法：<ul>
<li><code>boolean canRead(Class&lt;?&gt; clazz, MediaType mediaType);</code>：指定转换器可以读取的对象类型，即转换器是否可将请求信息转换为clazz类型的对象，同时指定支持MIME类型（text&#x2F;html，application&#x2F;json等）</li>
<li><code>boolean canWrite(Class&lt;?&gt; clazz, MediaType mediaType);</code>：指定转换器是否可将clazz类型的对象写到响应流中，响应流支持的媒体类型在MediaType中定义。</li>
<li><code>List&lt;MediaType&gt; getSupportedMediaTypes();</code>：该转换器支持的媒体类型。</li>
<li><code>T read(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)throws IOException,HttpMessageNotReadableException;</code>：将请求信息流转换为T类型的对象。</li>
<li><code>void write(T t, MediaType contentType, HttpOutputMessage outputMessage)throws IOException,HttpMessageNotWritableException;</code>：将T类型的对象写到响应流中，同时指定相应的媒体类型为<code>contentType</code></li>
</ul>
</li>
<li>在加入Jackson 包后，有个叫<code>MappingJackson2HttpMessageConverter</code>的转换器被加入了<code>RequestMappingHandlerAdapter</code>的<code>HttpMessageConverter</code></li>
</ul>
<p>这东西其实就是用来做请求&#x2F;响应数据的格式转换的。</p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC提供了拦截器，它允许运行目标方法之前进行一些拦截工作，或者目标方法运行之后进行一些其他处理。</p>
<p>SpringMVC的拦截器是一个接口：<code>org.springframework.web.servlet.HandlerInterceptor</code>，它有三个方法</p>
<ul>
<li><code>preHandle</code> 在目标方法运行之前调用。它需要返回一个Boolean，他类似javaWeb过滤器的<code>chain.doFilter()</code>。<ul>
<li><code>true</code> 表示通过</li>
<li><code>false</code> 表示不通过</li>
</ul>
</li>
<li><code>postHandle</code> 在目标方法执行之后被调用。</li>
<li><code>afterCompletion</code>在请求全部执行完成之后被调用。</li>
</ul>
<h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><p>实现<code>HandlerInterceptor</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3000412083847294171L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object o)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o,</span></span><br><span class="line"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 无需实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,</span></span><br><span class="line"><span class="params">            Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 无需实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在SpringMVC配置文件中注册这个拦截器，并且配置这个拦截器的拦截规则。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置拦截器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--    配置某个拦截器，默认拦截所有请求    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.ctong.springmvc.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你需要定义拦截规则，那么还需要借助<code>&lt;mvc:interceptor&gt;</code>标签和<code>&lt;mvc:mapping&gt;</code>标签</p>
<ul>
<li><code>path</code> 指定拦截的路径</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     定义拦截规则       --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/api&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.ctong.springmvc.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若需要<strong>排除</strong>哪些路径，可以通过<code>&lt;mvc:exclude-mapping/&gt;</code>标签指定排除规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/static&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.ctong.springmvc.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul>
<li>SpringMVC通过<code>HandlerExceptionResolver</code> 处理程序的异常，包括Handler映射、数据绑定以及目标方法执行时发生的异常。</li>
<li>SpringMVC默认提供的<code>HandlerExceptionResolver</code>的实现类<ul>
<li><code>ExceptionHandlerExceptionResolver</code></li>
<li><code>ResponseStatusExceptionResolver</code></li>
<li><code>DefaultHandlerExceptionResolver</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>在SpringMVC处理异常源码中，它默认提供的那三个异常基本只能解决Spring&#x2F;SpringMVC出现的异常。解决不了的异常都抛给Tomcat</p>
</blockquote>
<h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><p>这个注解标注在<code>Controller</code>的某一个异常处理方法上，用于告诉SpringMVC这个方法专门处理<strong>这个类</strong>的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerException</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个注解有一个属性</p>
<ul>
<li><code>Class&lt;? extends Throwable&gt;[] value()</code> 用于指定这个方法处理哪些异常信息。默认全部异常都能处理</li>
</ul>
<p>若需要获取异常信息，可以在写一个<code>Exception</code>类型的参数，SpringMVC会自动把异常信息传过来。<br>注意：<code>@ExceptionHandler</code>标注的方法参数可以随便写，但SpringMVC只认识<code>Exception</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;NullPointerException.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handlerException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;error.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要将异常信息返回到页面，可以返回一个<code>ModelAndView</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;NullPointerException.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">handlerException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">  <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">  mv.addObject(<span class="string">&quot;errmsg&quot;</span>,e.getMessage());</span><br><span class="line">  <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ControllerAdvice全局处理异常"><a href="#ControllerAdvice全局处理异常" class="headerlink" title="@ControllerAdvice全局处理异常"></a>@ControllerAdvice全局处理异常</h3><p>由于<code>@ExceptionHandler</code>在<code>Controller</code>中只能处理当前<code>Controller</code>中发生的异常，这种方式会导致代码无法复用，所以SpringMVC写了一个<code>ControllerAdvice</code>注解，专门处理异常的类。</p>
<p>标注了<code>ControllerAdvice</code>的类中所有标注了<code>@ExceptionHandler</code>的方法就能处理全局异常。</p>
<h3 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h3><p><code>@ResponseStatus</code>这个注解用于标注在自定义异常上，SpringMVC可以使用<code>ResponseStatusExceptionResolver</code>异常解析器解析它，它有两个属性：</p>
<ul>
<li><code>HttpStatus value();</code> 响应状态码，解析器会将这个状态码响应出去</li>
<li><code>String reason() default &quot;&quot;;</code>  错误原因</li>
</ul>
<h3 id="SimpleMappingExceptionHandle"><a href="#SimpleMappingExceptionHandle" class="headerlink" title="SimpleMappingExceptionHandle"></a>SimpleMappingExceptionHandle</h3><p>映射异常信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMappingExceptionHandle&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--    exceptionMappings配置哪些异常去哪些页面，它是一个Properties    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- key：异常全类名，value：要去的页面 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在错误页面如果想要取错误信息，需要使用<code>$&#123;ex&#125;</code>，SimpleMappingExceptionResolver也提供了一个属性可以修改封装错误时异常信息用的Key。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMappingExceptionHandle&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;errmsg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="SpringMVC运行流程"><a href="#SpringMVC运行流程" class="headerlink" title="SpringMVC运行流程"></a>SpringMVC运行流程</h2><ul>
<li>前端控制器(DispatcherServlet)收到请求后会调用<code>doDispath</code>进行处理。</li>
<li>根据HandlerMapping中保存的请求映射信息找到处理器当前处理器的执行链，执行链中包含拦截器。</li>
<li>根据当前处理器找到他的HandlerAdapter(适配器)</li>
<li>执行拦截器<code>preHandle</code>方法</li>
<li>使用适配器执行目标方法并返回<code>ModelAndView</code><ul>
<li><code>ModelAttribute</code> 注解标注的方法先于目标方法执行</li>
<li>确定执行目标方法参数<ol>
<li>有注解</li>
<li>没有注解<ol>
<li>看是否是Model、Map等</li>
<li>如果是自定义类型<ol>
<li>从隐含模型中看有没有，如果有就从模型中取值</li>
<li>再看是否是<code>SessionAttribute</code>标注的属性，如果是就从Sessiong中拿，如果拿不到就抛异常</li>
<li>如果都不是，就利用反射创建对象</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
<li>执行拦截器的<code>postHandle</code>方法</li>
<li>处理结果；（页面渲染流程）<ul>
<li>如果有异常就使用异常解析器处理异常。处理完了还会返回<code>ModelAndView</code></li>
<li>调用render进行页面渲染。<ol>
<li>视图解析器根据视图名得到试图对象</li>
<li>视图对象调用render方法完成渲染</li>
</ol>
</li>
<li>执行拦截器的<code>afterCompletion</code>方法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 网络配置</title>
    <url>/2022/02/19/VMware%20%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="VMware-网络配置"><a href="#VMware-网络配置" class="headerlink" title="VMware 网络配置"></a>VMware 网络配置</h1><p>运行 <code>dhcpd</code> 命令分配一个 ip 地址。</p>
<p>通过 <code>ifconfig</code> 或 <code>ip addr</code> 命令拿到刚刚分配的IP：192.168.135.128（以你自己的为准）</p>
<p>修改 <code> /etc/sysconfig/network-scripts/ifcfg-ens33</code> 文件</p>
<p>将原来的 <code>BOOTPROTO=dhcp</code> 修改为 <code>BOOTPROTO=static</code> ，目的是使用我们指定的ip作为默认IP</p>
<p>添加 <code>ONBOOT=yes</code></p>
<p>指定我们刚刚分配的IP <code>IPADDR=192.168.135.128</code></p>
<p>设置子网腌码，一般是255.255.255.0，<code>NETMASK=255.255.255.0</code></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202192246384.png" alt="截屏2022-02-19 下午10.45.55"></p>
<p>最后设置网关，通过 <code>cat /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf</code> 查看vmware给我们分配的网关</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202192250941.png" alt="网关地址"></p>
<p>也可以通过<code>ifconfig</code>命令查看网关：</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202192251644.png" alt="网关地址"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 安装</title>
    <url>/2022/01/02/Tomcat-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>到官网下载 <a href="http://maven.apache.org/download.cgi">tomcat</a><br><img src="http://qiniu-note-image.ctong.top/note/images/202112271120666.png" alt="image.png"></p>
<p>下载完成解压后，将该文件夹命名为 Tomcat，移动到资源库（&#x2F;Library）</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271120671.png" alt="image.png"></p>
<p>打开终端转到 Tomcat &#x2F;bin 路径,给所有 .sh 文件755权限。</p>
<p><code>sudo chmod 755 *.sh</code></p>
<p>启动 tomcat，输入 sudo sh .&#x2F;startup.sh 后回车：</p>
<p><code>sudo sh ./startup.sh</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271121914.png" alt="image.png"></p>
<p>tomcat 启动后打开浏览器，输入<a href="localhost:8080">localhost:8080</a></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271121258.png" alt="image.png"></p>
<p>如果启动失败请检查8080端口是否被占用，如果已经被占用需要将8080杀死。</p>
<p>关闭Tomcat，用终端输入sh .&#x2F;shutdown.sh</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2022/01/02/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>资料： <a href="https://pan.baidu.com/s/1aS4B69iA8-AtXqT7D9obXA">https://pan.baidu.com/s/1aS4B69iA8-AtXqT7D9obXA</a> 提取码: rczx</p>
<ul>
<li><p>Spring 是一个开源框架</p>
</li>
<li><p>Spring为简化企业级开发而生，使用Spring，javaBean就可以实现很多以前要靠EJB才能实现的功能。同样的功能，在EJB中要通过繁琐的配置和复杂的代码才能实现，而在Spring中却非常的优雅和简洁。</p>
</li>
<li><p>Spring是一个IOC（DI）和AOP容器框架</p>
</li>
<li><p>Spring的优良特性</p>
<ol>
<li>非侵入式<br>基于Spring开发的应用中的对象可以不依赖于Spring的API</li>
<li>依赖注入<br>DI——Dependency Injection，反转控制（IOC）最经典的实现</li>
<li>面向切面编程<br>Aspect Oriented Programming——AOP</li>
<li>容器<br>Spring是一个容器，因为它包含并且管理应用对象的生命周期</li>
<li>组件化<br>Spring实现了使用简单的组件配置组合成一个复杂的应用。在Spring中可以使用XML和Java注解组合这些对象</li>
<li>一站式<br>在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring自身也提供了表述层的SpringMVC和持久层的SpringJDBC）</li>
</ol>
</li>
</ul>
<h2 id="Spring-模块化分"><a href="#Spring-模块化分" class="headerlink" title="Spring 模块化分"></a>Spring 模块化分</h2><p><img src="http://qiniu-note-image.ctong.top/note/images/202112271048716.png" alt="Spring模块划分图"></p>
<ol>
<li><p>Test<br>Spring单元测试模块</p>
</li>
<li><p>Core Container</p>
<p>核心容器(IOC)，黑色代表这部分的功能由哪些jar包组成。要使用这部分的完整功能，这些jar包都要导入。</p>
</li>
<li><p>AOP、Aspects<br>面向切面编程模块</p>
</li>
<li><p>Data Access&#x2F;Integration<br>数据访问</p>
</li>
<li><p>Web<br>Spring开发web应用模块</p>
</li>
</ol>
<h2 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h2><ul>
<li>IOC 容器<br>可以用来整合大多数第三方框架</li>
<li>AOP 面向切面编程<br>通常用来完成一些，声明式事务。例如操作数据库等…</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271048728.png" alt="IOC和DI"></p>
<h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC全称（Inversion of control或控制反转）。</p>
<ul>
<li><p>控制<br>指资源的获取方式，获取方式又分为一下两点</p>
<ol>
<li><p>主动式：<br>要什么资源都需要自己创建。这种方式在创建简单对象时非常方便， 但在创建复杂对象时，是非常麻烦的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>被动式<br>资源的获取不是我们自己创建，而是交给容器创建和设置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">  Object obj;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    obj.xxx();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>容器管理所有的组件。假设<code>TestClass</code>受容器管理，<code>Object</code>也受容器管理，容器可以自动的检查出哪些组件需要用到另一些组件。容器会帮我们创建出<code>TestClass</code>对象并把Object对象赋值过去。</p>
</li>
</ol>
</li>
<li><p>反转<br>主动获取资源变为被动的接受资源</p>
</li>
</ul>
<h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p>DI（Dependency Injection或依赖注入）。容器能知道哪些组件运行的时候需要使用到另外一个组件。容器会通过反射的方式将容器中准备好的<code>Object</code>注入到<code>TestClass</code>。</p>
<p>以前是自己new对象，现在所有的对象交给容器创建。「<strong>给容器中注册组件</strong>」</p>
<blockquote>
<p>只要是容器管理的组件，都能使用容器提供的强大功能。</p>
</blockquote>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>需要导入所有核心jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commons-logging-1.1.3.jar</span><br><span class="line">spring-beans-4.0.0.RELEASE.jar</span><br><span class="line">spring-context-4.0.0.RELEASE.jar</span><br><span class="line">spring-core-4.0.0.RELEASE.jar</span><br><span class="line">spring-expression-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>



<h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>spring的配置文件中，集合了spring的ioc容器管理的所有组件。以下为spring 配置文件基础格式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注册一个对象，Spring会自动创建这个对象。一个Bean标签可以注册一个组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.clover.spring.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Bean标签中，有一个class，它表示你要注册哪一个组件。这里需要的是一个全类名。</p>
<p>在这个bean标签中，还有一个id，这是这个组件的唯一标识。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册一个bean组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你还想为组件赋值，可以使用<code>property</code>标签。<code>name</code>表示属性名，<code>value</code>表示属性值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clover&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2621869236@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除了调用**<code>set</code>**进行赋值外，还可以使用<code>constructor-arg</code>标签调用有参构造器进行赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, String gender, String email)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.email = email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Clover&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2621869236@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>constructor-arg</code>也可以使用索引进行赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Clover&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2621869236@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>在配置文件写好后，可以使用<code>JUnit</code>来进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPersonBean</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ioc.xml&quot;</span>);</span><br><span class="line">  <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> app.getBean(Person.class);</span><br><span class="line">  System.out.println(bean.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ApplicationContext</code>代表ioc容器。在spring中，有很多种容器，其中有两个最为常用<code>org.springframework.context.support.ClassPathXmlApplicationContext</code>和<code>org.springframework.context.support.FileSystemXmlApplicationContext</code>。</p>
<p><code>ClassPathXmlApplicationContext</code>表示在xml配置文件在当前项目类路径下，<code>FileSystemXmlApplicationContext</code> 获取其它位置的xml位置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app.getBean(Person.class);</span><br></pre></td></tr></table></figure>

<p>可以通过类的方式获取到对应的bean，也可以通过刚刚定义的id去获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app.getBean(<span class="string">&quot;person&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>容器中对象的创建都是在容器创建完成的时候就已经创建好了。</li>
<li>同一个组件在ioc容器中是单实例的</li>
<li>如果组件并不在ioc中，则会出现<code>NoSuchBeanDefinitionException</code>异常，无论是以id的形式还是class的形式获取。</li>
<li>在<code>getBean(Class&lt;?&gt;)</code>的时候，如果ioc中存在多个同类型组件时，则会抛出<code>NoUniqueBeanDefinitionException</code>异常</li>
<li>如果使用<code>property</code>对bean赋值，那么该属性必须存在**<code>set</code>**方法。</li>
</ul>
<h2 id="P名称空间"><a href="#P名称空间" class="headerlink" title="P名称空间"></a>P名称空间</h2><p>ioc可以通过p名称空间进行赋值，在xml中名称空间是用来防止标签重复的。在**<code>beans</code><strong>标签中添加<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code>。添加后就可以使用</strong><code>p</code>**名称空间进行赋值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:age</span>=<span class="string">&quot;19&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;Clover&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:email</span>=<span class="string">&quot;2621869236@qq.com&quot;</span> <span class="attr">p:gender</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="复杂属性赋值"><a href="#复杂属性赋值" class="headerlink" title="复杂属性赋值"></a>复杂属性赋值</h2><h3 id="null值"><a href="#null值" class="headerlink" title="null值"></a>null值</h3><p>在java中，除了基本类型，其它类型在不赋值的情况下默认值都是null。如果需要给一个属性null值，不能通过<code>property</code>标签的<code>value</code>属性来赋值，可以通过**<code>null</code>**标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="自定义复杂类型"><a href="#自定义复杂类型" class="headerlink" title="自定义复杂类型"></a>自定义复杂类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">  getter/setter....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>Person</code>中，存在一个<code>Car</code>类型，这个类型属于我们自定义的复杂类型。可以使用两种方式进行赋值</p>
<h4 id="使用其它Bean"><a href="#使用其它Bean" class="headerlink" title="使用其它Bean"></a>使用其它Bean</h4><p>在<code>propertu</code>中有一个<code>ref</code>属性，这个属性值必须是某一个<code>bean</code>的id，spring可以通过这个属性将指定的<code>bean</code>对指定的属性进行赋值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.domain.Car&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小轿车&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;五彩斑斓的黑&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;MyCar&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanPropertyRef</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> app.getBean(Person.class);</span><br><span class="line">  <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> bean.getCar();</span><br><span class="line">  System.out.println(<span class="string">&quot;汽车：&quot;</span> + car.getCardName());</span><br><span class="line">  System.out.println(<span class="string">&quot;颜色：&quot;</span> + car.getColor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汽车：小轿车</span><br><span class="line">颜色：五彩斑斓的黑</span><br></pre></td></tr></table></figure>



<h4 id="引用内部bean"><a href="#引用内部bean" class="headerlink" title="引用内部bean"></a>引用内部bean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.domain.Car&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小轿车&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;五彩斑斓的黑&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式相当于<code>car = new Car();</code>。与外部无关，所以<code>getBean</code>的时候会找不到这个car</p>
<h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>在ioc中对<code>List</code>类型进行赋值，可以使用**<code>list</code>**标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.domain.Car&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小轿车&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;五彩斑斓的黑&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.domain.Car&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小轿车&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;五彩斑斓的黑&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.domain.Car&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小轿车&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;五彩斑斓的黑&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除了内部Bean的方式，还可以使用**<code>ref</code>**标签引用外部Bean。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.domain.Car&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小轿车&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;五彩斑斓的黑&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册一个bean组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;MyCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="Map类型"><a href="#Map类型" class="headerlink" title="Map类型"></a>Map类型</h3><p>同样的，使用List类型有对应的list标签，那么Map类型也有一个map标签。spring底层使用的是<code>LinkedHashMap</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Clover&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个<code>entry</code>对于一个KV，map也提供了一个**<code>value-ref</code><strong>属性用于引用外部Bean。用法与其它</strong><code>ref</code>**属性一致。</p>
<h2 id="Util名称空间"><a href="#Util名称空间" class="headerlink" title="Util名称空间"></a>Util名称空间</h2><p>使用这个名称空间，需要在**<code>beans</code>**中添加<code>xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</code>，还需要在xsi中添加两个与util名称相关的链接<code>http://www.springframework.org/schema/util， http://www.springframework.org/schema/util/spring-util-4.0.xsd</code>。可以为<code>Map</code>、<code>List</code>、<code>set</code>、<code>properties</code>等类型创建对应的Bean。</p>
<p>以map为例，<code>util:map</code>相当于new 一个<code>LinkedHashMap</code>。不需要再使用map标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;diyMap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clover&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ioc.xml&quot;</span>);</span><br><span class="line">Map&lt;String, Object&gt; diyMap =(Map&lt;String, Object&gt;) app.getBean(<span class="string">&quot;diyMap&quot;</span>);</span><br><span class="line">System.out.println(diyMap);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;name=clover, age=19&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Bean之间的依赖"><a href="#Bean之间的依赖" class="headerlink" title="Bean之间的依赖"></a>Bean之间的依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Book&quot;</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>**<code>Bean</code>**的创建默认是按照配置文件中配置的先后顺序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person创建了...</span><br><span class="line">book被创建...</span><br></pre></td></tr></table></figure>

<p> 如果你注册的bean需要依赖到某个bean时，若是你的bean先被创建，可能会发生不可预料的错误。那么这时候就需要用到spring提供的<code>depends-on</code>属性。它需要一个id，也可以通过**<code>,</code>**隔开传多个id。表示我当前这个bean依赖到了xxx。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Person&quot;</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.Book&quot;</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">book被创建...</span><br><span class="line">person创建了...</span><br></pre></td></tr></table></figure>



<h2 id="Bean的多实例和单实例"><a href="#Bean的多实例和单实例" class="headerlink" title="Bean的多实例和单实例"></a>Bean的多实例和单实例</h2><p>在spring中，bean默认是单实例，若想讲bean组册为多实例，需要使用**<code>bean</code>**标签提供的<code>scope</code>属性。该属性有两个属性值</p>
<ul>
<li><p><code>prototype</code></p>
<p>表示当前bean是多实例的</p>
<ol>
<li>容器启动默认不会去创建bean</li>
<li>多实例bean只有在获取的时候被创建</li>
<li>每次获取都会创建一个新的对象</li>
</ol>
</li>
<li><p><code>singleton</code><br>表示当前bean是单实例的</p>
<ol>
<li>在容器启动完成之前就已经创建好对象保存在容器中了。</li>
<li>在任何时候获取都是获取之前创建好的那个对象。</li>
</ol>
</li>
</ul>
<h2 id="静态工厂和实例工厂"><a href="#静态工厂和实例工厂" class="headerlink" title="静态工厂和实例工厂"></a>静态工厂和实例工厂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirPlane</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机长名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> String captainName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 副驾驶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> String coPilot;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发动机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> String engine;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 载客量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂是一个专门帮我们创建对象的类</p>
<h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><p>工厂本身不需要创建对象。都是通过静态方法调用：<code>obj = xxxFactory.getxxx(String className)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirPlaneStaticFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 飞机工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> captainName 机长名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 飞机实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> AirPlane <span class="title function_">getAirPlane</span><span class="params">(String captainName)</span> &#123;</span><br><span class="line">    <span class="type">AirPlane</span> <span class="variable">airPlane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirPlane</span>();</span><br><span class="line">    airPlane.setCaptainName(captainName);</span><br><span class="line">    airPlane.setCoPilot(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">    airPlane.setEngine(<span class="string">&quot;太行&quot;</span>);</span><br><span class="line">    airPlane.setTotal(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">return</span> airPlane;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="通过IOC调用静态工厂注册Bean"><a href="#通过IOC调用静态工厂注册Bean" class="headerlink" title="通过IOC调用静态工厂注册Bean"></a>通过IOC调用静态工厂注册Bean</h4><p>创建好工厂后，需要通过bean去调用这个工厂，最后将工厂的返回值注册为一个Bean对象。</p>
<p>**<code>bean</code><strong>标签</strong><code>class</code><strong>属性指向工厂全类名，需要配合</strong><code>factory-method</code>**属性让ioc调用工厂方法。如果工厂方法需要传参，可以使用<code>constructor-arg</code>赋值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;AirPlane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.factory.AirPlaneStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAirPlane&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;captainName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAirPlaneStaticFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AirPlane</span> <span class="variable">airPlaneBean</span> <span class="operator">=</span> (AirPlane)app.getBean(<span class="string">&quot;AirPlaneByAirPlaneStaticFactory&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;通过静态工厂创建的bean对象：&quot;</span> + airPlaneBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过静态工厂创建的bean对象：AirPlane&#123;captainName=&#x27;张三&#x27;, coPilot=&#x27;Clover&#x27;, engine=&#x27;太行&#x27;, total=300&#125;</span><br></pre></td></tr></table></figure>





<h3 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h3><p>工厂本身需要创建对象：<code>obj = new xxxFactory();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirPlaneInstanceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 飞机工厂</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> captainName 机长名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 飞机实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> AirPlane <span class="title function_">getAirPlane</span><span class="params">(String captainName)</span> &#123;</span><br><span class="line">    <span class="type">AirPlane</span> <span class="variable">airPlane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirPlane</span>();</span><br><span class="line">    airPlane.setCaptainName(captainName);</span><br><span class="line">    airPlane.setCoPilot(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">    airPlane.setEngine(<span class="string">&quot;太行&quot;</span>);</span><br><span class="line">    airPlane.setTotal(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">return</span> airPlane;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="通过IOC调用实例工厂注册Bean"><a href="#通过IOC调用实例工厂注册Bean" class="headerlink" title="通过IOC调用实例工厂注册Bean"></a>通过IOC调用实例工厂注册Bean</h4><ol>
<li>先配置出实例工厂对象</li>
<li>配置要创建的AirPlane使用哪个工厂创建</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建一个实例工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airPlaneInstanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.factory.AirPlaneInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用指定工厂创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airPlaneByAirPlaneInstanceFactory&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;airPlaneInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAirPlane&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;captainName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过**<code>factory-bean</code>**属性来指定使用哪个工厂实例创建<code>bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAirPlaneInstanceFactory</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">AirPlane</span> <span class="variable">airPlaneBean</span> <span class="operator">=</span> (AirPlane)app.getBean(<span class="string">&quot;airPlaneByAirPlaneInstanceFactory&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;通过实例工厂创建的bean对象：&quot;</span> + airPlaneBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过实例工厂创建的bean对象：AirPlane&#123;captainName=&#x27;李四&#x27;, coPilot=&#x27;Clover&#x27;, engine=&#x27;太行&#x27;, total=300&#125;</span><br></pre></td></tr></table></figure>



<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>FactoryBean是Spring规定的一个接口，只要是这个接口接口的实现类，Spring都认为是一个工厂。</p>
<ul>
<li><code>getObject</code> 获取工厂创建的对象</li>
<li><code>getObjectType</code> 获取对象类型</li>
<li><code>isSingleton</code> 当前工厂注册的Bean是否为单例</li>
</ul>
<blockquote>
<p>**<code>FactoryBean</code>**创建的对象不管是单实例还是多实例，都是在获取的时候才创建对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;AirPlane&gt; &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> AirPlane <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">AirPlane</span> <span class="variable">airPlane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirPlane</span>();</span><br><span class="line">    airPlane.setCaptainName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    airPlane.setCoPilot(<span class="string">&quot;Clover&quot;</span>);</span><br><span class="line">    airPlane.setEngine(<span class="string">&quot;太行&quot;</span>);</span><br><span class="line">    airPlane.setTotal(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">return</span> airPlane;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">    <span class="keyword">return</span> AirPlane.class;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现了<code>FactoryBean</code>接口后还需要在配置文件中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airPlaneBySpringFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.MyFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">AirPlane</span> <span class="variable">airPlaneBean</span> <span class="operator">=</span> (AirPlane)app.getBean(<span class="string">&quot;airPlaneBySpringFactoryBean&quot;</span>);</span><br><span class="line">  System.out.println(</span><br><span class="line">    <span class="string">&quot;通过FactoryBean创建的bean对象：&quot;</span> + airPlaneBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过FactoryBean创建的bean对象：AirPlane&#123;captainName=&#x27;王五&#x27;, coPilot=&#x27;Clover&#x27;, engine=&#x27;太行&#x27;, total=300&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Bean的后置处理器"><a href="#Bean的后置处理器" class="headerlink" title="Bean的后置处理器"></a>Bean的后置处理器</h2><ul>
<li>编写后置处理器实现类<code>BeanPostProcessor</code></li>
<li>将后置处理器注册在配置文件中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean在初始化的时候会调用这个方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName bean注册的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 要注册的bean对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;「&quot;</span>+ bean +<span class="string">&quot;」bean准备开始初始化了 ---&gt;&gt; &quot;</span> + beanName);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法之后被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName bean名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 要注册的bean对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;「&quot;</span>+ bean +<span class="string">&quot;」bean初始化方法调用完了 ---&gt;&gt; &quot;</span> + beanName);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置文件注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;top.clover.spring.bean.MyBeanPostProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">「AirPlane&#123;captainName=&#x27;张三&#x27;, coPilot=&#x27;Clover&#x27;, engine=&#x27;太行&#x27;, total=300&#125;」bean准备开始初始化了 ---&gt;&gt; airPlaneByAirPlaneStaticFactory</span><br><span class="line">「AirPlane&#123;captainName=&#x27;张三&#x27;, coPilot=&#x27;Clover&#x27;, engine=&#x27;太行&#x27;, total=300&#125;」bean初始化方法调用完了 ---&gt;&gt; airPlaneByAirPlaneStaticFactory</span><br></pre></td></tr></table></figure>



<h2 id="Dao、Controller、Service"><a href="#Dao、Controller、Service" class="headerlink" title="Dao、Controller、Service"></a>Dao、Controller、Service</h2><p>通过给bean上添加某些注解，可以快速的将bean加入到ioc容器中。<br>分别使用Spring提供的这四个注解</p>
<ul>
<li><p><strong><code>@Controller</code></strong><br>用来给控制层加上</p>
</li>
<li><p><strong><code>@Service</code></strong><br>业务逻辑层的组件添加这个注解</p>
</li>
<li><p><strong><code>@Repository</code></strong><br>给数据库层（持久化层&#x2F;Dao层）添加这个注解</p>
</li>
<li><p><strong><code>@Component</code></strong></p>
<p>可以给有功能的类添加上这个注解，表示这个类是一个组件</p>
</li>
</ul>
<blockquote>
<p>注解可以随便加，Spring底层不会去验证你的这个组件是否如你注解所说就是一个dao层或者就是一个servlet层的组件。</p>
</blockquote>
<p>使用注解将组件快速的加入到容器需要这几步：</p>
<ol>
<li>给组件上标注所需注解</li>
<li>告诉Spring自动扫描加了注解的组件。这个功能依赖了context名称空间</li>
<li>导入aop包，这个包支持注解模式</li>
</ol>
<p>在配置文件中加入<code>context</code>名称空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p>
<p>加入之后这个名称空间提供了一个**<code>context:compnent-scan</code><strong>标签，用来自动扫描组件。这个标签中有一个</strong><code>base-package</code>**属性，用来指定扫描的基础包，把基础包及子包下的所有加了注解的类自动的扫描进ioc容器中。</p>
<blockquote>
<p>默认注册为单例模式。若想注册为多例，需要使用**<code>@Scope</code>**注解</p>
</blockquote>
<h2 id="Autowired自动装配"><a href="#Autowired自动装配" class="headerlink" title="@Autowired自动装配"></a>@Autowired自动装配</h2><p>被<code>@Autowired</code>标注的属性，spring会根据类型到ioc容器中查找并赋值给被标注的属性。前提是你这个属性所在的类和目标类型已经被注册进容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">()</span> &#123;</span><br><span class="line">    bookService.saveBook();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveBook</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;调用bookDao中的saveBook保存图书....&quot;</span>);</span><br><span class="line">    bookDao.saveBook();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveBook</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;保存书籍成功....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试这个controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试自动注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowired</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">BookController</span> <span class="variable">controller</span> <span class="operator">=</span> app.getBean(BookController.class);</span><br><span class="line">  controller.doGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用bookDao中的saveBook保存图书....</span><br><span class="line">保存书籍成功....</span><br></pre></td></tr></table></figure>

<h3 id="在方法上使用"><a href="#在方法上使用" class="headerlink" title="在方法上使用"></a>在方法上使用</h3><p><code>@Autowired</code>可以标注在很多地方</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果作用在方法上</p>
<ul>
<li>这个方法会在bean创建的时候自动运行</li>
<li>这个方法上的每一个参数都会自动注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowired</span><span class="params">(BookService bookService)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;容器创建，autowired运行：---》&quot;</span>+bookService);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">容器创建，autowired运行：---》top.ctong.service.BookService@5e21e98f</span><br></pre></td></tr></table></figure>





<h3 id="大致原理"><a href="#大致原理" class="headerlink" title="大致原理"></a>大致原理</h3><ul>
<li><code>@Autowired</code> 默认按照类型去容器中找到对应的组件<ul>
<li>找到一个就直接赋值</li>
<li>没有找到就抛异常<code>BeanCreationException</code></li>
<li>如果找到多个<ol>
<li>会根据变量名最为id再找一次<code>app.getBean(String id)</code></li>
<li>如果这时候还是匹配不上，那么还是抛出错误。</li>
</ol>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>@Qualifier</code> 可以修改<code>@Autowired</code>的哦人行为，<code>@Autowired</code>会根据<code>@Qualifier</code> 的值进行查找。<code>app.getBean(String id);</code></p>
</blockquote>
<hr>
<p>自动装配有三种</p>
<ol>
<li><code>@Autowired</code><br>这是spring自己的注解，相比其它两个，它更强大</li>
<li><code>@Resource</code><br>这是javax提供的，是一个标准。相比其它，他的扩展性更强。如果换成其它框架，<code>@Resource</code>还可以使用，<code>@Autowired</code>可能就不行了。</li>
<li><code>@Inject</code></li>
</ol>
<h3 id="泛型注入"><a href="#泛型注入" class="headerlink" title="泛型注入"></a>泛型注入</h3><p>在同类型组件中，<code>@Autowired</code>可以根据泛型去匹配</p>
<p>例如有一个<code>BaseDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt;  &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有两个类实现<code>BaseDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Book&gt; &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;保存图书&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;User&gt; &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;用户保存&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一个<code>BaseService</code>去使用泛型注入对应Dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseService</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BaseDao&lt;T&gt; baseDao;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;baseDao类型是：&quot;</span> + baseDao);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别有<code>UserService</code>和<code>BookService</code>继承<code>BaseService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;Book&gt;&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveBook</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;调用bookDao中的saveBook保存图书....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;User&gt;&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 防止存在一个或多个有参构造器时反射通过无参构造起实例化发生异常</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBaseService</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">UserService</span> <span class="variable">userBean</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br><span class="line">  <span class="type">BookService</span> <span class="variable">BookBean</span> <span class="operator">=</span> app.getBean(BookService.class);</span><br><span class="line">  userBean.save();</span><br><span class="line">  BookBean.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">baseDao类型是：top.ctong.dao.UserDao@6692b6c6</span><br><span class="line">baseDao类型是：top.ctong.dao.BookDao@1cd629b3</span><br></pre></td></tr></table></figure>

<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP(Aspect Oriented Programming或面向切面编程) 。这是一种新的编程思想。他不是用来替代OOP的，他是一种基于OOP基础之上衍生出的一种新的思想。</p>
<p>面向切面编程是指在程序运行期间，<strong>将某段代码动态的切入</strong>到指定方法的指定位置进行运行。</p>
<h2 id="AOP与动态代理"><a href="#AOP与动态代理" class="headerlink" title="AOP与动态代理"></a>AOP与动态代理</h2><ol>
<li>动态代理写起来代码复杂</li>
<li>jdk默认的动态代理，如果目标对象没有实现任何接口，是无法为它创建代理对象的。</li>
<li>spring实现的AOP功能，底层就是动态代理</li>
<li>spring可以一句代码都不写的去创建动态代理 </li>
<li>spring实现简单，而且没有强制要求目标对象必须实现接口</li>
<li>原生动态代理就是切面编程，而Spring简化了面向切面编程</li>
</ol>
<h2 id="AOP的几个专业术语"><a href="#AOP的几个专业术语" class="headerlink" title="AOP的几个专业术语"></a>AOP的几个专业术语</h2><ul>
<li><p>横切关注点<br>每一个方法的开始</p>
</li>
<li><p>通知方法<br>每一个横切关注点触发的方法</p>
</li>
<li><p>切面类<br>通知方法所在的类</p>
</li>
<li><p>连接点<br>每一个方法的每一个位置都是一个连接点</p>
</li>
<li><p>切入点</p>
<p>在众多连接点中选出我们感兴趣的地方。例如：方法结束需要记录日志，方法异常需要记录日志，方法返回需要记录日志的地方。</p>
</li>
<li><p>切入点表达式</p>
</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271048731.png" alt="AOP专业术语"></p>
<h2 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h2><p>若想spring支持面向切面编程，需要导入<code>spring-aspects-4.0.0.RELEASE.jar</code>，这是spring提供的基础版jar包。</p>
<p>由于spring提供的包比较基础，可以使用第三方加强包「即使目标对象没有实现任何接口也能创建动态代理」。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.springsource.org.aopalliance-1.0.0.jar</span><br><span class="line">com.springsource.net.sf.cglib-2.2.0.jar</span><br><span class="line">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><p>将目标类和切面类（装了通知方法的类）加入到ioc容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMathCalculator</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i - j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i * j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i / j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Aspect</code>注解告诉spring哪个是切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogUtils</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法执行之前的日志记录器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Before(&quot;execution(public int top.ctong.aop.impl.MyMathCalculator.*(int, int))&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStartBefore</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;方法执行前....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After(&quot;execution(public int top.ctong.aop.impl.MyMathCalculator.*(int, int)))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">  public static void methodAfter() &#123;</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>方法执行完成....<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @AfterReturning(&quot;</span>execution(<span class="keyword">public</span> <span class="type">int</span> top.ctong.aop.impl.MyMathCalculator.*(<span class="type">int</span>, <span class="type">int</span>)))<span class="string">&quot;)</span></span><br><span class="line"><span class="string">  public static void methodReturning() &#123;</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>方法执行返回值....<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @AfterThrowing(&quot;</span>execution(<span class="keyword">public</span> <span class="type">int</span> top.ctong.aop.impl.MyMathCalculator.*(<span class="type">int</span>, <span class="type">int</span>)))<span class="string">&quot;)</span></span><br><span class="line"><span class="string">  public static void methodException() &#123;</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>方法执行完成....<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>告诉spring切面类里面的每一个方法都什么时候运行。</p>
<ol>
<li><code>@Before</code> 在目标方法执行之前运行「前置通知」</li>
<li><code>@After</code>在目标方法结束之后运行「后置通知」</li>
<li><code>@AfterReturning</code> 在目标方法正常返回之后运行「返回通知」</li>
<li><code>@AfterThrowing</code> 在目标方法抛出异常之后运行「异常通知」</li>
<li><code>@Around</code> 环绕「环绕通知」</li>
</ol>
</li>
<li><p>标注好所需注解后，还需要告诉spring，你这个切面在哪里运行，需要写切入点表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">excution(访问权限符 返回值类型 方法签名)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中 开启基于注解的AOP功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.ctong&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogUtilsAspect</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Calculator</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="built_in">this</span>.app.getBean(Calculator.class);</span><br><span class="line">  bean.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法执行前....</span><br><span class="line">方法执行完成....</span><br><span class="line">方法执行返回值....</span><br></pre></td></tr></table></figure>

<p>注意：当前<code>bean</code>还是一个代理对象，因为AOP底层就是原生<code>Proxy</code>，所以不能通过<code>MyMathCalculator.class</code>来获取。但当被代理类没有任何父类的时候，又可以通过<code>MyMathCalculator.class</code>进行获取。</p>
<p>在没有任何父类的时候，是cglib帮我们创建的代理对象。cglib为我们创建的一个内部类，内部类中实现了所有<code>MyMathCalculator</code>的方法</p>
<p><code>class top.ctong.aop.impl.MyMathCalculator$$EnhancerByCGLIB$$1a9d9ab2</code></p>
<h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><p>切入点表达式的固定写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">excution(访问权限符 返回值类型 方法签名(参数列表))</span><br></pre></td></tr></table></figure>



<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul>
<li><strong><code>*</code></strong><ol>
<li>匹配一个或多个字符</li>
<li>匹配任意一个参数</li>
<li>如果放在路径上，那么只能匹配一层路径</li>
<li>权限不能表示</li>
</ol>
</li>
<li><strong><code>..</code></strong><ol>
<li>匹配任意多个参数，任意类型参数</li>
<li>匹配任意多层路径</li>
</ol>
</li>
<li>**<code>&amp;&amp;</code>**切入的位置要同时满足两种表达式</li>
<li>**<code>||</code>**切入的位置最少要满足一种表达式</li>
<li>**<code>!</code>**不满足指定表达式触发</li>
</ul>
<h3 id="抽取表达式"><a href="#抽取表达式" class="headerlink" title="抽取表达式"></a>抽取表达式</h3><p>抽取可重用的切入点表达式</p>
<ol>
<li>随便声明一个没有实现的返回<code>void</code>的空方法。</li>
<li>给方法上标注<code>@Pointcut</code>注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectLogUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut(&quot;execution(* top.ctong..add(..))&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aspectAddMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 抽取切入点表达式</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After(&quot;aspectAddMethod()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aspectAllAddMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;方法执行了...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="目标方法信息"><a href="#目标方法信息" class="headerlink" title="目标方法信息"></a>目标方法信息</h2><p>只需要为通知方法的参数列表上写一个<code>JoinPoint</code>类型的参数。它封装了目标方法的详细信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After(&quot;execution(* top.ctong.aop.impl.MyMathCalculator.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodAfter</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">  <span class="comment">// 获取方法签名</span></span><br><span class="line">  <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">  System.out.println(<span class="string">&quot;「&quot;</span> + signature.getName() + <span class="string">&quot;」方法执行完成....使用的参数：「&quot;</span> + Arrays.asList(joinPoint.getArgs()) + <span class="string">&quot;」&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">「add方法执行完成....使用的参数：「[1, 1]」</span><br></pre></td></tr></table></figure>

<p>获取方法返回值，需要在通知注解中指定，在<code>@AfterReturning</code>注解中，有一个<code>returning</code>属性，用来指定参数名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(public int top.ctong.aop.impl.MyMathCalculator.*(int, int)))</span><span class="string">&quot;, returning = &quot;</span>result<span class="string">&quot;)</span></span><br><span class="line"><span class="string">public static void methodReturning(JoinPoint joinPoint, Object result) &#123;</span></span><br><span class="line"><span class="string">  // 获取方法签名</span></span><br><span class="line"><span class="string">  Signature signature = joinPoint.getSignature();</span></span><br><span class="line"><span class="string">  System.out.println(&quot;</span>「<span class="string">&quot; + signature.getName() + &quot;</span>」方法执行返回值===&gt;&gt;<span class="string">&quot; + result);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>获取异常和获取返回值操作一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* top.ctong.aop.impl.MyMathCalculator.*(..))&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodException</span><span class="params">(Exception exception)</span> &#123;</span><br><span class="line">  exception.getCause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Around环绕通知"><a href="#Around环绕通知" class="headerlink" title="Around环绕通知"></a>Around环绕通知</h2><p><code>@Around</code>是spring最强大的通知。它相当于我们手写动态代理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;aspectAddMethod()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aspectAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  Object[] args = pjp.getArgs();</span><br><span class="line">  <span class="comment">// 类似method.invoke()</span></span><br><span class="line">  <span class="keyword">return</span> pjp.proceed(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="基于配置文件的AOP"><a href="#基于配置文件的AOP" class="headerlink" title="基于配置文件的AOP"></a>基于配置文件的AOP</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myMathCalculator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.ctong.utils.MyMathCalculator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aspectLogUtils&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.ctong.utils.AspectLogUtils&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  指定切面  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;aspectLogUtils&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 抽取表达式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;MyMathCalculatorAllMethod&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* top.ctong..MyMathCalculator.*(..))&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;aspectBefore&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* top.ctong..MyMathCalculator.*(..))&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;aspectAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;MyMathCalculatorAllMethod&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;aspectThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;MyMathCalculatorAllMethod&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;aspectReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;MyMathCalculatorAllMethod&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若想使用基于配置文件的aop，需要引入<code>aop</code>空间。</p>
<ul>
<li><code>aop:aspect</code>指定切面类</li>
<li><code>aop:pointcut</code>抽取切入点表达式，这个标签如果放在<code>aop:aspect</code>中，那么只能在当前切面可使用，若想全局使用，可以将其放置在切面外，也就是<code>aop:config</code>直接子级。</li>
<li><code>aop:before</code>指定前置切入</li>
<li><code>aop:after</code>指定后置切入</li>
<li><code>aop:after-throwing</code> 指定异常切入</li>
<li><code>aop:after-returning</code>指定返回时切入</li>
</ul>
<h2 id="SpringIOC源码"><a href="#SpringIOC源码" class="headerlink" title="SpringIOC源码"></a>SpringIOC源码</h2><ol>
<li>IOC是一个容器</li>
<li>容器启动的时候创建所有单实例对象</li>
<li>我们可以直接从容器中获取到这个对象</li>
</ol>
<h3 id="SpringIOC启动过程"><a href="#SpringIOC启动过程" class="headerlink" title="SpringIOC启动过程"></a>SpringIOC启动过程</h3><ul>
<li><p><code>ClassPathXmlApplicationContext</code>所有构造器调用的都是这个构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="type">boolean</span> refresh, ApplicationContext parent)</span></span><br><span class="line">  <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">super</span>(parent);</span><br><span class="line">  setConfigLocations(configLocations);</span><br><span class="line">  <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在构造器中，最重要的代码是 <code>refresh();</code>。它负责创建所有单实例bean和启动容器</p>
<ol>
<li><p>在第一行代码中，<code>synchronized (this.startupShutdownMonitor) </code> 有个同步锁，是为了保证在多线程环境中IOC容器只被创建一次。</p>
<blockquote>
<p> 生产环境默认是多线程的。</p>
</blockquote>
</li>
<li><p><code>prepareRefresh();</code>解析配置文件，以准备刷新上下文</p>
</li>
<li><p><code>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code>准备一个Bean工厂，在此工厂中准备好了待初始化的Bean、系统环境信息等基础信息用于后来创建Bean。也就是说在这一步已经解析好了xml配置文件。<br> <img src="http://qiniu-note-image.ctong.top/note/images/202112271048736.png" alt="ConfigurableListableBeanFactory继承图"></p>
</li>
<li><p><code>prepareBeanFactory(beanFactory);</code>设置工厂的所有可能用到的外置工厂，例如注解解析器，类加载器等其它工厂</p>
</li>
<li><p><code>postProcessBeanFactory(beanFactory)</code>工厂的后置处理设置</p>
</li>
<li><p><code>invokeBeanFactoryPostProcessors(beanFactory);</code>调用bean工厂的后置处理器</p>
</li>
<li><p><code>registerBeanPostProcessors(beanFactory);</code>注册所有<code>BeanPostProcessor.class</code>类型的Bean。也就是说在这一步把所有<code>BeanPostProcessor.class</code>实例化。</p>
</li>
<li><p><code>initMessageSource();</code>支持国际化语言服务</p>
</li>
<li><p><code>initApplicationEventMulticaster();</code> 初始化事件传唤器，spring有创建、销毁bean时会产生非常多的事件，转换器是为了能让其它组件感知到spring触发了哪个事件。</p>
</li>
<li><p><code>onRefresh();</code>这是一个空的方法，留给子类的一个初始化方法。例如你重写IOC容器，可以重写这个方法进行初始化某些必要的Bean。</p>
</li>
<li><p><code>registerListeners();</code>注册监听器，注册的是<code>ApplicationListener.class</code>类型的监听器，这是一个spring事件监听器。</p>
</li>
<li><p><code>finishBeanFactoryInitialization(beanFactory);</code>完成所有剩余的bean实例的初始化</p>
<ol>
<li><p><code>beanFactory.preInstantiateSingletons();</code>初始化所有剩余的bean</p>
<blockquote>
<p><code>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</code></p>
</blockquote>
<ol>
<li><p><code>RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</code>根据id拿到Bean的定义信息。里面包含了bean所有的详细信息。</p>
</li>
<li><p><code>if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123; ... &#125;</code>如果当前bean不是一个抽象类，并且是单实例和不是懒加载。那么就创建它。</p>
<blockquote>
<p>懒加载就是在使用的时候才创建。</p>
</blockquote>
</li>
<li><p><code>if (isFactoryBean(beanName)) &#123;...&#125; else &#123;getBean(beanName);&#125;</code>如果是工厂bean那么就通过工厂去创建这个bean。否则直接创建。</p>
</li>
<li><p>所有的<code>getBean</code>调用的都是<code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</code>，直接看它就好</p>
<ol>
<li><p><code>final String beanName = transformedBeanName(name);</code>获取Bean名称</p>
</li>
<li><p><code>Object sharedInstance = getSingleton(beanName);</code>从单例缓存池中检查是否存在这个bean。如果存在就直接拿这个bean。</p>
</li>
<li><p><code>final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</code>获取当前bean的定义信息。</p>
</li>
<li><p><code>String[] dependsOn = mbd.getDependsOn();</code>获取当前bean是有依赖了谁。也就是在xml文件中bean标签的<code>depends-on</code>属性。如果有那么循环它，再调用<code>getBean</code>方法。也就是说，先创建好所依赖的对象再创建自己。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line"><span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (String dependsOnBean : dependsOn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(<span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> +</span><br><span class="line">                                      beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dependsOnBean + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    registerDependentBean(dependsOnBean, beanName);</span><br><span class="line">    getBean(dependsOnBean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>sharedInstance = getSingleton(...)</code> 创建bean。</p>
<ol>
<li><p><code>singletonObject = singletonFactory.getObject();</code>一系列验证当前bean不存在之后开始创建。</p>
<blockquote>
<p><code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean</code></p>
<p>通过反射创建：</p>
<p><code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance</code></p>
</blockquote>
</li>
<li><p><code>addSingleton(beanName, singletonObject);</code>将创建好的bean对象放到单实例缓存池中</p>
<blockquote>
<p>在项目中使用<code>getBean</code>其实也是在这个缓存池中获取对应的bean</p>
</blockquote>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<h2 id="BeanFactory和ApplicationContext的区别"><a href="#BeanFactory和ApplicationContext的区别" class="headerlink" title="BeanFactory和ApplicationContext的区别"></a>BeanFactory和ApplicationContext的区别</h2><p>ApplicationContext是BeanFactory的子接口</p>
<ul>
<li>BeanFactory是一个工厂接口，也是Spring最底层的接口。负责创建Bean实例，容器里面保存的所有单例bean其实都是在一个map中。</li>
<li>ApplicationContext是容器接口，更多的是负责容器功能的实现。（可以基于BeanFactory创建好的对象之上完成强大的容器）容器可以从map中获取这个bean，并且aop、di在ApplicationContext接口的下面的这些类里面。</li>
</ul>
<blockquote>
<p>BeanFactory是最底层的接口，而ApplicationContext更多是留给我们使用的ioc容器接口。</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>idea创建普通Web项目lib目录无法输出，tomcat不报错问题</title>
    <url>/2022/01/02/idea%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9AWeb%E9%A1%B9%E7%9B%AElib%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%BE%93%E5%87%BA%EF%BC%8Ctomcat%E4%B8%8D%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="idea创建普通Web项目lib目录无法输出，tomcat不报错问题"><a href="#idea创建普通Web项目lib目录无法输出，tomcat不报错问题" class="headerlink" title="idea创建普通Web项目lib目录无法输出，tomcat不报错问题"></a>idea创建普通Web项目lib目录无法输出，tomcat不报错问题</h1><p>idea版本：2021.2</p>
<p>tomcat版本：9.0.50</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>创建一个普普通通的web项目，目录结构大概就是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .idea</span><br><span class="line">│   ├── artifacts</span><br><span class="line">│   ├── inspectionProfiles</span><br><span class="line">│   ├── libraries</span><br><span class="line">│   └── sonarlint</span><br><span class="line">│       └── issuestore</span><br><span class="line">├── conf</span><br><span class="line">├── lib</span><br><span class="line">├── out</span><br><span class="line">│   ├── artifacts</span><br><span class="line">│   │   └── test03_war_exploded</span><br><span class="line">│   │       └── WEB-INF</span><br><span class="line">│   │           ├── classes</span><br><span class="line">│   │           │   └── top</span><br><span class="line">│   │           │       └── ctong</span><br><span class="line">│   │           │           └── controller</span><br><span class="line">│   │           └── lib</span><br><span class="line">│   └── production</span><br><span class="line">│       └── test03</span><br><span class="line">│           ├── generated</span><br><span class="line">│           └── top</span><br><span class="line">│               └── ctong</span><br><span class="line">│                   └── controller</span><br><span class="line">├── src</span><br><span class="line">│   └── top</span><br><span class="line">│       └── ctong</span><br><span class="line">│           └── controller</span><br><span class="line">└── web</span><br><span class="line">    └── WEB-INF</span><br></pre></td></tr></table></figure>

<p><code>lib</code>文件夹已经设置为<code>Library</code>文件夹。</p>
<p><code>controller</code>搞了个<code>hello</code>请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6290967590153117614L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置了自动包扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.ctong&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加载了<code>DispatcherServlet</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>点启动，访问<code>/hello</code>成功荣获404….干掉<code>out</code>目录重启….404…</p>
<p>重新建一个项目，启动…..<code>hello world</code>…..</p>
<p>再创建新项目，启动…<code>404</code>…</p>
<p>打开<code>FileMerge</code>文件对比工具…嗯？差不多啊…</p>
<p>…打开<code>out</code>文件夹，嗯？怎么lib目录没加进来…</p>
<p>…反反复复2天后…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>尝试将<code>lib</code>目录拖进<code>web/WEB-INF</code>目录…<code>hello world</code>…</p>
<p>不信邪，再把<code>lib</code>拖到项目根目录…<code>404</code>…</p>
<p>……<strong>MMP</strong>……我之前一直这样都没问题…</p>
<p>不知道第几次打开 idea &#x3D;&#x3D;&#x3D; &gt;&gt; Proiect Structure…</p>
<p>无意间点了 Proiect Settings  &#x3D;&#x3D;&#x3D;&gt;&gt; Artifacts…嗯？怎么有警告…..</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271548244.png" alt="截屏2021-08-06 10.41.23"></p>
<p><code>Library lib &#39; required for module test03 is missing from the artifact</code> 嗯？莫名其妙双击了右边的<code>lib</code>。警告消失了…</p>
<p>启动…<code>hello world</code>…</p>
<p>什么妖魔鬼怪…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>java使用replace时中文被URL编码导致无效解决</title>
    <url>/2022/01/23/java%E4%BD%BF%E7%94%A8replace%E6%97%B6%E4%B8%AD%E6%96%87%E8%A2%ABURL%E7%BC%96%E7%A0%81%E5%AF%BC%E8%87%B4%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>在使用 <code>&quot;&quot;.replace(&quot;中文&quot;, &quot;&quot;)</code> 时，如果 <code>target</code> 中存在中文就会被进行 URL 编码，例如</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201231739592.png" alt="源信息"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202201231739458.png" alt="URL编码后"></p>
<p>以上例子是想用 <code>queryString.replace(&quot;&amp;attrs=44_以官网信息为准&quot;, &quot;&quot;);</code> 将 <code>&amp;attrs=44_以官网信息为准</code> 替换为空字符，但被URL编码了，编码后相当于 <code> queryString.replace(&quot;&amp;attrs=44_%E4%.....&quot;, &quot;&quot;);</code> ，这时候就匹配不到我们的目标字符串。</p>
<p>可以将中文进行 <strong>UTF-8</strong> 编码就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对字符串进行UTF-8编码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;44_以官网信息为准&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">targetStr</span> <span class="operator">=</span> queryString.replace(<span class="string">&quot;&amp;attrs=&quot;</span> + str, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在进行编码后，浏览器将空格替换为 <code>%20</code>，而java将空格替换为 <code>+</code> ,所以需要解决他们的差异</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决java与浏览器的差异</span></span><br><span class="line">str.replace(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>java获取类路径下文件的绝对路径</title>
    <url>/2022/01/02/java%E8%8E%B7%E5%8F%96%E7%B1%BB%E8%B7%AF%E5%BE%84%E4%B8%8B%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h2 id="获取文件绝对路径"><a href="#获取文件绝对路径" class="headerlink" title="获取文件绝对路径"></a>获取文件绝对路径</h2><p>在idea中，默认的当前路径是project的根路径，如果你使用idea的默认路径，只要离开idea换到其他位置，可能当前路径就不是project的根路径了。</p>
<p><strong>使用以下通用方式的前提是：这个文件必须在类路径下。在项目的src目录下的都是类路径下，src是类的根路径</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">currentPath</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;fileName&quot;</span>).getPath();</span><br></pre></td></tr></table></figure>

<p><code>Thread.currentThread()</code>是当前线程对象</p>
<p><code>getContextClassLoader()</code>是线程对象的方法，可以获取到当前线程类加载器对象。</p>
<p><code>getResource()</code>类加载器的方法，当前线程的类加载器默认从类的根路径下加载资源。</p>
<p>采用以上方法可以拿到一个文件的绝对路径</p>
<hr>
<p>这种方式无法获取一个<code>.java</code>文件，因为java程序是需要编译后才能执行，而<code> .java</code>会被编译成<code> .class</code>。<br>而java编译时可能会被编译在别的路径下，例如IDEA，是在<code>target</code>文件下，这才是真正的类路径<br><img src="http://qiniu-note-image.ctong.top/note/images/202112271115453.png" alt="image.png"></p>
<h2 id="资源绑定器"><a href="#资源绑定器" class="headerlink" title="资源绑定器"></a>资源绑定器</h2><p>java.util包下提供了一个资源绑定器，便于获取属性配置文件中的内容。使用以下这种方式的时候，属性配置文件xxx.properties必须放到类路径下。</p>
<p>例如我类路径下有一个<code>properties.properties</code>文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">  <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> rb.getString(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-cloud远程调用</title>
    <url>/2022/01/02/spring-cloud%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>在微服务中，若想要使用远程调用，需要引入<code>spring-cloud-starter-openfeign</code>（在使用注册中心的环境下）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于open-feign是声明式的远程调用，所以需要编写一个接口，并且告诉SpringCloud这个接口需要调用远程服务。这个接口我放在公共模块下的<code>feign</code>中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.ctong.gulimall.common.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> top.ctong.gulimall.common.utils.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过自定义参数查询列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 自定义参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Clover You</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/11/17 09:11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    R <span class="title function_">list</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>@FeignClient(&quot;xxx&quot;)</code> 该注解用于告诉SpringCloud这是一个远程调用接口，其中的<code>value</code>是你在注册中心中注册的服务名。</li>
</ul>
<blockquote>
<p>接口方法签名需要与被调用的远程服务签名一致，例如上面哪个代码要调用的远程服务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.ctong.gulimall.coupon.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CouponService couponService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="comment">//@RequiresPermissions(&quot;coupon:coupon:list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span>&#123;</span><br><span class="line">        <span class="type">PageUtils</span> <span class="variable">page</span> <span class="operator">=</span> couponService.queryPage(params);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<p>接着还要使用<code>@EnableFeignClients</code>开启当前需要使用远程调用的这个服务的远程调用，并且指定你的远程调用接口在哪个包下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;top.ctong.gulimall.common.feign&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.ctong.gulimall.member.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallMemberApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GulimallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@EnableFeignClients</code> 该注解用于开启当前服务的远程调用功能<ul>
<li><code>basePackages</code> 用于指定远程调用接口所在的包，方便服务启动的时候可以快速扫描到。他可以接收多个包名，因为它是一个<code>String[]</code></li>
</ul>
</li>
</ul>
<p>最后在需要远程调用时注入对应的远程调用接口就好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.ctong.gulimall.member.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member/member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CouponFeignService couponFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MemberController</span><span class="params">(CouponFeignService couponFeignService, MemberService memberService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.couponFeignService = couponFeignService;</span><br><span class="line">        <span class="built_in">this</span>.memberService = memberService;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testFeignInvoke&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">testFeignInvoke</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; parem = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> couponFeignService.list(parem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="错误-nacos"><a href="#错误-nacos" class="headerlink" title="错误(nacos)"></a>错误(nacos)</h2><p>如果在启动时出现 <code>No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-loadbalancer?</code> 错误，那么就是你的SpringCloud版本比较高，在高版本的SpringCloud中已经不再使用 <code>spring-cloud-starter-netflix-ribbon</code> 了，而是使用 <code>spring-cloud-starter-loadbalancer</code> 。而nacos还是使用的 <code>spring-cloud-starter-netflix-ribbon</code>。</p>
<p>在<code>pom.xml</code>文件中引入 <code>spring-cloud-starter-loadbalancer</code> 再启动就没毛病了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在测试远程调用中发生 <code>AbstractMethodError</code> 异常。需要在 <code>pom.xml</code> 中<strong>排除</strong> nacos 中引入的 <strong>ribbon</strong> 。否则 <code>spring-cloud-starter-loadbalancer</code> 无法工作。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s 安装 Ingress 出错 CrashLoopBackOff</title>
    <url>/2022/03/25/k8s-%E5%AE%89%E8%A3%85-Ingress-%E5%87%BA%E9%94%99-CrashLoopBackOff/</url>
    <content><![CDATA[<h1 id="k8s-安装-Ingress-出错-CrashLoopBackOff"><a href="#k8s-安装-Ingress-出错-CrashLoopBackOff" class="headerlink" title="k8s 安装 Ingress 出错 CrashLoopBackOff"></a>k8s 安装 Ingress 出错 CrashLoopBackOff</h1><p>学习 k8s 在安装 Ingress 的时候一直出现 <code>CrashLoopBackOff</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE       NAME                                READY   STATUS             RESTARTS   AGE</span><br><span class="line">ingress-nginx   nginx-ingress-controller-kmkhx      0/1     CrashLoopBackOff   4          2m56s</span><br><span class="line">ingress-nginx   nginx-ingress-controller-nncd7      1/1     Running            0          2m56s</span><br></pre></td></tr></table></figure>

<p><strong>搞了我3天</strong></p>
<p>检查日志 <code>kubectl logs nginx-ingress-controller-kmkhx -n ingress-nginx</code> ，说80端口被占用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl logs nginx-ingress-controller-kmkhx -n ingress-nginx</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">NGINX Ingress controller</span><br><span class="line">  Release:    0.20.0</span><br><span class="line">  Build:      git-e8d8103</span><br><span class="line">  Repository: https://github.com/kubernetes/ingress-nginx.git</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">F0325 02:12:50.629951       9 main.go:72] Port 80 is already in use. Please check the flag --http-port</span><br></pre></td></tr></table></figure>

<p>突然想到我这集群镜像是直接复制之前开发虚拟机的系统来搭建的集群，安装了很多奇奇怪怪得妖魔鬼怪…</p>
<p>之后检查 docker 发现了之前配置的 nginx在 80 端口启动（使用 <code>docker ps</code> 命令）。emmm…</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203251118681.png" alt="docker"></p>
<p>由于这是 k8s master 主机，所以我直接把不相干的 docker 镜像全部卸载了（其它节点也全部干掉不相干的镜像）</p>
<p>如果容器在启动，那么停止掉它 <code>docker stop &lt;container-id&gt;</code></p>
<p>移除这个容器 <code>docker rm  &lt;container-id&gt;</code></p>
<p>最后删除这个镜像 <code>docker rmi &lt;image-name:tags&gt;</code></p>
<p>最后问题就解决了</p>
<p><strong>你可能和我的情况不一样，具体情况需要根据日志错误提示来修复</strong></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm整合</title>
    <url>/2022/01/02/ssm%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p><a href="https://github.com/YouChuantong/ssm_Integration">源码GitHub地址</a></p>
<h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><p>整的的第一步…先导包</p>
<ul>
<li><p>Spring</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AOP增强</span><br><span class="line">com.springsource.net.sf.cglib-2.2.0.jar</span><br><span class="line">com.springsource.org.aopalliance-1.0.0.jar</span><br><span class="line">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span><br><span class="line"></span><br><span class="line">AOP核心</span><br><span class="line">spring-aspects-4.0.0.RELEASE.jar</span><br><span class="line"></span><br><span class="line">IOC核心包</span><br><span class="line">commons-logging-1.1.3.jar</span><br><span class="line">spring-aop-4.0.0.RELEASE.jar</span><br><span class="line">spring-beans-4.0.0.RELEASE.jar</span><br><span class="line">spring-context-4.0.0.RELEASE.jar</span><br><span class="line">spring-core-4.0.0.RELEASE.jar</span><br><span class="line">spring-expression-4.0.0.RELEASE.jar</span><br><span class="line">spring-tx-4.0.0.RELEASE.jar</span><br><span class="line"></span><br><span class="line">测试核心包</span><br><span class="line">spring-test-4.0.0.RELEASE.jar</span><br><span class="line"></span><br><span class="line">JDBC核心包</span><br><span class="line">spring-jdbc-4.0.0.RELEASE.jar</span><br><span class="line">spring-orm-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>


</li>
<li><p>SpringMVC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MVC核心包</span><br><span class="line">spring-web-4.0.0.RELEASE.jar</span><br><span class="line">spring-webmvc-4.0.0.RELEASE.jar</span><br><span class="line"></span><br><span class="line">文件上传下载 核心包</span><br><span class="line">commons-io-2.0.jar</span><br><span class="line">commons-fileupload-1.2.1.jar</span><br><span class="line"></span><br><span class="line">JSR303校验核心包</span><br><span class="line">hibernate-validator-annotation-processor-5.0.3.Final.jar</span><br><span class="line">hibernate-validator-cdi-5.0.3.Final.jar</span><br><span class="line">hibernate-validator-5.0.3.Final.jar</span><br><span class="line">classmate-1.0.0.jar</span><br><span class="line">jboss-logging-3.1.1.GA.jar</span><br><span class="line">validation-api-1.1.0.Final.jar</span><br><span class="line"></span><br><span class="line">jstl-jsp标准标签库</span><br><span class="line">jstl.jar</span><br><span class="line">standard.jar</span><br><span class="line"></span><br><span class="line">ajax/JSON支持</span><br><span class="line">jackson-databind-2.1.5.jar</span><br><span class="line">jackson-core-2.1.5.jar</span><br><span class="line">jackson-annotations-2.1.5.jar</span><br></pre></td></tr></table></figure>


</li>
<li><p>MyBatis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyBatis核心包</span><br><span class="line">mybatis-3.4.1.jar</span><br><span class="line"></span><br><span class="line">日志框架</span><br><span class="line">log4j-1.2.17.jar</span><br><span class="line">slf4j-log4j12-1.7.30.jar</span><br><span class="line">slf4j-api-1.7.30.jar</span><br><span class="line"></span><br><span class="line">MyBatis与Spring整合包</span><br><span class="line">mybatis-spring-1.3.0.jar</span><br></pre></td></tr></table></figure>


</li>
<li><p>其他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库驱动</span><br><span class="line">mysql-connector-java-8.0.21.jar</span><br><span class="line"></span><br><span class="line">数据源</span><br><span class="line">c3p0-0.9.1.2.jar</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>启动Spring容器，在web.xml文件中配置Spring容器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  启动Spring 容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  指定配置文件位置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自动包扫描"><a href="#自动包扫描" class="headerlink" title="自动包扫描"></a>自动包扫描</h3><p>在<code>spring-config.xml</code> 开启自动包扫描，Spring不需要接管<code>Controller</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  自动包扫描  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.ctong.ssm&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  排除Controller注解标注的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  导入jdbc配置文件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置c3p0数据源  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;comboPooledDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.pass&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>jdbc.properties</code> 配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.pass</span>=<span class="string">123</span></span><br><span class="line"><span class="attr">jdbc.database</span>=<span class="string">mybatis</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br></pre></td></tr></table></figure>



<h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><p>配置事务管理器，让他控制住数据源里面的连接的关闭和提交</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置事务控制  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;comboPooledDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置事务切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  事务增强、事务属性、事务建议</span></span><br><span class="line"><span class="comment">  - transaction-manager：指定事务管理器</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myTx&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  配置事务属性  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  任何方法发生异常就回滚</span></span><br><span class="line"><span class="comment">	   - rollback-for: 触发指定异常时回滚</span></span><br><span class="line"><span class="comment">  	 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  get开头的方法设置只读，可优化性能  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  基于xml配置，配置事务  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* top.ctong.ssm.service..*(..))&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myTx&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoint&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="web-xml-1"><a href="#web-xml-1" class="headerlink" title="web.xml"></a>web.xml</h3><p>在<code>web.xml</code> 中配置SpringMVC前端控制器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC前端控制器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>web.xml</code> 中配置字符编码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  字符编码  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置REST风格过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  REST风格  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自动包扫描-1"><a href="#自动包扫描-1" class="headerlink" title="自动包扫描"></a>自动包扫描</h3><p>在<code>springmvc-config.xml</code>开启自动包扫描，需要禁用默认行为，因为默认行为是全包扫描，SpringMVC只需要接管Controller类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  开启自动包扫描，禁用默认行为  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.ctong.ssm&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  接管被Controller接管的类  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="资源访问配置"><a href="#资源访问配置" class="headerlink" title="资源访问配置"></a>资源访问配置</h3><p>防止静态或动态资源失效。加上这两个配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  静态资源映射  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  动态资源映射  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文件上传解析器"><a href="#文件上传解析器" class="headerlink" title="文件上传解析器"></a>文件上传解析器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  文件上传解析器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  最大内存大小  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024 * 1024 * 100&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  单文件最大内存大小--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024 * 1024 * 10&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认编码格式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>在<code>spring-config.xml</code>配置文件中整合Mybatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  整合MyBatis, SqlSessionFactoryBean可以根据配置文件得到SqlSessionFactory  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  配置文件位置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  数据源  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;comboPooledDataSource&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  xml映射文件路径  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  把每个Dao接口的&quot;实例&quot;加入到IOC  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  指定Dao接口所在的包  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;top.ctong.ssm.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp使用axios请求并封装无验证权限时重试</title>
    <url>/2022/01/02/uniapp%E4%BD%BF%E7%94%A8axios%E8%AF%B7%E6%B1%82%E5%B9%B6%E5%B0%81%E8%A3%85%E6%97%A0%E9%AA%8C%E8%AF%81%E6%9D%83%E9%99%90%E6%97%B6%E9%87%8D%E8%AF%95/</url>
    <content><![CDATA[<p>在uniapp中，使用axios进行请求时，uniapp无法使用axios的适配器，需要基于<code>uni.request</code>来定义适配器。<br>安装完成axios后在项目utils目录下建一个axios文件夹</p>
<blockquote>
<p>文中根目录代表utils中的axios文件夹</p>
</blockquote>
<p>在根目录新建一个axios.js文件，在该文件中配置一个新的axios</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">crossDomain</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">6000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在根目录建一个lib文件夹，在这个文件夹里建一个adapter.js文件，该文件配置了基于uniapp的axios适配，记得抛出这个适配器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> settle <span class="keyword">from</span> <span class="string">&quot;axios/lib/core/settle&quot;</span></span><br><span class="line"><span class="keyword">import</span> buildURL <span class="keyword">from</span> <span class="string">&quot;axios/lib/helpers/buildURL&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 格式化路径 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">URLFormat</span> = <span class="keyword">function</span> (<span class="params">baseURL, url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> url.<span class="title function_">startsWith</span>(<span class="string">&quot;http&quot;</span>) ? url : baseURL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* axios适配器配置 */</span></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: config.<span class="property">method</span>.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">      <span class="attr">url</span>: <span class="title function_">buildURL</span>(<span class="title class_">URLFormat</span>(config.<span class="property">baseURL</span>, config.<span class="property">url</span>), config.<span class="property">params</span>, config.<span class="property">paramsSerializer</span>),</span><br><span class="line">      <span class="attr">header</span>: config.<span class="property">headers</span>,</span><br><span class="line">      <span class="attr">data</span>: config.<span class="property">data</span>,</span><br><span class="line">      <span class="attr">dataType</span>: config.<span class="property">dataType</span>,</span><br><span class="line">      <span class="attr">responseType</span>: config.<span class="property">responseType</span>,</span><br><span class="line">      <span class="attr">sslVerify</span>: config.<span class="property">sslVerify</span>,</span><br><span class="line">      <span class="attr">complete</span>: <span class="keyword">function</span> <span class="title function_">complete</span>(<span class="params">response</span>) &#123;</span><br><span class="line">        response = &#123;</span><br><span class="line">          <span class="attr">data</span>: response.<span class="property">data</span>,</span><br><span class="line">          <span class="attr">status</span>: response.<span class="property">statusCode</span>,</span><br><span class="line">          <span class="attr">errMsg</span>: response.<span class="property">errMsg</span>,</span><br><span class="line">          <span class="attr">header</span>: response.<span class="property">header</span>,</span><br><span class="line">          <span class="attr">config</span>: config</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">settle</span>(resolve, reject, response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> adapter;</span><br></pre></td></tr></table></figure>
<p>在根目录的axios.js文件中，使用这个适配器并设置重新发起请求的次数以及每次重新请求的间隔时间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> adapter <span class="keyword">from</span> <span class="string">&quot;./lib/adapter&quot;</span></span><br><span class="line">service.<span class="property">defaults</span>.<span class="property">adapter</span> = adapter;</span><br><span class="line">service.<span class="property">defaults</span>.<span class="property">retry</span> = <span class="number">5</span>; <span class="comment">// 设置请求次数</span></span><br><span class="line">service.<span class="property">defaults</span>.<span class="property">retryDelay</span> = <span class="number">1000</span>;<span class="comment">// 重新请求时间间隔</span></span><br></pre></td></tr></table></figure>

<p>设置一个请求完成后的拦截器，如果响应头中的状态码为200表示成功，将请求得到的数据返回，否则一律视为错误请求，需要返回一个Promise。在lib中建立一个axiosError.js在里面处理失败的请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">axiosError</span>(err, service))</span><br></pre></td></tr></table></figure>
<p>axiosError.js中需要传入axios拦截器截到的错误以及我们新创建的这个axios，这个错误处理页面只是充当一个分配器的角色，我们可以根据响应头中的状态进行处理该错误，未处理的错误在使用时处理，返回Promise.reject</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理401错误代码</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Error401</span> <span class="keyword">from</span> <span class="string">&quot;../handlers/401Error&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">err, axios</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> errStatus = err.<span class="property">response</span>.<span class="property">status</span>;</span><br><span class="line">  <span class="keyword">if</span> (errStatus == <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Error401</span>(err); <span class="comment">// 401没有权限，重新请求设置token</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>处理401错误代码，当请求失败并且响应头中的状态码为401时，是我没没有权限去请求，可以根据项目来进行处理，我们是需要携带token，所以401为token未携带或失效，请求时无需传入token，axios遇到401会自动携带这个token重新去请求。在根目录建一个handlers文件夹，在里面建一个401Error.js用于处理401的错误。<br>这里使用到Vuex，需要引入Vuex，因为获取token、设置token的方法以及token都放在里面！！！使用<code>store.dispatch(&quot;getToken&quot;)</code>得到token后将token设置到请求头Authorization</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> interceptorsError <span class="keyword">from</span> <span class="string">&quot;../lib/interceptorsError&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 需要传入axios错误配置 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">err, axios</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> config = err.<span class="property">config</span>;<span class="comment">// axios请求配置</span></span><br><span class="line">  store.<span class="title function_">dispatch</span>(<span class="string">&quot;getToken&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&quot;Authorization&quot;</span>] = store.<span class="property">state</span>.<span class="property">cnrToken</span>.<span class="property">cnr_token</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  err.<span class="property">config</span> = config;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">interceptorsError</span>(axios, config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一切准备就绪之后需要重新请求，在根目录建一个interceptorsError.js文件，用于重新执行请求，这个方法需要一个请求配置，只需要把我们上一个请求的配置传入即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">axios, config</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果配置不存在或未设置重试选项，reject</span></span><br><span class="line">  <span class="keyword">if</span> (!config || !config.<span class="property">retry</span>) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  <span class="comment">// 设置变量以跟踪重试计数</span></span><br><span class="line">  config.<span class="property">__retryCount</span> = config.<span class="property">__retryCount</span> || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 如果重试次数大于最大重试次数，reject</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">__retryCount</span> &gt;= config.<span class="property">retry</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每重试一次记录一次重试次数</span></span><br><span class="line">  config.<span class="property">__retryCount</span> += <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 重试间隔时间</span></span><br><span class="line">  <span class="keyword">const</span> backoff = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, config.<span class="property">retryDelay</span> || <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> backoff.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">axios</span>(config);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是我Vuex中的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: UpYou</span></span><br><span class="line"><span class="comment"> * @Date: 2020-09-25 16:30:13</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-09-25 21:32:56</span></span><br><span class="line"><span class="comment"> * @Descripttion: token</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">cnr_token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">POST_KEYS</span>: &#123;</span><br><span class="line">    ...获取token需要的验证信息...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">/* 设置token */</span></span><br><span class="line">  <span class="title function_">SET_CNRTOKEN</span>(<span class="params">state, Payload</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Payload</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;Bearer&quot;</span>))</span><br><span class="line">      state.<span class="property">cnr_token</span> = <span class="title class_">Payload</span>;</span><br><span class="line">    <span class="keyword">else</span> state.<span class="property">cnr_token</span> = <span class="string">&quot;Bearer&quot;</span> + <span class="title class_">Payload</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">/* 向服务器获取token */</span></span><br><span class="line">  <span class="title function_">getToken</span>(<span class="params">context, args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;token服务器地址&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123; ...context.<span class="property">state</span>.<span class="property">POST_KEYS</span> &#125;,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">await</span> context.<span class="title function_">commit</span>(<span class="string">&#x27;SET_CNRTOKEN&#x27;</span>, res.<span class="property">data</span>.<span class="property">access_token</span>)</span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: reject</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state, mutations, actions,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Clover-You/fornt-end-quick-demo/blob/542fa04a90407086eab4471b7ab07b71ff46fc99/uniapp%E4%BD%BF%E7%94%A8axios%E8%AF%B7%E6%B1%82%E5%B9%B6%E5%B0%81%E8%A3%85%E6%97%A0%E9%AA%8C%E8%AF%81%E6%9D%83%E9%99%90%E6%97%B6%E9%87%8D%E8%AF%95.zip">源码下载</a></p>
]]></content>
      <categories>
        <category>小玩意</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用TypeScript装饰器简单模仿SpringBoot提供的@Configuration注解与@ConfigurationProperties注解</title>
    <url>/2022/01/02/%E4%BD%BF%E7%94%A8TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8%E7%AE%80%E5%8D%95%E6%A8%A1%E4%BB%BFSpringBoot%E6%8F%90%E4%BE%9B%E7%9A%84@Configuration%E6%B3%A8%E8%A7%A3%E4%B8%8E@ConfigurationProperties%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>这两天才开始学习SpringBoot，遇到了两个很有意思的注解，打算用TypeScript模拟一下</p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">UpYou</span></span><br><span class="line"><span class="attr">map:</span> &#123;</span><br><span class="line">    <span class="attr">name:</span> <span class="string">UpYou</span>,</span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(&#123; <span class="attr">prefix</span>: <span class="string">&#x27;map&#x27;</span> &#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Preson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> age?: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> name?: <span class="built_in">string</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取组件</span></span><br><span class="line"><span class="keyword">const</span> component = <span class="title function_">getComponentInIOC</span>(<span class="title class_">Preson</span>);</span><br></pre></td></tr></table></figure>
<p>输出：<code>Preson &#123; age: 18, name: &#39;UpYou&#39; &#125;</code></p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>这个注解是用来注册组件的，在SpringBoot也是比较重量级的东西了，ts中如何使用以及书写装饰器我就不多说了，网上有很多案例与教程</p>
<p>这是一个容器，所有注册的组件都在这</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOCMapType</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IOC容器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">IOCMap</span>: <span class="title class_">IOCMapType</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Configuration方法"><a href="#Configuration方法" class="headerlink" title="Configuration方法"></a>Configuration方法</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Configuration</span>(<span class="params">target: Class</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = target.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">const</span> inIOC = <span class="title function_">findComponentInIOCByName</span>(name);</span><br><span class="line">    <span class="keyword">if</span> (!inIOC) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;the component exists in container.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addComponentToCantainer</span>(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="findComponentInIOCByName方法"><a href="#findComponentInIOCByName方法" class="headerlink" title="findComponentInIOCByName方法"></a>findComponentInIOCByName方法</h3><p>这个方法主要查找容器中是否存在某个主键</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在容器中通过组件名查找组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findComponentInIOCByName</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">IOCMap</span>[name] === <span class="built_in">void</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="addComponentToCantainer方法"><a href="#addComponentToCantainer方法" class="headerlink" title="addComponentToCantainer方法"></a>addComponentToCantainer方法</h3><p>这个主要用来注册组件到容器</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将组件注册到容器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addComponentToCantainer</span>(<span class="params">component: Class</span>) &#123;</span><br><span class="line">    <span class="title class_">IOCMap</span>[component.<span class="property">name</span>] = <span class="keyword">new</span> <span class="title function_">component</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在这个修饰器就写好了</p>
<h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>这个注解是用来绑定配置的<br>例如在某个规定位置下有一个<code>application.yml</code>文件，这是一个配置文件，那么通过这个注解可以将配置文件中对应的配置映射到被标注的类中。</p>
<p>例如我们在某个位置有一个<code>application.yml</code>文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="title class_">UpYou</span></span><br><span class="line"><span class="attr">map</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">UpYou</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们需要使用<code>js-yaml</code>插件来读取它</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取配置文件</span></span><br><span class="line"><span class="keyword">const</span> yml = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;application.yml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="built_in">any</span> = yaml.<span class="title function_">load</span>(yml.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure>
<p>读取出来就是JSON格式<br><code>&#123; name: &#39;UpYou&#39;, map: &#123; name: &#39;UpYou&#39;, age: 18 &#125; &#125;</code></p>
<h3 id="ConfigurationProperties方法"><a href="#ConfigurationProperties方法" class="headerlink" title="ConfigurationProperties方法"></a>ConfigurationProperties方法</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConfigurationPropertiesParam</span> = &#123;</span><br><span class="line">    <span class="attr">prefix</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 绑定配置文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ConfigurationProperties</span>(<span class="params">args: ConfigurationPropertiesParam</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nodes = args.<span class="property">prefix</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: Class</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> component = <span class="title function_">getComponentInIOC</span>(target.<span class="property">name</span>);</span><br><span class="line">        <span class="keyword">let</span> conf = config;</span><br><span class="line">        <span class="comment">// 过滤配置文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (conf[node] === <span class="built_in">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            conf = conf[node]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绑定配置文件对应值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> field <span class="keyword">in</span> conf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(component, field)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (component[field] <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                component[field] = conf[field];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个循环主要将对应的配置文件过滤出来，例如<code>prefix</code>是<code>map.test</code>，需要拿的就是配置文件中<code>map</code>里边的<code>test</code>，通过<code>.</code>分割<code>prefix</code>的内容，然后一层一层循环进去就能拿到对应配置了。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = args.<span class="property">prefix</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">    <span class="keyword">if</span> (conf[node] === <span class="built_in">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    conf = conf[node]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接设置组件的字段就可以了。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定配置文件对应值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> field <span class="keyword">in</span> conf) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(component, field)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (component[field] <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        component[field] = conf[field];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getComponentInIOC方法"><a href="#getComponentInIOC方法" class="headerlink" title="getComponentInIOC方法"></a>getComponentInIOC方法</h3><p>这个方法用来获取容器中的组件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Class</span> = &#123; <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]): &#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getComponentInIOC</span>(<span class="params">component: <span class="built_in">string</span> | Class</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = component <span class="keyword">instanceof</span> <span class="title class_">Function</span> ? component.<span class="property">name</span> : component;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">findComponentInIOCByName</span>(name)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no such component in container...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">IOCMap</span>[name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>模拟完之后对SpringBoot了解更深了…</p>
</blockquote>
]]></content>
      <categories>
        <category>小玩意</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nacos作为配置中心统一管理配置</title>
    <url>/2022/01/02/%E4%BD%BF%E7%94%A8nacos%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>引入所需依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建一个 <code>bootstrap.properties</code> 或 <code>bootstrap.yaml</code> 。其中指定项目名与配置中心服务器地址</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>

<p>最后需要再配置中心添加一个数据集（Data Id），通常是「应用名.properties」。新建完后就可以给“<strong>配置内容</strong>”中添加任何配置，可以通过<code>@Value(&quot;$&#123;配置名&#125;&quot;)</code>获取到配置。如果还需要动态刷新，可以给类加上 <code>@RefreshScope</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;author.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="http://qiniu-note-image.ctong.top/note/images/%E6%88%AA%E5%B1%8F2021-11-19%2015.50.26.png" alt="截屏2021-11-19 15.50.26"></p>
<h2 id="dataID"><a href="#dataID" class="headerlink" title="dataID"></a>dataID</h2><p>在 Nacos Config Starter 中，dataId 的拼接格式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;prefix&#125; - $&#123;spring.profiles.active&#125; . $&#123;file-extension&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</p>
</li>
<li><p><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles">Spring Boot文档</a></p>
<p><strong>注意，当 active profile 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;</code>.<code>$&#123;file-extension&#125;</code></strong></p>
</li>
<li><p><code>file-extension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code>来配置。 目前只支持 <code>properties</code> 类型。</p>
</li>
</ul>
<h2 id="group"><a href="#group" class="headerlink" title="group"></a>group</h2><ul>
<li><code>group</code> 默认为 <code>DEFAULT_GROUP</code>，可以通过 <code>spring.cloud.nacos.config.group</code> 配置。</li>
</ul>
<h2 id="Nacos-作为配置中心的更多细节"><a href="#Nacos-作为配置中心的更多细节" class="headerlink" title="Nacos 作为配置中心的更多细节"></a>Nacos 作为配置中心的更多细节</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote>
<p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 DataID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离。例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p>
</blockquote>
<p>默认的命名空间是 <code>public(保留空间)</code> ：默认新增的所有配置都在 <code>public</code> 空间下。</p>
<p>例如有开发、测试、生产三个环境，此时需要将生产环境的配置切换到开发环境的配置，那么就可以使用命名空间快速切换不同的环境配置，需要在 <code>bootstrap</code> 配置中修改配置，配置如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#命名空间ID</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">24b7cf49-b115-4d1f-85a7-fdb44d9ec559</span></span><br></pre></td></tr></table></figure>



<h3 id="配置集"><a href="#配置集" class="headerlink" title="配置集"></a>配置集</h3><blockquote>
<p>一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件就是一个配置集，包含了系统的各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p>
</blockquote>
<h3 id="配置集ID"><a href="#配置集ID" class="headerlink" title="配置集ID"></a>配置集ID</h3><p>类似配置文件名，在Nacos中叫Data ID</p>
<h3 id="配置分组"><a href="#配置分组" class="headerlink" title="配置分组"></a>配置分组</h3><p>默认所有的配置集都属于：<strong>DEFAULT_GROUP</strong></p>
<p>可以通过 <code>bootstrap</code> 配置文件中指定使用哪个配置分组</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>每个微服务都创建自己的命名空间，使用配置分组区分环境</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>随笔</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>关于synchronized无法锁住Integer</title>
    <url>/2022/01/02/%E5%85%B3%E4%BA%8Esynchronized%E6%97%A0%E6%B3%95%E9%94%81%E4%BD%8FInteger/</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在多线程的时候，为了保证数据安全，必须在修改数据时使用线程同步，java中的<code>synchronized</code>用来实现线程同步、线程列队。</p>
<p>学完多线程基础的我，写一个多线程交替输出<code>1,2,3,4,5...</code>，一个线程负责输出偶数，一个线程负责输出奇数，由于这个数是整数，在java中<code>int</code>又是基本数据类型，基本数据类型并不是共享的，也就是基础数据类型是在栈中申明，java提供了一个<code>Integer</code>包装类，使用的时候发现根本锁不住这个对象。</p>
<p>回忆之前对<code>Integer</code>的知识：为了提高程序效率，<code>Integer</code>在类加载时就已经创建了<code>-128到127</code>的对象</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271114093.png" alt="底层代码"></p>
<p>嗯！！！！如果我对这个对象进行运算的话！内存地址是不是也不一样？（细思极恐）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(num++;)</span><br></pre></td></tr></table></figure>



<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271114940.png" alt="内存地址"></p>
<h2 id="粗暴解决方案"><a href="#粗暴解决方案" class="headerlink" title="粗暴解决方案"></a>粗暴解决方案</h2><p>建一个加锁类（人工造锁），将需要用到的运算什么的加进去，嗯简单粗暴！！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerLock</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.num = num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">remainder</span><span class="params">(Integer o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num % o;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plus</span><span class="params">(Integer o)</span> &#123;</span><br><span class="line">    num = num + o;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271114724.png" alt="完成"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式下Session共享</title>
    <url>/2022/02/14/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8BSession%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<h1 id="分布式下Session共享"><a href="#分布式下Session共享" class="headerlink" title="分布式下Session共享"></a>分布式下Session共享</h1><p>首先聊聊session和cookie，session对象存储在服务器端节点内存中，cookie存储在客户端浏览器中。一般是客户端请求服务器，服务器端生成session对象，将session对象存储在jvm内存中，并且在响应头中放入sessionId响应给客户端，客户端收到响应后，将sessionid存储在本地。当浏览器第二次请求时会将本地cookie中存储的seesionId通过请求头的方式传递给服务器，这样服务器和客户端就能保持会话信息啦！如下图</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202141813781.jpg" alt="img"></p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202141813789.jpg" alt="img"></p>
<p>那么为什么会出现分布式session问题呢，为了提高服务器端的负载能力，后台一般将服务器节点做集群，通过ngnix通过轮询的方式转发到目标服务器。打个比方，当浏览器首次访问A服务器生成session对象，然后在访问生成的session对象，如果正好被ngnix转发到了A服务器，那么没问题可以获取到session对象，如果不巧请求被转发到B服务器，由于之前生成的session对象在A服务器，B服务器根本没有生成session对象，很自然访问不到session对象。</p>
<blockquote>
<p>上文来自<a href="https://zhuanlan.zhihu.com/p/95687710#:~:text=%E5%88%86%E5%B8%83%E5%BC%8Fsessi,ssion%E5%AF%B9%E8%B1%A1%E3%80%82">知乎https://zhuanlan.zhihu.com/p/95687710#:~:text&#x3D;%E5%88%86%E5%B8%83%E5%BC%8Fsessi,ssion%E5%AF%B9%E8%B1%A1%E3%80%82</a></p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="sessions-复制"><a href="#sessions-复制" class="headerlink" title="sessions 复制"></a>sessions 复制</h3><p>session复制的优点是，web-server原生支持，只需要修改配置文件</p>
<p>而他的缺点也很明显：</p>
<ul>
<li>sessiong同步需要数据传输，占用大量网络带宽，降低了服务器群的业务处理能力</li>
<li>任意一台 web-server 保存的数据都是所有 web-server 的 session 总和，受到内存限制无法水平扩展更多的 web-server</li>
<li>大型分布式集群情况下，由所有 web-server 都全量保存数据，所以此方案不可取。</li>
</ul>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202141905270.png" alt="截屏2022-02-14 下午7.05.56"></p>
<h3 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h3><p>客户端存储，其优点是，服务器不需要存储 session，用户保存自己的session信息到cookie中。节省服务端资源。</p>
<p>缺点是：</p>
<ul>
<li>每次发起请求，都需要携带cookie中的完整信息，浪费网络带宽。</li>
<li>session 数据放在 cookie 中，cookie 有长度<strong>限制4k</strong>，不能保存大量信息</li>
<li>session 数据放在 cookie 中，存在泄露、篡改、盗取等安全隐患</li>
</ul>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202141909184.png" alt="截屏2022-02-14 下午7.09.41"></p>
<h3 id="hash一致性"><a href="#hash一致性" class="headerlink" title="hash一致性"></a>hash一致性</h3><p>优点：</p>
<ul>
<li>只需要秀海 nginx 配置，不需要修改应用代码</li>
<li>负载均衡，只要hash属性值的分布是均匀的，多台 web-server 的负载是均匀的</li>
<li>可以支持 web-server 水平扩展</li>
</ul>
<p>缺点：</p>
<ul>
<li>session 还是存在 web-server 中的，所以 web-server 重启可能导致部分 session 丢失，影响业务，如部分用户需要重新登录。</li>
<li>如果 web-server 水平扩展，rehash 后 session 重新分布，也会有一部分用户路由到不正确的 session</li>
</ul>
<p>以上缺点问题不是很大，因为 session 本来都是有效期的，所以这两种反向代理的方式可以使用。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202141922452.png" alt="截屏2022-02-14 下午7.21.57"></p>
<h3 id="统一存储"><a href="#统一存储" class="headerlink" title="统一存储"></a>统一存储</h3><p>优点：</p>
<ul>
<li>没有安全隐患</li>
<li>可以水平扩展，数据库&#x2F;缓存水平切分即可</li>
<li>Web-server 重启或者扩容都不会有 session 丢失</li>
</ul>
<p>不足：</p>
<ul>
<li>增加了一次网络调用，并且需要修改应用代码。如果将所有的 getSession 方法替换为从 Redis 查询数据的方式，Redis 获取数据比本地内存慢很多</li>
<li>上面缺点可以用 SpringSession 完美解决</li>
</ul>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202141936301.png" alt="截屏2022-02-14 下午7.36.04"></p>
<h3 id="SpringSession"><a href="#SpringSession" class="headerlink" title="SpringSession"></a>SpringSession</h3><p>SpringSession 的好处是，它替换掉了 Servlet 默认的 <code>HttpSession</code> 并且实现了原生的 <code>HttpSession</code> 。也就是说我们的代码不需要修改，只需要添加几个SpringSession的配置就可以使用它。</p>
<p>默认的 session 是在本地保存用户session（Map）。SpringSession是使用指定的store进行存储，我们可以指定redis、mongodb等。</p>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202202142002916.png" alt="截屏2022-02-14 下午8.02.56"></p>
<h2 id="SpringSession-1"><a href="#SpringSession-1" class="headerlink" title="SpringSession"></a>SpringSession</h2><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>在对应服务中引入 SpringSession</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后再添加这个配置到你的配置文件中 <code>application.yaml/application.properties</code> ，用于指定存储服务类型</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.session.store-type</span>=<span class="string">redis</span></span><br></pre></td></tr></table></figure>

<p>可以通过配置进行定制，如过期时间、存储前缀等：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.servlet.session.timeout</span>= <span class="string"># Session timeout. If a duration suffix is not specified, seconds is used.</span></span><br><span class="line"><span class="attr">spring.session.redis.flush-mode</span>=<span class="string">on_save # Sessions flush mode.</span></span><br><span class="line"><span class="attr">spring.session.redis.namespace</span>=<span class="string">spring:session # Namespace for keys used to store sessions</span></span><br></pre></td></tr></table></figure>

<p>最后开启 SpringSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallAuthServerApplication</span>;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>就正常使用我们的Session就可以了，因为SpringSession实现了HttpSession并替换掉 Servlet 默认的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/gitee/success&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">giteeAuth</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> memberServerFeign.giteeLogin(giteeUserInfo);</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">MemberRespVo</span> <span class="variable">memberData</span> <span class="operator">=</span> r.getData(<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;MemberRespVo&gt;() &#123;&#125;);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, memberData);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;登录成功 ====&gt;&gt; &#123;&#125;&quot;</span>, memberData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:xxx;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu-note-image.ctong.top/note/images/202202142116653.png" alt="截屏2022-02-14 下午9.16.36"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li><p>SpringSession 默认使用jdk存储，也就是java的序列化，如果存储的对象没有实现 <code>Serializable</code> 接口，那么会抛出 <code>SerializationException</code> 异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRespVo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在分布式系统下，session 是无法跨域取值的，session 设置时默认作用域是当前服务器域名，别的服务是无权使用的。需要将 cookie 中的 jsessionid 设置到父域名，提升作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CookieSerializer <span class="title function_">cookieSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">DefaultCookieSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultCookieSerializer</span>();</span><br><span class="line">  serializer.setDomainName(<span class="string">&quot;gulimall.com&quot;</span>);</span><br><span class="line">  serializer.setCookieName(<span class="string">&quot;JSESSIONID&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> serializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringSession默认使用的是jdk序列化，这样的话就只能用Java程序进行操作了，如果其它语言也要使用，那么我们需要修改其配置，让它默认将数据序列化为JSON格式保存到Redis。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisSerializer&lt;?&gt; springSessionDefaultRedisSerializer() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
        <tag>Spring</tag>
        <tag>Session</tag>
        <tag>SpringSession</tag>
      </tags>
  </entry>
  <entry>
    <title>初学MyBatis（踩坑）Error querying database</title>
    <url>/2022/01/02/%E5%88%9D%E5%AD%A6MyBatis%EF%BC%88%E8%B8%A9%E5%9D%91%EF%BC%89Error-querying-database/</url>
    <content><![CDATA[<p>最近在学习Mybatis，代码全部根据教程写好了，一运行结果报了一个错误，主要错误内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: java.sql.SQLException: java.lang.ClassCastException: java.math.BigInteger cannot be cast to java.lang.Long</span><br><span class="line">### The error may exist in com/ctong/crm/dao/UserDao.xml</span><br><span class="line">### The error may involve com.ctong.crm.dao.UserDao.login</span><br><span class="line">### The error occurred <span class="keyword">while</span> executing a query</span><br><span class="line">### Cause: java.sql.SQLException: java.lang.ClassCastException: java.math.BigInteger cannot be cast to java.lang.Long</span><br><span class="line">	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:<span class="number">30</span>)</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">149</span>)</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">140</span>)</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:<span class="number">76</span>)</span><br><span class="line">	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:<span class="number">87</span>)</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:<span class="number">144</span>)</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:<span class="number">85</span>)</span><br><span class="line">	at com.sun.proxy.$Proxy5.login(Unknown Source)</span><br><span class="line">	at com.ctong.crm.service.impl.UserServiceImpl.login(UserServiceImpl.java:<span class="number">42</span>)</span><br><span class="line">	... <span class="number">31</span> more</span><br></pre></td></tr></table></figure>
<p>说什么BigInteger无法转Long？我跑去检查实体类和数据库，类型全部一一对应</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271102336.png" alt="User.class和数据库对照表"></p>
<p>断点调试跑底层去，发现是连接数据库出现了错误，然后我又跑去检查mybatis配置文件，没问题…</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271102378.png" alt="MyBatis配置文件"></p>
<p>终于在百度快搜烂了的情况下发现了一个帖子（maven依赖版本不对应）<a href="https://www.imooc.com/qadetail/302176">传送门</a></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271102586.png" alt="原帖"></p>
<p>我的<code>mysql-connector-java</code>版本为5.1.23，而我本地mysql版本8.0+，<code>mybatis</code>版本3.5，我把<code>mysql-connector-java</code>版本对应本地mysql之后就好了….</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271102571.png" alt="错误版本"></p>
<p>把依赖版本对应本地mysql版本</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271102523.png" alt="对应mysql版本"></p>
<p>他来啦他来啦！！</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271102820.png" alt="查询结果"></p>
<p>（不知道mybatis版本需不需要对应，你们试试再来告诉我^.^）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>随笔</tag>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>基于uniapp的WebSocket封装的uni.socket</title>
    <url>/2022/01/02/%E5%9F%BA%E4%BA%8Euniapp%E7%9A%84WebSocket%E5%B0%81%E8%A3%85%E7%9A%84uni.socket/</url>
    <content><![CDATA[<h1 id="uni-socket-插件API文档"><a href="#uni-socket-插件API文档" class="headerlink" title="uni. socket 插件API文档"></a>uni. socket 插件API文档</h1><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="/upload/2020/12/uni.socket-dfe94da8cedf47808364c7b358b2aff2.zip">下载</a></p>
<p><a href="https://www.npmjs.com/package/ctong-uni.socket">npm</a></p>
<p><a href="https://github.com/YouChuantong/uni.socket">GitHub</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>需引入并创建一个socket实例，创建完成后你将得到一个uni.socket对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">UniSocket</span> <span class="keyword">from</span> <span class="string">&quot;utils/uni.socket.js&quot;</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">UniSocket</span>(&#123;</span><br><span class="line">	<span class="attr">url</span>: <span class="string">&quot;wss://127.0.0.1/&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>服务器地址</td>
</tr>
<tr>
<td>reconnection</td>
<td>发送错误时是否进行重连，默认<code>true</code></td>
</tr>
<tr>
<td>buffer</td>
<td>是否建立缓存池，当发送消息失败时会吧消息保存到缓存池等待下次发送</td>
</tr>
<tr>
<td>heartRate</td>
<td>系统自动与将程序心跳发送至服务端，默认60000ms</td>
</tr>
<tr>
<td>heartRateType</td>
<td>设置心跳触发的事件，默认触发<code>HEARTBEAT</code>事件</td>
</tr>
<tr>
<td>autoEmitBuffer</td>
<td>是否自动发送缓存池中的数据，默认<code>false</code></td>
</tr>
</tbody></table>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="on"><a href="#on" class="headerlink" title="on"></a>on</h4><p>on方法是一个为uni.socket注册自定义事件的方法，该事件将通过你服务器传回的数据触发，因此，你服务器数据返回的格式必须遵守约定。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;event&#x27;</span>, <span class="title class_">Function</span>(data)&#123;</span><br><span class="line">	<span class="comment">// .... 在此处理服务器发给你的邮件data          </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>服务器返回的数据必须遵守该格式才能保证正常使用：</p>
<p><code>&#123;type: &#39;event&#39;, data: &#123;&#125;&#125;</code></p>
<p><code>data</code>未必是Object格式，它可以是任意格式，但必须拥有<code>type</code>和<code>data</code>，<code>tyep</code>是服务器与你的约定，它将去使用你注册的事件驱动，也就是说，uni.socket是通过<code>type</code>字段来进行触发你自定义的事件驱动的。</p>
<p>如果你的第三个参数为<code>true</code>，那么uni.socket则会检查该事件驱动是否已被注册，如果未被注册，则将它进行注册，默认<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;event&#x27;</span>, <span class="title class_">Function</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>



<h4 id="off"><a href="#off" class="headerlink" title="off"></a>off</h4><p>撤销注册的事件驱动，在uni.socket中，强制每个页面退出、关闭时调用此方法，因为uni.socket无法处理移除页面存在时注册过的事件驱动从而导致的内存泄漏。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">off</span>(<span class="string">&#x27;event&#x27;</span>, handler);</span><br></pre></td></tr></table></figure>

<p>此方法支持连续注销驱动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">off</span>(<span class="string">&#x27;event&#x27;</span>, handler1)(<span class="string">&#x27;event&#x27;</span>, handler2)(<span class="string">&#x27;event&#x27;</span>, handler3);</span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      socket.<span class="title function_">on</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hello</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onUnload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 监听页面卸载</span></span><br><span class="line">      <span class="comment">// 页面退出，撤销hello，释放资源</span></span><br><span class="line">      socket.<span class="title function_">off</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hello</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="removeEventByName"><a href="#removeEventByName" class="headerlink" title="removeEventByName"></a>removeEventByName</h4><p>移除你自定义的事件，因为是危险操作，需要开发者进行二次提交</p>
<p><strong>移除自定义事件包括任何给这个事件注册的驱动</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">removeEventByName</span>(<span class="string">&#x27;event&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">commit</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">commit</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="addBuffer"><a href="#addBuffer" class="headerlink" title="addBuffer"></a>addBuffer</h4><p>给缓存池添加数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">addBuffer</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;event&#x27;</span>, <span class="attr">data</span>: &#123;&#125;&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="getBuffer"><a href="#getBuffer" class="headerlink" title="getBuffer"></a>getBuffer</h4><p>获取缓存池</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">await</span> socket.<span class="title function_">getBuffer</span>();</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">socket.<span class="title function_">getBuffer</span>().<span class="title function_">then</span>(<span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//  ...处理你的缓存池</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h4><p>获取连接状态0 表示连接中，1表示连接成功，2表示重连中，3表示失败</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="keyword">await</span> socket.<span class="title function_">getState</span>();</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">socket.<span class="title function_">getState</span>().<span class="title function_">then</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//  ...处理你状态</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="killApp"><a href="#killApp" class="headerlink" title="killApp"></a>killApp</h4><p>结束心跳，心跳结束后，uni.socket除了心跳发送，在下一次发送心跳时间内，其它功能正常使用，需要后端进行处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">killApp</span>();</span><br></pre></td></tr></table></figure>



<h4 id="close"><a href="#close" class="headerlink" title="close"></a>close</h4><p>关闭与服务器的连接，注意，它不会触发<code>error</code>事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure>



<h4 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h4><p>给服务器发送消息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">emit</span>(<span class="string">&#x27;event&#x27;</span>, &#123;<span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="关于心跳"><a href="#关于心跳" class="headerlink" title="关于心跳"></a>关于心跳</h3><p>uni.socket需向服务器定时发送一次心跳，其触发的事件为<code>HEARTBARE</code>，默认心率为60000ms，服务器可根据该事件进行处理，可修改配置进行修改触发事件<code>heartRateType</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">UniSocket</span>(&#123;</span><br><span class="line">	<span class="attr">url</span>: <span class="string">&quot;wss://127.0.0.1/&quot;</span>,</span><br><span class="line">  <span class="attr">heartRateType</span>: <span class="string">&quot;Your event name...&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h3 id="系统事件"><a href="#系统事件" class="headerlink" title="系统事件"></a>系统事件</h3><p>虽然是系统事件，但它和你自定义的事件并无区别，只是uni.socket赋予了它们特别的使命</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
<th>返回值描述</th>
</tr>
</thead>
<tbody><tr>
<td>error</td>
<td>错误事件，当socket连接发生错误时会触发</td>
<td>错误描述</td>
</tr>
<tr>
<td>reconnectionerror</td>
<td>重连过程中发生的错误</td>
<td>错误描述</td>
</tr>
<tr>
<td>connectioned</td>
<td>连接成功时触发</td>
<td>无</td>
</tr>
<tr>
<td>*</td>
<td>服务器给客户端发送任何消息时触发</td>
<td>客户端消息</td>
</tr>
<tr>
<td>**</td>
<td>后端返回的数据格式违背与UniSocket的约定时触发</td>
<td>客户端消息</td>
</tr>
<tr>
<td>HEARTBARE</td>
<td>每次向服务端发送一次心跳时触发</td>
<td>uni.socket给你返回的垃圾消息</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>小玩意</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/2022/03/14/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h2><p>cron表达式语法：秒 分 时 日 月 周 年(spring暂不支持年)</p>
<table>
<thead>
<tr>
<th>Field Name</th>
<th>Mandatory</th>
<th>Allowed Values</th>
<th>Allowed Special Characters</th>
</tr>
</thead>
<tbody><tr>
<td>Seconds</td>
<td>YES</td>
<td>0-59</td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>Minutes</td>
<td>YES</td>
<td>0-59</td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>Hours</td>
<td>YES</td>
<td>0-23</td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>Day of month</td>
<td>YES</td>
<td>1-31</td>
<td><code>, - * ? / L W </code></td>
</tr>
<tr>
<td>Month</td>
<td>YES</td>
<td>1-12 or JAN-DEC</td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>Day of week</td>
<td>YES</td>
<td>1-7 or SUN-SAT</td>
<td><code>, - * ? / L #</code></td>
</tr>
<tr>
<td>Year</td>
<td>NO</td>
<td>empty, 1970-2099</td>
<td><code>, - * /</code></td>
</tr>
</tbody></table>
<p>特殊字符：</p>
<ul>
<li><p><code>,</code> 枚举</p>
<p><code>(cron=&quot;7,9,23 * * * * ?&quot;)</code> 表示任意时刻的 7、9、23秒启动这个任务。</p>
</li>
<li><p><code>-</code> 范围</p>
<p><code>(cron=&quot;7-20 * * * * ?&quot;)</code> 表示7到20秒之间，每秒启动一次该任务。</p>
</li>
<li><p><code>/</code> 步长</p>
<p><code>(cron=&quot;7/5 * * * * ?&quot;)</code> 表示第7秒启动，每5秒一次</p>
<p><code>(cron=&quot;*/5 * * * * ?&quot;)</code> 表示任意秒启动，每5秒一次</p>
</li>
<li><p><code>?</code> 出现在日和周的位置</p>
<p>为了防止日和周冲突，在周和日上如果要写通配符使用 <code>?</code> </p>
<p><code>(cron=&quot;* * * 1 * ?&quot;)</code> 每月的1号启动这个任务</p>
</li>
<li><p><code>L</code> 出现在日和周的位置<br>last：最后一个</p>
<p><code>(cron=&quot;* * * ? * 3L&quot;)</code> 每月的最后一个周二</p>
</li>
<li><p><code>W</code> Work Day 工作日：</p>
<p><code>(cron=&quot;* * * W * ?&quot;)</code> 每个月的工作日触发</p>
<p><code>(cron=&quot;* * * LW * ?&quot;)</code> 每个月的最后一个工作日触发</p>
</li>
<li><p><code>#</code> 第几个</p>
<p><code>(cron=&quot;* * * ? * 5#2&quot;)</code> 每个月的第二个周四</p>
</li>
</ul>
<h2 id="SpringBoot-整合定时任务"><a href="#SpringBoot-整合定时任务" class="headerlink" title="SpringBoot 整合定时任务"></a>SpringBoot 整合定时任务</h2><p>由于 SpringBoot 原生就支持定时任务，所以我们只需要使用 <code>EnableScheduling</code> 注解开启即可，当然还需要将他加入到容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSchedule</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@Scheduled</code> 注解创建一个定时任务，指定每分钟的第10秒启动，每5秒执行一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSchedule</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled(cron = &quot;10/5 * * * * ?&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;每分钟的第10秒启动，每5秒执行一次，当前是第 &#123;&#125; 秒&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().getSeconds());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 10 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 15 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 20 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 25 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 30 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 35 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 40 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 45 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 50 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 55 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 10 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 15 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 20 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 25 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 30 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 35 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 40 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 45 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 50 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 55 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 10 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 15 秒</span><br><span class="line">每分钟的第10秒启动，每5秒执行一次，当前是第 20 秒</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 SpringBoot 中，周使用1-7分别表示周一到周日，个别定时任务每周的第一天是从周日开始。</p>
</blockquote>
<h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>在 SpringBoot 中，定时任务是阻塞的，也就是需要等待上一次的定时任务完成后才能再继续执行定时任务。这是因为在 SpringBoot 中支持使用定时任务线程池，而这个线程池默认大小为 <strong>1</strong> 导致的任务阻塞，这一般在业务中是不被允许的。</p>
<blockquote>
<p>org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</p>
</blockquote>
<p><img src="https://qiniu-note-image.ctong.top/note/images/202203141629493.png" alt="TaskSchedulingProperties源码"></p>
<p>在配置文件中修改线程池为合适的大小</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">12</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在某些版本可能不起作用…</p>
</blockquote>
<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>如果修改 <code>scheduling</code> 的线程池大小无效，那么还可以使用异步任务，这不仅仅可以用在定时任务上。</p>
<p>只需要使用 <code>@EnableAsync</code> 注解开启异步任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSchedule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>并且在你需要异步执行的方法上再标注一个 <code>@Async</code> 注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;10/5 * * * * ?&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">  log.info(<span class="string">&quot;每分钟的第10秒启动，每5秒执行一次，当前是第 &#123;&#125; 秒&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().getSeconds());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>随笔</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>性能与压力测试</title>
    <url>/2022/01/02/%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>压力测试可以考察但前硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在。压测都是为了系统在线上的处理能力和稳定性维持在一个标准范围内。</p>
<p>使用压力测试，我们希望找到很多种用其它测试方法更难发现的错误。有两种错误类型，它们分别是：</p>
<ul>
<li><strong>内存泄漏</strong></li>
<li><strong>并发同步</strong></li>
</ul>
<p>有效的压力测试系统将应用以下这些关键条件：<strong>重复、并发、量级、随机变化</strong></p>
<h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ul>
<li><p>响应时间（Response Time：RT）</p>
<p>响应时间指，用户从客户端发起一个请求开始，到客户端接收到从服务端返回的响应结束，整个过程所消耗的时间。</p>
</li>
<li><p>HPS（Hits Per Second）：每秒的点击数，单位是次&#x2F;秒</p>
</li>
<li><p>TPS（Transaction Per Second）：系统每秒处理交易数，单位是笔&#x2F;秒</p>
</li>
<li><p>QPS（Query Per Second）：系统每秒处理查询次数，单位是次&#x2F;秒。</p>
<p>对于互联网业务中，如果某些业务有且仅有一个请求连接，那么 TPS&#x3D;QPS&#x3D;HPS，一般情况下用 TPS 来衡量整个业务流程，用 QPS 来衡量接口查询次数，用 HPS 来表示对服务器点击请求。</p>
</li>
<li><p>无论 TPS、QPS、HPS，此指标是衡量系统处理能力非常重要的指标，越大越好，一般情况下：</p>
<ol>
<li>金融行业：1000TPS～50000TPS，不包括互联网化的活动</li>
<li>保险行业：100TPS～100000TPS，不包括互联网化的活动</li>
<li>制造行业：10TPS～5000TPS</li>
<li>互联网电子商务：10000TPS～1000000TPS</li>
<li>互联网中型网站：1000TPS～50000TPS</li>
<li>互联网小型网站：500TPS～10000TPS</li>
</ol>
</li>
<li><p>最大响应时间（MAX Response Time）指用户发出请求或者指令到系统做出反应（响应）的最大时间。</p>
</li>
<li><p>最少响应时间（Minimum Responsen Time）指用户发出请求或指令到系统做出反应（响应）的最少时间。</p>
</li>
<li><p>90%响应时间（90% Response Time）是指所有用户的响应时间进行排序，第90%的响应时间。</p>
</li>
<li><p>从外部看，性能测试主要关注如下三个指标</p>
<ol>
<li>吞吐量：每秒钟系统能够处理的请求数、任务数</li>
<li>响应时间：服务处理一个请求或一个任务的耗时</li>
<li>错误率：一批请求中结果出错的请求所占比例</li>
</ol>
</li>
</ul>
<h1 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h1><p>使用 jmeter 做压力测试。使用它需要有 java 环境，因为它是使用java开发的。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>到<a href="https://jmeter.apache.org/">官网</a>下载，JMeter官网网址：<a href="https://jmeter.apache.org/">https://jmeter.apache.org</a></p>
<p>点击左侧菜单的 <a href="https://jmeter.apache.org/download_jmeter.cgi">Download Releases</a></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271629073.png" alt="点击啊Download"></p>
<p>找到 <strong>Binaries</strong> 这一栏，点击下图标出来的地方就可以下载</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271632908.png" alt="点击下载"></p>
<p>解压后双击 <code>jmeter.sh</code>，如果是windows就打开<code>jmeter.bat</code></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271634210.png" alt="打开"></p>
<p>apache 已经做好了国际化工作，如果需要切换语言可以到 Choose Language 中切换</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271636192.png" alt="修改中文"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建一个测试计划</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271640799.png" alt="新建测试计划"></p>
<p>模拟有多少用户来请求某个指定接口，用来测试该接口的性能。右键测试计划，添加 &#x3D;&#x3D;&#x3D;&gt;&gt; 线程 &#x3D;&#x3D;&#x3D;&gt;&gt; 线程组</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271642748.png" alt="添加线程组"></p>
<p>创建200个用户，一共发送2w个请求的现场组</p>
<ul>
<li>线程数：模拟用户数</li>
<li>Ramp-Up时间：指定时间内将现场创建完成</li>
<li>循环次数：每个线程发送多少次请求</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112271645771.png" alt="模拟2w用户请求"></p>
<p>添加一个取样器，选择我们当前需要进行的测试类型</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281446477.png" alt="添加取样器"></p>
<p>例如我们对百度发起压力测试</p>
<ul>
<li>协议：我们要进行测试的协议，http或者https</li>
<li>服务器名称或IP：需要进行测试的目标服务器地址</li>
<li>端口：对哪个端口发起请求</li>
<li>路径：如果需要对指定服务器下的某个地址进行测试，可以在这指定</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281449129.png" alt="测试配置"></p>
<p>如果测试完后需要看测试指标，还需要添加一个结果树监听器 </p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281454482.png" alt="结果树监听器"></p>
<p>再添加一个汇总报告  ，里面有很多种指标可以供我们参考</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281456886.png" alt="添加汇总报告"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281457562.png" alt="汇总报告界面"></p>
<p> 全部设置好后点执行就可以</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281602346.png" alt="启动"></p>
<h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><ul>
<li>有错误率同开发确认，确定是否允许错误的发生或者错误率允许在多大的范围内；</li>
<li>Throughput 吞吐量每秒请求的数大于并发数，则可以慢慢的往上面增加；若在压测的机<br>  器性能很好的情况下，出现吞吐量小于并发数，说明并发数不能再增加了，可以慢慢的<br>  往下减，找到最佳的并发数；</li>
<li>压测结束，登陆相应的  web  服务器查看  CPU  等性能指标，进行数据的分析;</li>
<li>最大的  tps，不断的增加并发数，加到  tps  达到一定值开始出现下降，那么那个值就是<br>最大的  tps。</li>
<li>最大的并发数：最大的并发数和最大的  tps  是不同的概率，一般不断增加并发数，达到<br>一个值后，服务器出现请求超时，则可认为该值为最大的并发数。</li>
<li>压测过程出现性能瓶颈，若压力机任务管理器查看到的 cpu、网络和 cpu 都正常，未达到  90%以上，则可以说明服务器有问题，压力机没有问题。</li>
<li>影响性能考虑点包括：<br>数据库、应用程序、中间件（tomact、Nginx）、网络和操作系统等方面</li>
<li>首先考虑自己的应用属于  CPU  密集型还是  IO  密集型</li>
</ul>
<h1 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h1><p><img src="http://qiniu-note-image.ctong.top/note/images/202112281608523.png" alt="JVM执行过程"></p>
<ul>
<li>程序计数器 Program Counter Register<ul>
<li>记录的是正在执行的虚拟机字节码指令的地址</li>
<li>此内存区域是唯一一个在JAVA虚拟机规范中没有规定任何 <strong>OutOfMemoryError</strong> 的区域</li>
</ul>
</li>
<li>虚拟机 VM Stack<ul>
<li>描述的是 Java 方法执行的内存模型，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表，操作数栈，动态链接，方法接口等信息。</li>
<li>局部变量表存储了编译期可知的各种基本数据类型、对象引用</li>
<li>线程请求的栈深度不够会报 <strong>StackOverflowError</strong> 异常</li>
<li>栈动态扩展的容量不够会报 <strong>OutOfMemoryError</strong> 异常</li>
<li>虚拟机栈是线程隔离的，即每个线程都有自己独立的虚拟机栈</li>
</ul>
</li>
<li>本地方法：Native Stack<ul>
<li>本地方法栈类似于虚拟机栈，只不过本地方法栈使用的是本地方法</li>
</ul>
</li>
<li>堆：Heap<ul>
<li>几乎所有的对象实例都在堆上分配内存</li>
</ul>
</li>
</ul>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281618216.png" alt="JVM内存模型"></p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>所有的对象实例以及数组都要在堆上分配，堆事垃圾收集器管理的主要区域，也被称为 “GC堆” 。也是我们优化考虑的地方</p>
<p>堆可以细分为：</p>
<ul>
<li>新生代<ul>
<li>Eden 空间</li>
<li>From Survivor 空间</li>
<li>To Suvivor 空间</li>
</ul>
</li>
<li>老年代</li>
<li>永久代&#x2F;元空间（&lt; JDK1.8）<ul>
<li>Java8 以前永久代，受 jvm 管理，java8以后元空间，直接使用物理内存，因此，默认情况下，元空间的大小仅受本地内存限制。</li>
</ul>
</li>
</ul>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p><img src="http://qiniu-note-image.ctong.top/note/images/202112281634921.png" alt="GC流程"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112281635118.png" alt="内存分配流程图"></p>
<p>创建对象，首先会在新生代分配内存。检查 <code>Eden</code> 元区能不能放下当前对象，如果放得下就放，放不下则进行一次<strong>minorGC</strong>，这次GC主要清理新生代空间，这个GC非常快。如果GC后 Eden 元区还存在对象，那么会将这些对象放到幸存者区，如果幸存者区也没有内存，那么会将幸存者区中达到阈值的对象放到老年代区（每次GC都会刷新阈值，类似版本迭代）。GC之后再检查，如果还是放不下那么当前对象会被视为大对象，尝试将其放到老年代。老年代如果能放下那么会直接分配内存，如果放不下，则会进行一次 <strong>FULL GC</strong> ，这是一次全面GC，耗时非常久。如果老年代也放不下，那么会报内存溢出异常 <strong>OutOfMemoryError</strong>。</p>
<h2 id="jconsole与jvisualvm"><a href="#jconsole与jvisualvm" class="headerlink" title="jconsole与jvisualvm"></a>jconsole与jvisualvm</h2><p>JDK 提供的两个小工具 jconsole、jvisualvm（升级版的jconsole）。通过命令行启动，可监控本地和远程应用。</p>
<p>在控制台中输入 <code>jconsole</code> 打开 jconsole 控制台。选择指定服务，然后连接</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290904069.png" alt="连接指定服务"></p>
<p>可以查看程序的各种详情信息</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290905309.png"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290908799.png" alt="内存详情"></p>
<h3 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h3><p>jvisualvm 可以监控内存泄漏、跟踪垃圾回收、执行内存、CPU分析、线程分析等工作。通过 <code>jvisualvm</code> 命令打开 jvisualvm 控制台</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290910368.png" alt="jvisualvm"></p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在菜单栏中点击工具&#x3D;&#x3D;&#x3D;&gt;&gt;插件</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290920618.png" alt="截屏2021-12-29 09.20.13"></p>
<p>选择对应的差距，然后点安装即可，这个 Visual GC 插件是用来监视垃圾回收的，安装完后重启 jvisualvm</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290920379.png" alt="截屏2021-12-29 09.20.54"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290924143.png" alt="Visual GC面板"></p>
<h2 id="性能压测"><a href="#性能压测" class="headerlink" title="性能压测"></a>性能压测</h2><p>由于微服务请求是一层一层往下传递：</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290948037.png" alt="微服务调用流程"></p>
<p>在真正功能执行之前，请求需要经过许多中间件，需要测试中间件对性能到底有没有影响</p>
<blockquote>
<p>以下数据测试有误，以表格为准</p>
</blockquote>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>添加一个对nginx测试的配置，循环数设置为永远，因为我们需要持续不断的监控性能指标</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290955540.png" alt="nginx测试"></p>
<p>我nginx是在linux中的docker中安装，可以使用 <code>docker stats</code> 命令监控CPU使用率、内存等信息</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112290959012.png" alt="截屏2021-12-29 09.59.22"></p>
<p>经过测试，发现nginx对CPU占用率极高，因为它不需要处理什么业务，所有请求都是交由别人来处理，需要的是更多的线程去处理并发。</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291011461.gif" alt="nginx压测"></p>
<h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>单独对网关进行压测</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291025651.png" alt="网关压测配置"></p>
<p>其实网关和nginx一样，都是自身没什么业务，对并发要求极高</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291032569.gif" alt="网关压测"></p>
<h3 id="简单服务"><a href="#简单服务" class="headerlink" title="简单服务"></a>简单服务</h3><p>没有任何中间件，直接请求接口（原生）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291055764.png" alt="简单服务"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291102206.png" alt="测试结果"></p>
<h3 id="网关-简单服务"><a href="#网关-简单服务" class="headerlink" title="网关+简单服务"></a>网关+简单服务</h3><p>修改网关配置，让网关直接转发到指定服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gulimall-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: <span class="number">172.16</span><span class="number">.34</span><span class="number">.128</span>:<span class="number">8848</span></span><br><span class="line">    gateway:</span><br><span class="line">      routes:        </span><br><span class="line">				- id: product_route</span><br><span class="line">          uri: lb:<span class="comment">//gulimall-product</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/api/product<span class="comment">/**,/hello</span></span><br><span class="line"><span class="comment">          filters:</span></span><br><span class="line"><span class="comment">            - RewritePath=/api/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291059477.png" alt="测试配置"></p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291100842.png" alt="测试结果"></p>
<h3 id="页面全量数据"><a href="#页面全量数据" class="headerlink" title="页面全量数据"></a>页面全量数据</h3><p>在测试页面的时候，默认情况下只是发送请求到服务器返回页面html的时间，并不包括页面中的脚本、图片等资源。如果需要测全量数据，可以在取样器中配置，如：</p>
<p><img src="http://qiniu-note-image.ctong.top/note/images/202112291515536.png" alt="全量数据配置"></p>
<h3 id="中间件指标"><a href="#中间件指标" class="headerlink" title="中间件指标"></a>中间件指标</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/202112291703291.png" alt="指标"></p>
<ul>
<li>当前正在运行的线程数不能超过设定的最大值，一般情况下系统性能较好的情况下，线程数最小值设置50，最大值设置200比较合适</li>
<li>但前运行的JDBC连接数不能超过设定的最大值，一般情况下系统性能较好的情况下，JDBC 最小值设置50和最大值设置200比较合适</li>
<li>GC 频率不能频繁，特别是 FULL GC 频率更不能频繁，一般情况下系统性能较好的情况下， JVM  最小堆大小和最大堆大小分别设置  1024M  比较合适</li>
<li>中间件越多，性能损失越大，大多都损失在网络交互</li>
<li>业务<ul>
<li>数据库（MySQL优化）</li>
<li>模板的渲染速度（打开缓存）</li>
<li>静态资源</li>
</ul>
</li>
</ul>
<h3 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h3><p><img src="http://qiniu-note-image.ctong.top/note/images/202112300829431.png" alt="数据库指标"></p>
<ul>
<li>SQL 耗时越少越好，一般情况下微妙级别</li>
<li>命中率越高越好，一般情况下不能低于 95% </li>
<li>锁等待次数越低越好，等待时间越短越好</li>
</ul>
<h3 id="压测与优化结果"><a href="#压测与优化结果" class="headerlink" title="压测与优化结果"></a>压测与优化结果</h3><p><strong>虚拟机2核3G</strong></p>
<table>
<thead>
<tr>
<th>压测内容</th>
<th>压测线程数</th>
<th>吞吐量&#x2F;s</th>
<th>90%响应时间</th>
<th>99%响应时间</th>
</tr>
</thead>
<tbody><tr>
<td>Nginx</td>
<td>50</td>
<td>5764</td>
<td>11</td>
<td>71</td>
</tr>
<tr>
<td>网关</td>
<td>50</td>
<td>21657</td>
<td>3</td>
<td>8</td>
</tr>
<tr>
<td>简单服务</td>
<td>50</td>
<td>37698</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>网关+简单服务</td>
<td>50</td>
<td>10886</td>
<td>8</td>
<td>22</td>
</tr>
<tr>
<td>全链路(简单)</td>
<td>50</td>
<td>270</td>
<td>34</td>
<td>4772</td>
</tr>
<tr>
<td>首页</td>
<td>50</td>
<td>750(db、thymeleaf)</td>
<td>91</td>
<td>151</td>
</tr>
<tr>
<td>首页（打开模板缓存）</td>
<td>50</td>
<td>980</td>
<td>66</td>
<td>115</td>
</tr>
<tr>
<td>首页（打开模板缓存、日志级别debug -&gt; error）</td>
<td>50</td>
<td>1182</td>
<td>52</td>
<td>88</td>
</tr>
<tr>
<td>首页全量数据(全链路)</td>
<td>50</td>
<td>2（db、thymeleaf、资源）</td>
<td>25460</td>
<td>36744</td>
</tr>
<tr>
<td>首页全量数据(全链路，动静分离)</td>
<td>50</td>
<td>6</td>
<td>10854</td>
<td>13073</td>
</tr>
<tr>
<td>三级分类获取</td>
<td>50</td>
<td>20(频繁gc、db)</td>
<td>3172</td>
<td>3463</td>
</tr>
<tr>
<td>三级分类获取（优化数据库加索引）</td>
<td>50</td>
<td>27</td>
<td>1990</td>
<td>2092</td>
</tr>
<tr>
<td>三级分类获取（优化查询数据库业务代码）</td>
<td>50</td>
<td>240</td>
<td>11</td>
<td>682</td>
</tr>
</tbody></table>
<blockquote>
<p>如果GC过于频繁，可以适当的调整内存</p>
<p>-Xmx1024m 最大占用内存</p>
<p>-Xms1024m 初始内存</p>
<p>-Xmn512m 新生代内存</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>手撸Spring整合MyBatis玩具</title>
    <url>/2022/01/02/%E6%89%8B%E6%92%B8Spring%E6%95%B4%E5%90%88MyBatis%E7%8E%A9%E5%85%B7/</url>
    <content><![CDATA[<p>源码在我GitHub上，有兴趣可以去观望一下：<a href="https://github.com/YouChuantong/mybatis_learn_demo">传送门</a></p>
<p>这个只是个<strong>玩具、玩具、玩具</strong>，正经的还得看官方提供的整合包<br>先说下这个玩具的问题所在吧！&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 无法提交事务和无法关闭SqlSession，嗯嗯嗯~~~</p>
<p>开始吧～～</p>
<hr>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>若想使用Spring容器提供的强大功能，例如：<code>Autowired</code>，那么就需要让Spring容器将其管理。</p>
<p>没整合之前，每次都需要通过<code>SqlSessionFactory</code>将其创建，一个两个还好，写多了整个人都麻了…</p>
<p>所以我就想，能不能在service层直接注入呢？</p>
<p>让Spring注入的话就得注册到容器，Dao层数量和命名都无法确定，怎么注册Bean呢？..嘶～～～</p>
<p><del>嗯。。。使用工厂模式加上自动扫包好像能实现..</del></p>
<p>说干就干…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7157094465332447639L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis配置文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_CONFIG_PATH</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个全局SqlSessionFactory组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getSqlSessionFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">configStream</span> <span class="operator">=</span> getConfigStream()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(configStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 懒加载Bean工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClass Bean类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; Bean类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getMapping</span><span class="params">(Class&lt;T&gt; daoClass)</span> &#123;</span><br><span class="line">        <span class="type">SpringUtils</span> <span class="variable">springUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringUtils</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">bean</span> <span class="operator">=</span> springUtils.getBean(SqlSessionFactory.class);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> bean.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(daoClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取配置文件文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getConfigStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Resources.getResourceAsStream(MYBATIS_CONFIG_PATH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>嗯？我该怎么为<code>getMapping</code>注册为懒加载呢???还有<code>Class&lt;T&gt; daoClass</code>我该怎么拿到当前<code>getBean</code>时要找的类型呢？</p>
<p>嘶～～～</p>
<p>嘶～～～</p>
<p>嘶～～～</p>
<h2 id="更换方案"><a href="#更换方案" class="headerlink" title="更换方案"></a>更换方案</h2><p>翻了翻<code>ClassPathXmlApplication</code>源码，启动的时候它去执行了个后置处理器<code>org.springframework.beans.factory.config.BeanFactoryPostProcessor</code>。这个处理器需要实现一个<code>postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory)</code>，这个<code>ConfigurableListableBeanFactory</code>就是那个还未启动完成的容器。嗯嗯嗯…</p>
<p>它里面有一个<code>registerSingleton</code>方法，可以注册单实例Bean，可我需要注册多实例…先不管了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span></span><br><span class="line">  <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">  <span class="built_in">this</span>.configurableListableBeanFactory = configurableListableBeanFactory;</span><br><span class="line">  <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">    factory = configurableListableBeanFactory.getBean(SqlSessionFactory.class);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">RegisterMyBatisFactory</span> <span class="variable">registerMyBatisFactory</span> <span class="operator">=</span> configurableListableBeanFactory.getBean(</span><br><span class="line">    RegisterMyBatisFactory.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (registerMyBatisFactory == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">mapperPackage</span> <span class="operator">=</span> registerMyBatisFactory.getPackage();</span><br><span class="line">  <span class="comment">// 获取指定包下所有class</span></span><br><span class="line">  List&lt;Class&lt;?&gt;&gt; allClass = getClassByPackage(mapperPackage);</span><br><span class="line">  <span class="comment">// 通过@Mapper过滤无效class</span></span><br><span class="line">  List&lt;Class&lt;?&gt;&gt; interfaceByWithMyBatis = getInterfaceByMapper(allClass);</span><br><span class="line">  <span class="comment">// 将所有Mapper注册到IOC中</span></span><br><span class="line">  registerMyBatis(interfaceByWithMyBatis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code> this.configurableListableBeanFactory = configurableListableBeanFactory;</code>  保存这个容器</p>
</li>
<li><p><code>RegisterMyBatisFactory registerMyBatisFactory = configurableListableBeanFactory.getBean(RegisterMyBatisFactory.class);</code> 这里定义了个接口，通过这个借口拿到Dao所在的包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis，将其注册在容器中，整合器就可以获取到指定包名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RegisterMyBatisFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取mapper所在的包</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String <span class="title function_">getPackage</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>List&lt;Class&lt;?&gt;&gt; allClass = getClassByPackage(mapperPackage);</code> 通过包名找这个包下所有的类，这个方法就不说了，就一个普通的文件查找而已。有兴趣就拉源码吧！</p>
</li>
<li><p><code>List&lt;Class&lt;?&gt;&gt; interfaceByWithMyBatis = getInterfaceByMapper(allClass);</code>需要过滤没有用的类，也就是说可能不是Dao。通过MyBatis提供的<code>@Mapper</code>注解来识别了，懒得自己写注解，先把功能实现。就一个简简单单的反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过指定注解获取接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 过滤结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Class&lt;?&gt;&gt; getInterfaceByMapper(List&lt;Class&lt;?&gt;&gt; clazz) &#123;</span><br><span class="line">  <span class="keyword">return</span> clazz.stream().filter(aClass -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!aClass.isInterface()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Mapper</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Mapper.class);</span><br><span class="line">    <span class="keyword">return</span> annotation != <span class="literal">null</span>;</span><br><span class="line">  &#125;).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>registerMyBatis(interfaceByWithMyBatis);</code> 接下来就将过滤后的Mapper注册到容器中了。如果是注册的多实例Bean，那么就可以通过切面去搞定这个事务问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将MyBatis注册到IOC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerMyBatis</span><span class="params">(List&lt;Class&lt;?&gt;&gt; mappers)</span> &#123;</span><br><span class="line">  mappers.forEach(clazz -&gt; &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(clazz);</span><br><span class="line">    configurableListableBeanFactory.registerSingleton(clazz.getName(), mapper);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h2><p>Dao层用<code>@Mapper</code>标注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeDao</span> <span class="keyword">extends</span> <span class="title class_">GenericDao</span>&lt;Employee&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>service层直接注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, EmployeeService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1863674392751816610L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在就可以了…..</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;empName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Clover&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloveryou.ctong@qq.com&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>接口幂等性-学习笔记</title>
    <url>/2022/02/26/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="接口幂等性"><a href="#接口幂等性" class="headerlink" title="接口幂等性"></a>接口幂等性</h1><h2 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h2><p>接口幂等性就是用户对同一操作发起的一次请求或多次请求的结果是一致的，不会应为多次点击而产生问题，例如：支付场景，用户购买了商品支付和扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录变成了两条，这就是没有保证接口的幂等性产生的问题。</p>
<h2 id="可能出现幂等性问题的情况"><a href="#可能出现幂等性问题的情况" class="headerlink" title="可能出现幂等性问题的情况"></a>可能出现幂等性问题的情况</h2><p>例如用户点击了多次按钮</p>
<p>用户页面回退后再次提交</p>
<p>微服务之间互相调用是，由于网络等其它原因，导致请求失败，feign 出发重试机制</p>
<h2 id="什么情况下需要幂等"><a href="#什么情况下需要幂等" class="headerlink" title="什么情况下需要幂等"></a>什么情况下需要幂等</h2><p>以SQL为例，有些操作是天然幂等的。</p>
<ul>
<li><code>select * from TableNmae where id = ?</code>，无论执行多少次都不会改变状态，是天然幂等的。</li>
<li><code>update table set col1=1 where col2=2</code> 无论执行多少次状态都是一直的，也是幂等操作</li>
<li><code>delete from user where userId = 1</code> 多次操作，结果一致，这是具备幂等性的操作</li>
<li><code>insert into user(userId, name) values(1, &#39;a&#39;)</code> 如果userId 为唯一主键，即重复操作上面的业务，只会插入一条用户数据，具备幂等性。</li>
</ul>
<p>以下SQL操作不具备幂等性</p>
<ul>
<li><code>update table1 set col1=col1+1 where col2=2</code> 每次执行的结果都会发生变化，所以该操作不具备幂等性</li>
<li><code>insert into user(userId, name) values(1, &#39;a&#39;)</code> 如果 userid 不是主键，可以重复，那上面业务多次操作后数据会新增多条，所以该操作不具备幂等性。</li>
</ul>
<h2 id="幂等解决方案"><a href="#幂等解决方案" class="headerlink" title="幂等解决方案"></a>幂等解决方案</h2><h3 id="token-机制"><a href="#token-机制" class="headerlink" title="token 机制"></a>token 机制</h3><ol>
<li>服务端提供了发送 token 的接口，我们在分析业务员的时候，哪些业务是存在幂等性问题的，就必须要执行业务前先去获取 token ，服务器会把 token 保存到 redis 中。</li>
<li>然后调用业务接口请求时，把 token 携带过去，一般放在请求头。</li>
<li>服务器判断 token 是否存在 redis 中，存在则表示第一次请求，然后删除 token 继续执行业务。</li>
<li>如果判断 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样就保证了业务代码不被重复执行。</li>
</ol>
<p>这种方式存在一定的危险性</p>
<ol>
<li><p>先删除 token 还是后删除 token</p>
<ol>
<li>先删除可能导致业务确实没有执行，重试还带上之前token，由于防重复设计导致，请求还是不能执行。</li>
<li>后删除可能导致业务处理成功，但是服务出现闪断问题导致没有删除 token，用户重试时导致业务还能被正常执行。</li>
<li>我们最好设计为先删除 token，如果业务调用失败，就重新获取 token 再次请求。</li>
</ol>
</li>
<li><p>token 获取、比较和删除必须是原子性</p>
<ol>
<li><p><code>redis.get(token)</code> 、 <code>token.equals</code> 、<code>redis.del(token)</code> 如果这三个操作不是原子，那么可能导致在高并发情况下都 get 到同样的数据，判断都成功。继续执行业务</p>
</li>
<li><p>可以在 redis 中使用 lua 脚本来完成这个操作</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>])==ARGV[<span class="number">1</span>] <span class="keyword">then</span> <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>]) <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="使用锁机制"><a href="#使用锁机制" class="headerlink" title="使用锁机制"></a>使用锁机制</h3><h4 id="数据库悲观锁"><a href="#数据库悲观锁" class="headerlink" title="数据库悲观锁"></a>数据库悲观锁</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xxx <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>

<p>悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用。另外要注意的是，id 字段一定是主键或者唯一索引，不然可能造成锁表的结果，处理起来会非常麻烦。</p>
<h4 id="数据库乐观锁"><a href="#数据库乐观锁" class="headerlink" title="数据库乐观锁"></a>数据库乐观锁</h4><p>这种方式适合在更新的场景中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_goods <span class="keyword">set</span> count<span class="operator">=</span>count <span class="number">-1</span>,version <span class="operator">=</span> version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span>  good_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>根据 version 版本，也就是在操作库存前先获取当前商品的 version 版本号，然后操作的时候带上此 version 版本号。例如：第一次操作库存时，得到 version 为1，调用库存服务后 version 变成了2。但是返回给订单服务出现了问题，订单服务又一次发起调用库存服务，此时传入的 version 还是 1，再执行上面的 sql 语句时，就不会有效果。因为 version 已经变为 2 了，where 条件不成立。这样就保证了不管调用几次，只会真正的处理一次。乐观锁主要使用于处理读多写少的问题。</p>
<h3 id="业务层分布式锁"><a href="#业务层分布式锁" class="headerlink" title="业务层分布式锁"></a>业务层分布式锁</h3><p>如果多个机器可能再同一时间同时处理相同的数据，比如多台机器定时任务都拿到了相同数据处理，我们就可以加分布式锁锁定此数据。处理完成后释放锁，获取到锁的必须先判断这个数据是否被处理过。</p>
<h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><h4 id="数据库唯一约束"><a href="#数据库唯一约束" class="headerlink" title="数据库唯一约束"></a>数据库唯一约束</h4><p>插入数据，应该按照唯一索引进行插入，比如订单号，相同的订单就不可能有两种记录插入。我们在数据库层面防止重复。</p>
<p>这个机制是利用了数据库的主键唯一约束的特性，解决了在 insert 场景是幂等性问题。但主键的要求不是自增主键，这样就需要业务生成全局唯一的主键。</p>
<p>如果是在分库分表的场景下，路由规则要保证相同请求下，落地在同一个数据库个同一表中，要不然数据库主键约束就不起效果了，因为不同的数据库和表主键不相关</p>
<h4 id="redis-set防重"><a href="#redis-set防重" class="headerlink" title="redis set防重"></a>redis set防重</h4><p>很多数据需要处理，只能被处理一次，比如我们可以计算数据的 MD5  将其放入 redis 的 set。每次处理数据，先检查这个 MD5 是否已经存在，存在就不处理。</p>
<h3 id="防重表"><a href="#防重表" class="headerlink" title="防重表"></a>防重表</h3><p>使用订单号 orderNo 做为去重表的唯一索引，把唯一索引插入去重表，再进行业务操作，并且他们在同一个事物中。这个保证了重复请求时，因为去重表有唯一的约束，导致请求失败，避免了幂等问题。这里要注意的是，去重和业务表应该在同一个库中，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据会滚。这个能很好的保证了数据一致性。</p>
<h3 id="全局请求唯一id"><a href="#全局请求唯一id" class="headerlink" title="全局请求唯一id"></a>全局请求唯一id</h3><p>调用接口时，生成一个唯一id，redis 将数据保存到集合中（去重），存在即处理过。可以使用 nginx 设置每一个请求的唯一id。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> X-Request-Id <span class="variable">$request_id</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>随笔</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存数据的一致性</title>
    <url>/2022/01/06/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[<h1 id="缓存数据的一致性"><a href="#缓存数据的一致性" class="headerlink" title="缓存数据的一致性"></a>缓存数据的一致性</h1><p>读所有的数据，首先去缓存中获取，缓存中没有就去读数据库，最后在缓存中放一份。如果该数据在数据库中发生改变，那么缓存里面的数据如何和数据库保持一致？解决这个问题，目前有两个用的非常多的场景：</p>
<ul>
<li>双写模式</li>
<li>失效模式</li>
</ul>
<h2 id="双写模式"><a href="#双写模式" class="headerlink" title="双写模式"></a>双写模式</h2><p>修改数据库的数据后再修改缓存中的数据</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201061729334.png" alt="双写模式"></p>
<p>但又引出了一个问题，那就是当有并发时，线程一将数据库的值改为「一号」然后立刻将这个值保存到缓存，而保存过程中遇到了种种原因，如网络波动，导致了数据延迟抵达缓存服务器，而此时线程二已经将数据库数据改为「二号」然后将数据保存到缓存，线程二网络通畅，很快就抵达缓存服务器先于线程一将数据保存到缓存中，而此时线程一的数据才抵达缓存服务器，将数据「一号」保存到了缓存中（把二号覆盖），这时缓存中保存的就是一个脏数据。</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201062001731.png" alt="脏数据被保存原理图"></p>
<p>这是临时性的脏数据问题，但是在数据稳定、缓存过期后，又能得到最新的正确数据。</p>
<p>读到的最新数据有延迟，这就导致了<strong>数据的最终一致性</strong>问题。</p>
<h2 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h2><p>在改完数据库后，将缓存中的数据删除，下一次请求进来从缓存获取数据时发现没有对应数据，他会到数据库中查询并将数据保存在缓存中。</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201061731504.png" alt="失效模式"></p>
<p>失效模式也有数据最终一致性问题，例如有三台服务器同时并发，服务器一负载小，修改数据库和删除缓存一气呵成，服务器二负载大，在修改数据库时磨磨蹭蹭耗时很久，而服务器三是获取数据的，他读取缓存没有数据又去数据库中将数据查出来了，此时查询的是服务器一修改的数据。完成这些操作后服务器二才将数据库修改瞬间删除缓存，而服务器三在更新缓存时遇到网络波动，非常久后才成功将数据保存到缓存中，但他保存的却是服务器一修改的旧数据</p>
<p><img src="http://qiniu-note-image.ctong.top//note/images/202201062029081.png" alt="脏数据被保存原理图"></p>
<h2 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h2><p>以上两种模式遇到的问题（乱序）都可以通过加锁来解决，但是加锁后系统可能会变得笨重，所以，如果我们的数据经常修改，那么我们还需要将其放到缓存中咩？</p>
<p>如果数据经常修改，那么我们的锁会经常在，会导致整个系统非常缓慢，如果我们想要实时的读取，数据一致性要求非常高，那么这种情况还不如不加锁，直接访问数据库。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>我们发现无论是双写模式还是失效模式，都会导致缓存的的不一致问题。即多个实例同时更新就会出现问题，应该怎么办？<ol>
<li>如果是用户纬度数据（订单数据，用户数据），这种并发几率非常小，那么就不需要考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。</li>
<li>如果是菜单，商品介绍等基础数据，也可以去使用 <strong>canal</strong> 订阅 binlog 的方式。</li>
<li>缓存数据 + 过期时间也足够解决大部分业务对于缓存的要求。</li>
<li>通过加锁保证并发读写，写写的时候按顺序排队，读读则无所谓。所以适合使用读写锁。（业务不关心脏数据，允许临时脏数据可忽略）。</li>
</ol>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>我们能放入缓存的数据本就不应该是实时性、一致性要求超高的，所以缓存数据的时候加上过期时间，保证每天拿到当前最新数据即可。</li>
<li>我们不应该过度设计。增加系统的复杂性</li>
<li>遇到实时性、一致性要求高的数据，就应该查数据库，即使慢点，也无所谓。</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
